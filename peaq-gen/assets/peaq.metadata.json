[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 9,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "compact": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 12,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 15,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "sequence": {
                  "type": 19
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 165,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 57,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "peaq_dev_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Contracts",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "pallet_contracts::Event<Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "pallet_ethereum::Event"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "pallet_evm::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "type": 58,
                          "typeName": "pallet_base_fee::Event"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "parachain_staking::Event<Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "BlockReward",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "pallet_block_reward::Event<Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "StakingCoefficientRewardCalculator",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "staking_coefficient_reward::Event<Runtime>"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "orml_xtokens::Event<Runtime>"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "UnknownTokens",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "orml_unknown_tokens::Event"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ZenlinkProtocol",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "zenlink_protocol::Event<Runtime>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 141,
                          "typeName": "pallet_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "PeaqDid",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "peaq_pallet_did::Event<Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Transaction",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "peaq_pallet_transaction::Event<Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 148,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "PeaqRbac",
                      "fields": [
                        {
                          "type": 150,
                          "typeName": "peaq_pallet_rbac::Event<Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "PeaqStorage",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "peaq_pallet_storage::Event<Runtime>"
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "PeaqMor",
                      "fields": [
                        {
                          "type": 162,
                          "typeName": "peaq_pallet_mor::Event<Runtime>"
                        }
                      ],
                      "index": 105
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 25,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 17,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 31,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 36,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 35
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 35
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Instantiated",
                      "fields": [
                        {
                          "name": "deployer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Contract deployed by address at the specified address."
                      ]
                    },
                    {
                      "name": "Terminated",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that was terminated."
                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that received the contracts remaining balance"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contract has been removed.",
                        "",
                        "# Note",
                        "",
                        "The only way for a contract to be removed and emitting this event is by calling",
                        "`seal_terminate`."
                      ]
                    },
                    {
                      "name": "CodeStored",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Code with the specified hash has been stored."
                      ]
                    },
                    {
                      "name": "ContractEmitted",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that emitted the event."
                          ]
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>",
                          "docs": [
                            "Data supplied by the contract. Metadata generated during contract compilation",
                            "is needed to decode it."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A custom event emitted by the contract."
                      ]
                    },
                    {
                      "name": "CodeRemoved",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A code with the specified hash was removed."
                      ]
                    },
                    {
                      "name": "ContractCodeUpdated",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that has been updated."
                          ]
                        },
                        {
                          "name": "new_code_hash",
                          "type": 12,
                          "typeName": "T::Hash",
                          "docs": [
                            "New code hash that was set for the contract."
                          ]
                        },
                        {
                          "name": "old_code_hash",
                          "type": 12,
                          "typeName": "T::Hash",
                          "docs": [
                            "Previous code hash of the contract."
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A contract's code was updated."
                      ]
                    },
                    {
                      "name": "Called",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 38,
                          "typeName": "Origin<T>",
                          "docs": [
                            "The caller of the `contract`."
                          ]
                        },
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that was called."
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A contract was called either by a plain account or another contract.",
                        "",
                        "# Note",
                        "",
                        "Please keep in mind that like all events this is only emitted for successful",
                        "calls. This is because on failure all storage changes including events are",
                        "rolled back."
                      ]
                    },
                    {
                      "name": "DelegateCalled",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The contract that performed the delegate call and hence in whose context",
                            "the `code_hash` is executed."
                          ]
                        },
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "CodeHash<T>",
                          "docs": [
                            "The code hash that was delegate called."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A contract delegate called a code hash.",
                        "",
                        "# Note",
                        "",
                        "Please keep in mind that like all events this is only emitted for successful",
                        "calls. This is because on failure all storage changes including events are",
                        "rolled back."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "pallet_contracts",
                "Origin"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 39
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "peaq_dev_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    },
                    {
                      "name": "UpdatedInactive",
                      "fields": [
                        {
                          "name": "reactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "deactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The inactive funds of the pallet have been updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 43,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "to",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "transaction_hash",
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "name": "exit_reason",
                          "type": 47,
                          "typeName": "ExitReason"
                        },
                        {
                          "name": "extra_data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 46,
                      "typeName": "[u8; 20]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "ExitSucceed"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "ExitError"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "ExitRevert"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "ExitFatal"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "index": 0
                    },
                    {
                      "name": "Returned",
                      "index": 1
                    },
                    {
                      "name": "Suicided",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "index": 0
                    },
                    {
                      "name": "StackOverflow",
                      "index": 1
                    },
                    {
                      "name": "InvalidJump",
                      "index": 2
                    },
                    {
                      "name": "InvalidRange",
                      "index": 3
                    },
                    {
                      "name": "DesignatedInvalid",
                      "index": 4
                    },
                    {
                      "name": "CallTooDeep",
                      "index": 5
                    },
                    {
                      "name": "CreateCollision",
                      "index": 6
                    },
                    {
                      "name": "CreateContractLimit",
                      "index": 7
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "Opcode"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "OutOfOffset",
                      "index": 8
                    },
                    {
                      "name": "OutOfGas",
                      "index": 9
                    },
                    {
                      "name": "OutOfFund",
                      "index": 10
                    },
                    {
                      "name": "PCUnderflow",
                      "index": 11
                    },
                    {
                      "name": "CreateEmpty",
                      "index": 12
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "Cow<'static, str>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "MaxNonce",
                      "index": 14
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "evm_core",
                "opcode",
                "Opcode"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 52
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 52
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "index": 0
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "index": 1
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "ExitError"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "Cow<'static, str>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 56,
                          "typeName": "Log"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given address."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 45,
                      "typeName": "H160"
                    },
                    {
                      "name": "topics",
                      "type": 57,
                      "typeName": "Vec<H256>"
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "Bytes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "def": {
                "sequence": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 59,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "index": 1
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 61,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 11
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new staking round has started.",
                        "\\[block number, round number\\]"
                      ]
                    },
                    {
                      "name": "EnteredTopCandidates",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A new account has joined the set of top candidates.",
                        "\\[account\\]"
                      ]
                    },
                    {
                      "name": "LeftTopCandidates",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account was removed from the set of top candidates.",
                        "\\[account\\]"
                      ]
                    },
                    {
                      "name": "JoinedCollatorCandidates",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account has joined the set of collator candidates.",
                        "\\[account, amount staked by the new candidate\\]"
                      ]
                    },
                    {
                      "name": "CollatorStakedMore",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A collator candidate has increased the amount of funds at stake.",
                        "\\[collator's account, previous stake, new stake\\]"
                      ]
                    },
                    {
                      "name": "CollatorStakedLess",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A collator candidate has decreased the amount of funds at stake.",
                        "\\[collator's account, previous stake, new stake\\]"
                      ]
                    },
                    {
                      "name": "CollatorScheduledExit",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A collator candidate has started the process to leave the set of",
                        "candidates. \\[round number, collator's account, round number when",
                        "the collator will be effectively removed from the set of",
                        "candidates\\]"
                      ]
                    },
                    {
                      "name": "CollatorCanceledExit",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A collator candidate has canceled the process to leave the set of",
                        "candidates and was added back to the candidate pool. \\[collator's",
                        "account\\]"
                      ]
                    },
                    {
                      "name": "CandidateLeft",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has left the set of collator candidates.",
                        "\\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "CollatorRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account was forcedly removed from the  set of collator",
                        "candidates. \\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "MaxCandidateStakeChanged",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The maximum candidate stake has been changed.",
                        "\\[new max amount\\]"
                      ]
                    },
                    {
                      "name": "DelegatorStakedMore",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A delegator has increased the amount of funds at stake for a",
                        "collator. \\[delegator's account, collator's account, previous",
                        "delegation stake, new delegation stake\\]"
                      ]
                    },
                    {
                      "name": "DelegatorStakedLess",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A delegator has decreased the amount of funds at stake for a",
                        "collator. \\[delegator's account, collator's account, previous",
                        "delegation stake, new delegation stake\\]"
                      ]
                    },
                    {
                      "name": "DelegatorLeft",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An account has left the set of delegators.",
                        "\\[account, amount of funds un-staked\\]"
                      ]
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account has delegated a new collator candidate.",
                        "\\[account, amount of funds staked, total amount of delegators' funds",
                        "staked for the collator candidate\\]"
                      ]
                    },
                    {
                      "name": "DelegationReplaced",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A new delegation has replaced an existing one in the set of ongoing",
                        "delegations for a collator candidate. \\[new delegator's account,",
                        "amount of funds staked in the new delegation, replaced delegator's",
                        "account, amount of funds staked in the replace delegation, collator",
                        "candidate's account, new total amount of delegators' funds staked",
                        "for the collator candidate\\]"
                      ]
                    },
                    {
                      "name": "DelegatorLeftCollator",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An account has stopped delegating a collator candidate.",
                        "\\[account, collator candidate's account, old amount of delegators'",
                        "funds staked, new amount of delegators' funds staked\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "A collator or a delegator has received a reward.",
                        "\\[account, amount of reward\\]"
                      ]
                    },
                    {
                      "name": "MaxSelectedCandidatesSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "The maximum number of collator candidates selected in future",
                        "validation rounds has changed. \\[old value, new value\\]"
                      ]
                    },
                    {
                      "name": "BlocksPerRoundSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "The length in blocks for future validation rounds has changed.",
                        "\\[round number, first block in the current round, old value, new",
                        "value\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "dmq_head",
                          "type": 12,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_block_reward",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DistributionConfigurationChanged",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "RewardDistributionConfig"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Distribution configuration has been updated."
                      ]
                    },
                    {
                      "name": "BlockIssueRewardChanged",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Setup the block issue reward"
                      ]
                    },
                    {
                      "name": "MaxCurrencySupplyChanged",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Setup the maximum currency supply (hard cap)"
                      ]
                    },
                    {
                      "name": "BlockRewardsDistributed",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Rewards have been distributed"
                      ]
                    },
                    {
                      "name": "TransactionFeesDistributed",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Rewards have been distributed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_block_reward",
                "types",
                "RewardDistributionConfig"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "treasury_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "dapps_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "collators_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "lp_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "machines_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    },
                    {
                      "name": "parachain_lease_fund_percent",
                      "type": 68,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "def": {
                "compact": {
                  "type": 69
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "staking_coefficient_reward",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CoefficientSet",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Reware rate configuration for future validation rounds has changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some XCM was executed ok."
                      ]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        },
                        {
                          "name": "error",
                          "type": 72,
                          "typeName": "XcmError"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some XCM failed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM version used."
                      ]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bad XCM format used."
                      ]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 65,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 73,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "sent_at",
                          "type": 4,
                          "typeName": "RelayBlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "used",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "LocationFull",
                      "index": 4
                    },
                    {
                      "name": "LocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ExpectationFalse",
                      "index": 22
                    },
                    {
                      "name": "PalletNotFound",
                      "index": 23
                    },
                    {
                      "name": "NameMismatch",
                      "index": 24
                    },
                    {
                      "name": "VersionIncompatible",
                      "index": 25
                    },
                    {
                      "name": "HoldingWouldOverflow",
                      "index": 26
                    },
                    {
                      "name": "ExportError",
                      "index": 27
                    },
                    {
                      "name": "ReanchorFailed",
                      "index": 28
                    },
                    {
                      "name": "NoDeal",
                      "index": 29
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 30
                    },
                    {
                      "name": "LockError",
                      "index": 31
                    },
                    {
                      "name": "NoPermission",
                      "index": 32
                    },
                    {
                      "name": "Unanchored",
                      "index": 33
                    },
                    {
                      "name": "NotDepositable",
                      "index": 34
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 35
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Barrier",
                      "index": 37
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 38
                    },
                    {
                      "name": "ExceedsStackLimit",
                      "index": 39
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 96,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 113,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        },
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "The cost of sending it (borne by the chain) is included.",
                        "",
                        "\\[ destination, result, cost \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 72,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 127,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerierVersion",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Expected query response has been received but the expected querier location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "InvalidQuerier",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Expected query response has been received but the querier location of the response does",
                        "not match the expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected querier, maybe actual querier \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyStarted",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A remote has requested XCM version change notification from us and we have honored it.",
                        "A version information message is sent to them and its cost is included.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyRequested",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "We have requested that a remote chain sends us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "VersionNotifyUnrequested",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "We have requested that a remote chain stops sending us XCM version change notifications.",
                        "",
                        "\\[ destination location, cost \\]"
                      ]
                    },
                    {
                      "name": "FeesPaid",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Fees were paid from a location for an operation (often for using `SendXcm`).",
                        "",
                        "\\[ paying location, fees \\]"
                      ]
                    },
                    {
                      "name": "AssetsClaimed",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 113,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some assets have been claimed from an asset trap",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "type": 72,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 77,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        },
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 80,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 80,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 80,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 46,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 83,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 84,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 81
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 81
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Moniker",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 86,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "sequence": {
                  "type": 87
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 96,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 106,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 107,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 81,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 77,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 89,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "def": {
                "sequence": {
                  "type": 90
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 91,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 92,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 98
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 98
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "def": {
                "tuple": [
                  4,
                  72
                ]
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 100
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 102,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v3",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 101,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 101,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 79,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "def": {
                "sequence": {
                  "type": 100
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TruncatedError",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 76
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 76
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v2",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 76,
                      "typeName": "MultiLocation"
                    },
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 91,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 111,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 91,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 111,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v3",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "v2::MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "v3::MultiAssets"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 115,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "def": {
                "sequence": {
                  "type": 116
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 117,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 125,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 119,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        },
                        {
                          "type": 120,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 121,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 121,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 121,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 46,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 123,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 124,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "xcm",
                "v2",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 126,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "v2::MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "v3::MultiLocation"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "type": 75,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM."
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM."
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "outcome",
                          "type": 75,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome."
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "remaining_weight",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "required_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "overweight_index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "overweight_index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_used",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed."
                      ]
                    },
                    {
                      "name": "MaxMessagesExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The maximum number of downward messages was."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "status",
                          "type": 31,
                          "typeName": "BalanceStatus"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some reserved balance was repatriated (moved from reserved to",
                        "another account)."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "TotalIssuanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The total issuance of an currency has been set"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some balances were withdrawn (e.g. pay for transaction fee)"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some balances were slashed (e.g. due to mis-behavior)"
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Deposited some balance into an account"
                      ]
                    },
                    {
                      "name": "LockSet",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 94,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some funds are locked"
                      ]
                    },
                    {
                      "name": "LockRemoved",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 94,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some locked funds were unlocked"
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some free balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some locked balance was freed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "peaq_primitives_xcm",
                "currency",
                "CurrencyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Erc20",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "EvmAddress"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "LPToken",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "TokenSymbol"
                        },
                        {
                          "type": 132,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "peaq_primitives_xcm",
                "currency",
                "TokenSymbol"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PEAQ",
                      "index": 0
                    },
                    {
                      "name": "KRST",
                      "index": 1
                    },
                    {
                      "name": "AGNG",
                      "index": 2
                    },
                    {
                      "name": "DOT",
                      "index": 64
                    },
                    {
                      "name": "KSM",
                      "index": 65
                    },
                    {
                      "name": "ROC",
                      "index": 66
                    },
                    {
                      "name": "ACA",
                      "index": 128
                    },
                    {
                      "name": "BNC",
                      "index": 129
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "fee",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transferred `MultiAsset` with fee."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Deposit success."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Foreign Asset",
                        "Some assets were transferred. \\[asset_id, owner, target, amount\\]"
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were burned. \\[asset_id, owner, amount\\]"
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were minted. \\[asset_id, owner, amount\\]"
                      ]
                    },
                    {
                      "name": "PairCreated",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Swap",
                        "Create a trading pair. \\[asset_0, asset_1\\]"
                      ]
                    },
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,",
                        "mint_balance_lp\\]"
                      ]
                    },
                    {
                      "name": "LiquidityRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,",
                        "burn_balance_lp\\]"
                      ]
                    },
                    {
                      "name": "AssetSwap",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 137,
                          "typeName": "Vec<T::AssetId>"
                        },
                        {
                          "type": 138,
                          "typeName": "Vec<AssetBalance>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Transact in trading \\[owner, recipient, swap_path, balances\\]"
                      ]
                    },
                    {
                      "name": "TransferredToParachain",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 73,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Transfer by xcm",
                        "Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"
                      ]
                    },
                    {
                      "name": "BootstrapContribute",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"
                      ]
                    },
                    {
                      "name": "BootstrapEnd",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,",
                        "total_lp_supply]"
                      ]
                    },
                    {
                      "name": "BootstrapCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,",
                        "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\\]"
                      ]
                    },
                    {
                      "name": "BootstrapClaim",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,",
                        "asset_0_refund, asset_1_refund, lp_amount\\]"
                      ]
                    },
                    {
                      "name": "BootstrapUpdate",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Update a bootstrap pair. \\[caller, asset_0, asset_1,",
                        "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\\]"
                      ]
                    },
                    {
                      "name": "BootstrapRefund",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,",
                        "asset_0_refund, asset_1_refund\\]"
                      ]
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 139,
                          "typeName": "Vec<(T::AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Bootstrap distribute some rewards to contributors."
                      ]
                    },
                    {
                      "name": "ChargeReward",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 139,
                          "typeName": "Vec<(T::AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Charge reward into a bootstrap."
                      ]
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Withdraw all reward from a bootstrap."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "AssetId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "asset_type",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "asset_index",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "def": {
                "sequence": {
                  "type": 136
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "def": {
                "sequence": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "def": {
                "sequence": {
                  "type": 140
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "def": {
                "tuple": [
                  136,
                  6
                ]
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "peaq_pallet_did",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AttributeAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 143,
                          "typeName": "Option<T::BlockNumber>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when an attribute has been added. [who, did_account, name, value, validity]"
                      ]
                    },
                    {
                      "name": "AttributeRead",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "Attribute<T::BlockNumber,<<T as Config>::Time as MomentTime>::\nMoment>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event emitted when an attribute is read successfully"
                      ]
                    },
                    {
                      "name": "AttributeUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 143,
                          "typeName": "Option<T::BlockNumber>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event emitted when an attribute has been updated. [who, did_account, name, validity]"
                      ]
                    },
                    {
                      "name": "AttributeRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Event emitted when an attribute has been deleted. [who, did_acount name]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "peaq_pallet_did",
                "structs",
                "Attribute"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Moment",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "value",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "validity",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "created",
                      "type": 11,
                      "typeName": "Moment"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "peaq_pallet_transaction",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ServiceRequested",
                      "fields": [
                        {
                          "name": "consumer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "token_deposited",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The consumer asks for the service",
                        "parameters. [consumer, provider, token_deposited]"
                      ]
                    },
                    {
                      "name": "ServiceDelivered",
                      "fields": [
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "consumer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "refund_info",
                          "type": 146,
                          "typeName": "DeliveredInfo<BalanceOf<T>, T::Hash, T::BlockNumber>"
                        },
                        {
                          "name": "spent_info",
                          "type": 146,
                          "typeName": "DeliveredInfo<BalanceOf<T>, T::Hash, T::BlockNumber>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The consumer asks for the service",
                        "parameters. [provider, consumer, tx hash, token num, tx hash, time point, call_hash]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "peaq_pallet_transaction",
                "structs",
                "DeliveredInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "token_num",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "tx_hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "time_point",
                      "type": 147,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "CallHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "peaq_pallet_transaction",
                "structs",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 149,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 149,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "name": "result",
                          "type": 34,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 149,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RoleAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when a role has been added. [who, roleId, roleName]"
                      ]
                    },
                    {
                      "name": "RoleUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event emitted when a role has been updated. [who, roleId, roleName]"
                      ]
                    },
                    {
                      "name": "RoleRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event emitted when a role has been added. [who, roleId]"
                      ]
                    },
                    {
                      "name": "RoleFetched",
                      "fields": [
                        {
                          "type": 151,
                          "typeName": "Entity<T::EntityId>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AllRolesFetched",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "Vec<Entity<T::EntityId>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "RoleAssignedToUser",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Event emitted when a role has been assigned to user. [who, roleId, userId]"
                      ]
                    },
                    {
                      "name": "RoleUnassignedToUser",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Event emitted when a role has been unassigned to user. [who, roleId, userId]"
                      ]
                    },
                    {
                      "name": "RoleAssignedToGroup",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Event emitted when a role has been assigned to group. [who, roleId, groupId]"
                      ]
                    },
                    {
                      "name": "RoleUnassignedToGroup",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Event emitted when a role has been unassigned from group. [who, roleId, groupId]"
                      ]
                    },
                    {
                      "name": "FetchedGroupRoles",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "Vec<Role2Group<T::EntityId>>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "FetchedUserRoles",
                      "fields": [
                        {
                          "type": 155,
                          "typeName": "Vec<Role2User<T::EntityId>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "FetchedUserGroups",
                      "fields": [
                        {
                          "type": 157,
                          "typeName": "Vec<User2Group<T::EntityId>>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "FetchedUserPermissions",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "Vec<Entity<T::EntityId>>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "FetchedGroupPermissions",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "Vec<Entity<T::EntityId>>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "PermissionAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Event emitted when a permission has been added. [who, permissionId, permissionName]"
                      ]
                    },
                    {
                      "name": "PermissionUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Event emitted when a permission has been updated. [who, permissionId, permissionName]"
                      ]
                    },
                    {
                      "name": "PermissionDisabled",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Event emitted when a permission has been disabled. [who, permissionId]"
                      ]
                    },
                    {
                      "name": "PermissionAssigned",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Event emitted when a permission has been assigned to role. [who, permissionId, roleId]"
                      ]
                    },
                    {
                      "name": "PermissionUnassignedToRole",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Event emitted when a permission has been unassigned to role. [who, permissionId, roleId]"
                      ]
                    },
                    {
                      "name": "FetchedRolePermissions",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "Vec<Permission2Role<T::EntityId>>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "PermissionFetched",
                      "fields": [
                        {
                          "type": 151,
                          "typeName": "Entity<T::EntityId>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "AllPermissionsFetched",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "Vec<Entity<T::EntityId>>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "GroupFetched",
                      "fields": [
                        {
                          "type": 151,
                          "typeName": "Entity<T::EntityId>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "AllGroupsFetched",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "Vec<Entity<T::EntityId>>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "GroupAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Event emitted when a group has been added. [who, groupId, roleName]"
                      ]
                    },
                    {
                      "name": "GroupUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Event emitted when a group has been updated. [who, groupId, roleName]"
                      ]
                    },
                    {
                      "name": "GroupDisabled",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Event emitted when a group has been disabled. [who, groupId]"
                      ]
                    },
                    {
                      "name": "UserAssignedToGroup",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Event emitted when a user to group relationship has been added. [who, userId, groupId]"
                      ]
                    },
                    {
                      "name": "UserUnAssignedToGroup",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Event emitted when a user to group relationship has been removed. [who, userId, groupId]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "structs",
                "Entity"
              ],
              "params": [
                {
                  "name": "EntityId",
                  "type": 1
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "EntityId"
                    },
                    {
                      "name": "name",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "enabled",
                      "type": 43,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "def": {
                "sequence": {
                  "type": 151
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "def": {
                "sequence": {
                  "type": 154
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "structs",
                "Role2Group"
              ],
              "params": [
                {
                  "name": "EntityId",
                  "type": 1
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "role",
                      "type": 1,
                      "typeName": "EntityId"
                    },
                    {
                      "name": "group",
                      "type": 1,
                      "typeName": "EntityId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "sequence": {
                  "type": 156
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "structs",
                "Role2User"
              ],
              "params": [
                {
                  "name": "EntityId",
                  "type": 1
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "role",
                      "type": 1,
                      "typeName": "EntityId"
                    },
                    {
                      "name": "user",
                      "type": 1,
                      "typeName": "EntityId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "def": {
                "sequence": {
                  "type": 158
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "structs",
                "User2Group"
              ],
              "params": [
                {
                  "name": "EntityId",
                  "type": 1
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "user",
                      "type": 1,
                      "typeName": "EntityId"
                    },
                    {
                      "name": "group",
                      "type": 1,
                      "typeName": "EntityId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "def": {
                "sequence": {
                  "type": 160
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "structs",
                "Permission2Role"
              ],
              "params": [
                {
                  "name": "EntityId",
                  "type": 1
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "permission",
                      "type": 1,
                      "typeName": "EntityId"
                    },
                    {
                      "name": "role",
                      "type": 1,
                      "typeName": "EntityId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "peaq_pallet_storage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ItemAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when an storage item has been added. [who, item_type, item]"
                      ]
                    },
                    {
                      "name": "ItemRead",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event emitted when an item is read successfully"
                      ]
                    },
                    {
                      "name": "ItemUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event emitted when an item has been updated. [who, item_type, item]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "peaq_pallet_mor",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MintedTokens",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Machine has been rewarded by minting tokens."
                      ]
                    },
                    {
                      "name": "MorConfigChanged",
                      "fields": [
                        {
                          "type": 163,
                          "typeName": "MorConfig<BalanceOf<T>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The pallet's configuration has been updated."
                      ]
                    },
                    {
                      "name": "FetchedMorConfig",
                      "fields": [
                        {
                          "type": 163,
                          "typeName": "MorConfig<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Fetches the pallet's configuration."
                      ]
                    },
                    {
                      "name": "FetchedPotBalance",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Temporary for development. Fetched balance of MOR pot."
                      ]
                    },
                    {
                      "name": "FetchedCurrentRewarding",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Temporary for development. Fetched current amount of rewarding."
                      ]
                    },
                    {
                      "name": "MachineUsagePayed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Sent when machine usage has been payed."
                      ]
                    },
                    {
                      "name": "OnlineRewardsPayed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Sent when the online rewards have been transfered."
                      ]
                    },
                    {
                      "name": "RegistrationRewardPayed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Sent when a registration rewards have been transfered."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Possible Event types of this pallet."
              ]
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "peaq_pallet_mor",
                "types",
                "MorConfig"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "registration_reward",
                      "type": 82,
                      "typeName": "Balance"
                    },
                    {
                      "name": "machine_usage_fee_min",
                      "type": 82,
                      "typeName": "Balance"
                    },
                    {
                      "name": "machine_usage_fee_max",
                      "type": 82,
                      "typeName": "Balance"
                    },
                    {
                      "name": "track_n_block_rewards",
                      "type": 164,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "def": {
                "compact": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "def": {
                "sequence": {
                  "type": 167
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 79,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 52,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "- `O(1)`"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`."
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 170,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 172,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 13,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 170,
            "type": {
              "def": {
                "sequence": {
                  "type": 171
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "def": {
                "tuple": [
                  13,
                  13
                ]
              }
            }
          },
          {
            "id": 172,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 174,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 175
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 175,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 175,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 175,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 176,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 176,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 176,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 178,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 52,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 52,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 181,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 182
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 182
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "def": {
                "sequence": {
                  "type": 183
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "def": {
                "tuple": [
                  94,
                  4
                ]
              }
            }
          },
          {
            "id": 184,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 57,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 10,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 189
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 191,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 94,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 190,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "def": {
                "sequence": {
                  "type": 189
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 193
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 194,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 94
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 94,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "def": {
                "sequence": {
                  "type": 193
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 196
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 197,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 35
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 35,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "def": {
                "sequence": {
                  "type": 196
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "set_balance_deprecated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 82,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "old_reserved",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the regular balance of a given account; it also takes a reserved balance but this",
                        "must be the same as the account's current reserved balance.",
                        "",
                        "The dispatch origin for this call is `root`.",
                        "",
                        "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibililty of churn)."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                        "",
                        "WARNING: DEPRECATED! Will be released in approximately 3 months."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 82,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `MaxHolds`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "peaq_dev_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 187,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 198,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Contracts",
                      "fields": [
                        {
                          "type": 206,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 218,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 219,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 220,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "type": 230,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DynamicFee",
                      "fields": [
                        {
                          "type": 234,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicFee, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 236,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "BlockReward",
                      "fields": [
                        {
                          "type": 254,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BlockReward, Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "StakingCoefficientRewardCalculator",
                      "fields": [
                        {
                          "type": 255,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakingCoefficientRewardCalculator, Runtime>"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 256,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 257,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 278,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 279,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 281,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "ZenlinkProtocol",
                      "fields": [
                        {
                          "type": 285,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ZenlinkProtocol, Runtime>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 287,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "PeaqDid",
                      "fields": [
                        {
                          "type": 289,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PeaqDid, Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Transaction",
                      "fields": [
                        {
                          "type": 290,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Transaction, Runtime>"
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 291,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "PeaqRbac",
                      "fields": [
                        {
                          "type": 293,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PeaqRbac, Runtime>"
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "PeaqStorage",
                      "fields": [
                        {
                          "type": 294,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PeaqStorage, Runtime>"
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "PeaqMor",
                      "fields": [
                        {
                          "type": 295,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PeaqMor, Runtime>"
                        }
                      ],
                      "index": 105
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "call_old_weight",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "OldWeight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
                      ]
                    },
                    {
                      "name": "instantiate_with_code_old_weight",
                      "fields": [
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "OldWeight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
                      ]
                    },
                    {
                      "name": "instantiate_old_weight",
                      "fields": [
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 10,
                          "typeName": "OldWeight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "CodeHash<T>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
                      ]
                    },
                    {
                      "name": "upload_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "determinism",
                          "type": 208,
                          "typeName": "Determinism"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Upload new `code` without instantiating a contract from it.",
                        "",
                        "If the code does not already exist a deposit is reserved from the caller",
                        "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
                        "depends on the instrumented size of the the supplied `code`.",
                        "",
                        "If the code already exists in storage it will still return `Ok` and upgrades",
                        "the in storage version to the current",
                        "[`InstructionWeights::version`](InstructionWeights).",
                        "",
                        "- `determinism`: If this is set to any other value but [`Determinism::Enforced`] then",
                        "  the only way to use this code is to delegate call into it from an offchain execution.",
                        "  Set to [`Determinism::Enforced`] if in doubt.",
                        "",
                        "# Note",
                        "",
                        "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
                        "To avoid this situation a constructor could employ access control so that it can",
                        "only be instantiated by permissioned entities. The same is true when uploading",
                        "through [`Self::instantiate_with_code`]."
                      ]
                    },
                    {
                      "name": "remove_code",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "CodeHash<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove the code stored under `code_hash` and refund the deposit to its owner.",
                        "",
                        "A code can only be removed by its original uploader (its owner) and only if it is",
                        "not used by any contract."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "CodeHash<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Privileged function that changes the code of an existing contract.",
                        "",
                        "This takes care of updating refcounts and all other necessary operations. Returns",
                        "an error if either the `code_hash` or `dest` do not exist.",
                        "",
                        "# Note",
                        "",
                        "This does **not** change the address of the contract in question. This means",
                        "that the contract address is no longer derived from its code hash after calling",
                        "this dispatchable."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Makes a call to an account, optionally transferring some balance.",
                        "",
                        "# Parameters",
                        "",
                        "* `dest`: Address of the contract to call.",
                        "* `value`: The balance to transfer from the `origin` to `dest`.",
                        "* `gas_limit`: The gas limit enforced when executing the constructor.",
                        "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
                        "  caller to pay for the storage consumed.",
                        "* `data`: The input data to pass to the contract.",
                        "",
                        "* If the account is a smart-contract account, the associated code will be",
                        "executed and any value will be transferred.",
                        "* If the account is a regular account, any value will be transferred.",
                        "* If no account exists and the call value is not less than `existential_deposit`,",
                        "a regular account will be created and any value will be transferred."
                      ]
                    },
                    {
                      "name": "instantiate_with_code",
                      "fields": [
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Instantiates a new contract from the supplied `code` optionally transferring",
                        "some balance.",
                        "",
                        "This dispatchable has the same effect as calling [`Self::upload_code`] +",
                        "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
                        "also check the documentation of [`Self::upload_code`].",
                        "",
                        "# Parameters",
                        "",
                        "* `value`: The balance to transfer from the `origin` to the newly created contract.",
                        "* `gas_limit`: The gas limit enforced when executing the constructor.",
                        "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
                        "  from the caller to pay for the storage consumed.",
                        "* `code`: The contract code to deploy in raw bytes.",
                        "* `data`: The input data to pass to the contract constructor.",
                        "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
                        "",
                        "Instantiation is executed as follows:",
                        "",
                        "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
                        "  code.",
                        "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
                        "- The destination address is computed based on the sender, code_hash and the salt.",
                        "- The smart-contract account is created at the computed address.",
                        "- The `value` is transferred to the new account.",
                        "- The `deploy` function is executed in the context of the newly-created account."
                      ]
                    },
                    {
                      "name": "instantiate",
                      "fields": [
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gas_limit",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "storage_deposit_limit",
                          "type": 207,
                          "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                        },
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "CodeHash<T>"
                        },
                        {
                          "name": "data",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Instantiates a contract from a previously deployed wasm binary.",
                        "",
                        "This function is identical to [`Self::instantiate_with_code`] but without the",
                        "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
                        "must be supplied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 82
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 82
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "pallet_contracts",
                "wasm",
                "Determinism"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Enforced",
                      "index": 0
                    },
                    {
                      "name": "Relaxed",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 210,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched.",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 184,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 210,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 211,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 210,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "sequence": {
                  "type": 205
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "peaq_dev_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 212,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 213,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "type": 214,
                          "typeName": "pallet_ethereum::Origin"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 215,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 216,
                          "typeName": "cumulus_pallet_xcm::Origin"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 217,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "index": 0
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 82,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "## Complexity",
                        "- O(1)"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 79,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "## Complexity",
                        "- O(1)"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 79,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "## Complexity",
                        " - O(1)."
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 82,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 79,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "## Complexity",
                        "- O(A) where `A` is the number of approvals",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 36,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "The dispatch of this call must be `SetMembersOrigin`.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "## Complexity:",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 205,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "## Complexity:",
                        "- `O(B + M + P)` where:",
                        "- `B` is `proposal` size in bytes (length-fee-bounded)",
                        "- `M` members-count (code-bounded)",
                        "- `P` complexity of dispatching `proposal`"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 79,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 205,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "## Complexity",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 79,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "## Complexity",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "## Complexity",
                        "O(P) where P is the number of max proposals"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 79,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "## Complexity",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 221,
                          "typeName": "Transaction"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "type": 222,
                          "typeName": "LegacyTransaction"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "type": 226,
                          "typeName": "EIP2930Transaction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "type": 229,
                          "typeName": "EIP1559Transaction"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_price",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 223,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "signature",
                      "type": 224,
                      "typeName": "TransactionSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "H160"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Create",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 225,
                      "typeName": "TransactionRecoveryId"
                    },
                    {
                      "name": "r",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 12,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_price",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 223,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "access_list",
                      "type": 227,
                      "typeName": "AccessList"
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 43,
                      "typeName": "bool"
                    },
                    {
                      "name": "r",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 12,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "def": {
                "sequence": {
                  "type": 228
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 45,
                      "typeName": "Address"
                    },
                    {
                      "name": "storage_keys",
                      "type": 57,
                      "typeName": "Vec<H256>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "nonce",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "action",
                      "type": 223,
                      "typeName": "TransactionAction"
                    },
                    {
                      "name": "value",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "input",
                      "type": 13,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "access_list",
                      "type": 227,
                      "typeName": "AccessList"
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 43,
                      "typeName": "bool"
                    },
                    {
                      "name": "r",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "s",
                      "type": 12,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "target",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "input",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 232,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "init",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 232,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 45,
                          "typeName": "H160"
                        },
                        {
                          "name": "init",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "salt",
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "name": "value",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "gas_limit",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 59,
                          "typeName": "U256"
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "nonce",
                          "type": 231,
                          "typeName": "Option<U256>"
                        },
                        {
                          "name": "access_list",
                          "type": 232,
                          "typeName": "Vec<(H160, Vec<H256>)>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 59
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 59
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "def": {
                "sequence": {
                  "type": 233
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "def": {
                "tuple": [
                  45,
                  57
                ]
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_dynamic_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_min_gas_price_target",
                      "fields": [
                        {
                          "name": "target",
                          "type": 59,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 59,
                          "typeName": "U256"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 61,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 237,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "## Complexity",
                        "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                        "  fixed."
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "## Complexity",
                        "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "peaq_dev_runtime",
                "opaque",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 238,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 239,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "force_new_round",
                      "index": 0,
                      "docs": [
                        "Forces the start of the new round in the next block.",
                        "",
                        "The new round will be enforced via <T as",
                        "ShouldEndSession<_>>::should_end_session.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account]",
                        "- Writes: ForceNewRound",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_selected_candidates",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the maximum number of collator candidates that can be selected",
                        "at the beginning of each validation round.",
                        "",
                        "Changes are not applied until the start of the next round.",
                        "",
                        "The new value must be higher than the minimum allowed as set in the",
                        "pallet's configuration.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `MaxSelectedCandidatesSet`.",
                        "",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the `SelectedCandidates`",
                        "  storage in `select_top_candidates` which in return depends on the number of",
                        "  `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators of a",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: MaxSelectedCandidates, TopCandidates, N * CandidatePool",
                        "- Writes: MaxSelectedCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_blocks_per_round",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the number of blocks each validation round lasts.",
                        "",
                        "If the new value is less than the length of the current round, the",
                        "system will immediately move to the next round in the next block.",
                        "",
                        "The new value must be higher than the minimum allowed as set in the",
                        "pallet's configuration.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `BlocksPerRoundSet`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], Round",
                        "- Writes: Round",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_candidate_stake",
                      "fields": [
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the maximal amount a collator can stake. Existing stakes are not",
                        "changed.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `MaxCandidateStakeChanged`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], MaxCollatorCandidateStake",
                        "- Writes: Round",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_remove_candidate",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Forcedly removes a collator candidate from the TopCandidates and",
                        "clears all associated storage for the candidate and their",
                        "delegators.",
                        "",
                        "Prepares unstaking of the candidates and their delegators stake",
                        "which can be unlocked via `unlock_unstaked` after waiting at",
                        "least `StakeDuration` many blocks.",
                        "",
                        "Emits `CandidateRemoved`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the `SelectedCandidates`",
                        "  storage in `select_top_candidates` which in return depends on the number of",
                        "  `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators of the",
                        "collator candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: MaxCollatorCandidateStake, 2 * N * CandidatePool, TopCandidates, BlockNumber, D",
                        "  * DelegatorState, D * Unstaking",
                        "- Writes: MaxCollatorCandidateStake, N * CandidatePool, D * DelegatorState, (D + 1) *",
                        "  Unstaking",
                        "- Kills: CandidatePool, DelegatorState for all delegators which only delegated to the",
                        "  candidate",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "join_candidates",
                      "fields": [
                        {
                          "name": "stake",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Join the set of collator candidates.",
                        "",
                        "In the next blocks, if the collator candidate has enough funds",
                        "staked to be included in any of the top `MaxSelectedCandidates`",
                        "positions, it will be included in the set of potential authors that",
                        "will be selected by the stake-weighted random selection function.",
                        "",
                        "The staked funds of the new collator candidate are added to the",
                        "total stake of the system.",
                        "",
                        "The total amount of funds staked must be within the allowed range as",
                        "set in the pallet's configuration.",
                        "",
                        "The dispatch origin must not be already part of the collator",
                        "candidates nor of the delegators set.",
                        "",
                        "Emits `JoinedCollatorCandidates`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState, MaxCollatorCandidateStake, Locks,",
                        "  TotalCollatorStake, TopCandidates, MaxSelectedCandidates, CandidatePool,",
                        "- Writes: Locks, TotalCollatorStake, CandidatePool, TopCandidates,",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "init_leave_candidates",
                      "index": 7,
                      "docs": [
                        "Request to leave the set of collator candidates.",
                        "",
                        "On success, the account is immediately removed from the candidate",
                        "pool to prevent selection as a collator in future validation rounds,",
                        "but unstaking of the funds is executed with a delay of",
                        "`StakeDuration` blocks.",
                        "",
                        "The exit request can be reversed by calling",
                        "`cancel_leave_candidates`.",
                        "",
                        "This operation affects the pallet's total stake amount. It is",
                        "updated even though the funds of the candidate who signaled to leave",
                        "are still locked for `ExitDelay` + `StakeDuration` more blocks.",
                        "",
                        "NOTE: Upon starting a new session_i in `new_session`, the current",
                        "top candidates are selected to be block authors for session_i+1. Any",
                        "changes to the top candidates afterwards do not effect the set of",
                        "authors for session_i+1.",
                        "Thus, we have to make sure none of these collators can",
                        "leave before session_i+1 ends by delaying their",
                        "exit for `ExitDelay` many blocks.",
                        "",
                        "Emits `CollatorScheduledExit`.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is mainly dependent on updating the `SelectedCandidates`",
                        "  storage in `select_top_candidates` which in return depends on the number of",
                        "  `MaxSelectedCandidates` (N).",
                        "- For each N, we read `CandidatePool` from the storage.",
                        "---------",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], TopCandidates, (N + 1) * CandidatePool, TotalCollatorStake",
                        "- Writes: CandidatePool, TopCandidates, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute_leave_candidates",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Execute the network exit of a candidate who requested to leave at",
                        "least `ExitQueueDelay` rounds ago. Prepares unstaking of the",
                        "candidates and their delegators stake which can be unlocked via",
                        "`unlock_unstaked` after waiting at least `StakeDuration` many",
                        "blocks.",
                        "",
                        "Requires the candidate to previously have called",
                        "`init_leave_candidates`.",
                        "",
                        "The exit request can be reversed by calling",
                        "`cancel_leave_candidates`.",
                        "",
                        "Emits `CollatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D + U) where  where N is `MaxSelectedCandidates`",
                        "bounded by `MaxTopCandidates`, D is the number of delegators for",
                        "this candidate bounded by `MaxDelegatorsPerCollator` and U is the",
                        "number of locked unstaking requests bounded by `MaxUnstakeRequests`.",
                        "- Reads: CandidatePool, Round, D * DelegatorState, D",
                        "  * BlockNumber, D * Unstaking",
                        "- Writes: D * Unstaking, D * DelegatorState, Total",
                        "- Kills: CandidatePool, DelegatorState",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_leave_candidates",
                      "index": 9,
                      "docs": [
                        "Revert the previously requested exit of the network of a collator",
                        "candidate. On success, adds back the candidate to the TopCandidates",
                        "and updates the collators.",
                        "",
                        "Requires the candidate to previously have called",
                        "`init_leave_candidates`.",
                        "",
                        "Emits `CollatorCanceledExit`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], TotalCollatorStake, TopCandidates, CandidatePool",
                        "- Writes: TotalCollatorStake, CandidatePool, TopCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "candidate_stake_more",
                      "fields": [
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Stake more funds for a collator candidate.",
                        "",
                        "If not in the set of candidates, staking enough funds allows the",
                        "account to be added to it. The larger amount of funds, the higher",
                        "chances to be selected as the author of the next block.",
                        "",
                        "This operation affects the pallet's total stake amount.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `CollatorStakedMore`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D + U) where  where N is `MaxSelectedCandidates`",
                        "bounded by `MaxTopCandidates`, D is the number of delegators for",
                        "this candidate bounded by `MaxDelegatorsPerCollator` and U is the",
                        "number of locked unstaking requests bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], Locks, TotalCollatorStake, MaxCollatorCandidateStake,",
                        "  TopCandidates, CandidatePool",
                        "- Writes: Locks, TotalCollatorStake, CandidatePool, TopCandidates",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "candidate_stake_less",
                      "fields": [
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Stake less funds for a collator candidate.",
                        "",
                        "If the new amount of staked fund is not large enough, the account",
                        "could be removed from the set of collator candidates and not be",
                        "considered for authoring the next blocks.",
                        "",
                        "This operation affects the pallet's total stake amount.",
                        "",
                        "The unstaked funds are not released immediately to the account, but",
                        "they will be available after `StakeDuration` blocks.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `CollatorStakedLess`.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], Unstaking, TopCandidates, MaxSelectedCandidates,",
                        "  CandidatePool",
                        "- Writes: Unstaking, CandidatePool, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "join_delegators",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Join the set of delegators by delegating to a collator candidate.",
                        "",
                        "The account that wants to delegate cannot be part of the collator",
                        "candidates set as well.",
                        "",
                        "The caller must _not_ have delegated before. Otherwise,",
                        "`delegate_another_candidate` should be called.",
                        "",
                        "The amount staked must be larger than the minimum required to become",
                        "a delegator as set in the pallet's configuration.",
                        "",
                        "As only `MaxDelegatorsPerCollator` are allowed to delegate a given",
                        "collator, the amount staked must be larger than the lowest one in",
                        "the current set of delegator for the operation to be meaningful.",
                        "",
                        "The collator's total stake as well as the pallet's total stake are",
                        "increased accordingly.",
                        "",
                        "Emits `Delegation`.",
                        "Emits `DelegationReplaced` if the candidate has",
                        "`MaxDelegatorsPerCollator` many delegations but this delegator",
                        "staked more than one of the other delegators of this candidate.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState, TopCandidates, MaxSelectedCandidates,",
                        "  CandidatePool, LastDelegation, Round",
                        "- Writes: Locks, CandidatePool, DelegatorState, TotalCollatorStake, LastDelegation",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegate_another_candidate",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Delegate another collator's candidate by staking some funds and",
                        "increasing the pallet's as well as the collator's total stake.",
                        "",
                        "The account that wants to delegate cannot be part of the collator",
                        "candidates set as well.",
                        "",
                        "The caller _must_ have delegated before. Otherwise,",
                        "`join_delegators` should be called.",
                        "",
                        "If the delegator has already delegated the maximum number of",
                        "collator candidates, this operation will fail.",
                        "",
                        "The amount staked must be larger than the minimum required to become",
                        "a delegator as set in the pallet's configuration.",
                        "",
                        "As only `MaxDelegatorsPerCollator` are allowed to delegate a given",
                        "collator, the amount staked must be larger than the lowest one in",
                        "the current set of delegator for the operation to be meaningful.",
                        "",
                        "The collator's total stake as well as the pallet's total stake are",
                        "increased accordingly.",
                        "",
                        "NOTE: This transaction is expected to throw until we increase",
                        "`MaxCollatorsPerDelegator` by at least one, since it is currently",
                        "set to one.",
                        "",
                        "Emits `Delegation`.",
                        "Emits `DelegationReplaced` if the candidate has",
                        "`MaxDelegatorsPerCollator` many delegations but this delegator",
                        "staked more than one of the other delegators of this candidate.",
                        "",
                        "# <weight>",
                        "Weight: O(N + D) where N is `MaxSelectedCandidates` bounded by",
                        "`MaxTopCandidates` and D is the number of delegators for this",
                        "candidate bounded by `MaxDelegatorsPerCollator`.",
                        "- Reads: [Origin Account], DelegatorState, TopCandidates, MaxSelectedCandidates,",
                        "  CandidatePool, LastDelegation, Round",
                        "- Writes: Locks, CandidatePool, DelegatorState, TotalCollatorStake, LastDelegation",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "leave_delegators",
                      "index": 14,
                      "docs": [
                        "Leave the set of delegators and, by implication, revoke all ongoing",
                        "delegations.",
                        "",
                        "All staked funds are not unlocked immediately, but they are added to",
                        "the queue of pending unstaking, and will effectively be released",
                        "after `StakeDuration` blocks from the moment the delegator leaves.",
                        "",
                        "This operation reduces the total stake of the pallet as well as the",
                        "stakes of all collators that were delegated, potentially affecting",
                        "their chances to be included in the set of candidates in the next",
                        "rounds.",
                        "",
                        "Emits `DelegatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of delegations for this delegator",
                        "which is bounded by by `MaxCollatorsPerDelegator`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking, TopCandidates,",
                        "  MaxSelectedCandidates, C * CandidatePool,",
                        "- Writes: Unstaking, CandidatePool, TotalCollatorStake,",
                        "- Kills: DelegatorState",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "revoke_delegation",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Terminates an ongoing delegation for a given collator candidate.",
                        "",
                        "The staked funds are not unlocked immediately, but they are added to",
                        "the queue of pending unstaking, and will effectively be released",
                        "after `StakeDuration` blocks from the moment the delegation is",
                        "terminated.",
                        "",
                        "This operation reduces the total stake of the pallet as well as the",
                        "stakes of the collator involved, potentially affecting its chances",
                        "to be included in the set of candidates in the next rounds.",
                        "",
                        "Emits `DelegatorLeft`.",
                        "",
                        "# <weight>",
                        "Weight: O(C) where C is the number of delegations for this delegator",
                        "which is bounded by by `MaxCollatorsPerDelegator`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking, Locks, TopCandidates,",
                        "  CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, Locks, DelegatorState, CandidatePool, TotalCollatorStake",
                        "- Kills: DelegatorState if the delegator has not delegated to another collator",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegator_stake_more",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Increase the stake for delegating a collator candidate.",
                        "",
                        "If not in the set of candidates, staking enough funds allows the",
                        "collator candidate to be added to it.",
                        "",
                        "Emits `DelegatorStakedMore`.",
                        "",
                        "# <weight>",
                        "Weight: O(N) + O(D) where N is `MaxSelectedCandidates` bounded",
                        "by `MaxTopCandidates` and D the number of total delegators for",
                        "this collator bounded by `MaxCollatorsPerDelegator`.",
                        "bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking, Locks, TopCandidates,",
                        "  CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, Locks, DelegatorState, CandidatePool, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "delegator_stake_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Reduce the stake for delegating a collator candidate.",
                        "",
                        "If the new amount of staked fund is not large enough, the collator",
                        "could be removed from the set of collator candidates and not be",
                        "considered for authoring the next blocks.",
                        "",
                        "The unstaked funds are not release immediately to the account, but",
                        "they will be available after `StakeDuration` blocks.",
                        "",
                        "The remaining staked funds must still be larger than the minimum",
                        "required by this pallet to maintain the status of delegator.",
                        "",
                        "The resulting total amount of funds staked must be within the",
                        "allowed range as set in the pallet's configuration.",
                        "",
                        "Emits `DelegatorStakedLess`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account], DelegatorState, BlockNumber, Unstaking, TopCandidates,",
                        "  CandidatePool, MaxSelectedCandidates",
                        "- Writes: Unstaking, DelegatorState, CandidatePool, TotalCollatorStake",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unlock_unstaked",
                      "fields": [
                        {
                          "name": "target",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Unlock all previously staked funds that are now available for",
                        "unlocking by the origin account after `StakeDuration` blocks have",
                        "elapsed.",
                        "",
                        "Weight: O(U) where U is the number of locked unstaking requests",
                        "bounded by `MaxUnstakeRequests`.",
                        "- Reads: [Origin Account], Unstaking, Locks",
                        "- Writes: Unstaking, Locks",
                        "- Kills: Unstaking & Locks if no balance is locked anymore",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 242,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 13,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
                        "version and name should be verified on upgrade. Since the authorization only has a hash,",
                        "it cannot actually perform the verification.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Note that this function will not apply the new `code`, but only attempt to schedule the",
                        "upgrade with the Relay Chain.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 243,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 245,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 247,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 249,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 12
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 244,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 12,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 246,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 172
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "def": {
                "sequence": {
                  "type": 248
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 13,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 73
                },
                {
                  "name": "V",
                  "type": 250
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 252
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "def": {
                "sequence": {
                  "type": 251
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 252,
            "type": {
              "def": {
                "sequence": {
                  "type": 253
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "def": {
                "tuple": [
                  73,
                  250
                ]
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "pallet_block_reward",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_configuration",
                      "fields": [
                        {
                          "name": "reward_distro_params",
                          "type": 67,
                          "typeName": "RewardDistributionConfig"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the reward distribution configuration parameters which will be used from next block",
                        "reward distribution.",
                        "",
                        "It is mandatory that all components of configuration sum up to one whole (**100%**),",
                        "otherwise an error `InvalidDistributionConfiguration` will be raised.",
                        "",
                        "- `reward_distro_params` - reward distribution params",
                        "",
                        "Emits `DistributionConfigurationChanged` with config embeded into event itself."
                      ]
                    },
                    {
                      "name": "set_block_issue_reward",
                      "fields": [
                        {
                          "name": "block_reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Sets the block issue reward parameters which will be used from next block reward",
                        "distribution.",
                        "",
                        "- `block_reward` - block reward param",
                        "",
                        "Emits `BlockIssueRewardChanged` with config embeded into event itself."
                      ]
                    },
                    {
                      "name": "set_max_currency_supply",
                      "fields": [
                        {
                          "name": "limit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Sets the maximum currency supply parameter which will be used from limit the block",
                        "reward.",
                        "",
                        "- `limit` - maximum currency supply limit param",
                        "",
                        "Emits `MaxCurrencySupplyChanged` with config embeded into event itself."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "staking_coefficient_reward",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_coefficient",
                      "fields": [
                        {
                          "name": "coefficient",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the coefficient for the reward calculation.",
                        "",
                        "The estimated average block time is twelve seconds.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "Emits `CoefficientSet`.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "- Reads: [Origin Account]",
                        "- Writes: u8",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Services a single overweight XCM.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight XCM to service",
                        "- `weight_limit`: The amount of weight that XCM execution may take.",
                        "",
                        "Errors:",
                        "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                        "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                        "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    },
                    {
                      "name": "suspend_xcm_execution",
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                        "suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                        "messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                        "message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    },
                    {
                      "name": "update_threshold_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Overwrites the amount of remaining weight under which we stop processing messages.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.threshold_weight`"
                      ]
                    },
                    {
                      "name": "update_weight_restrict_decay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Overwrites the speed to which the available weight approaches the maximum weight.",
                        "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
                      ]
                    },
                    {
                      "name": "update_xcmp_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Overwrite the maximum amount of weight any individual message may consume.",
                        "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 258,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 113,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 113,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 270,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 76,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 143,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 113,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 113,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "force_suspension",
                      "fields": [
                        {
                          "name": "suspended",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set or unset the global suspension state of the XCM executor.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `suspended`: `true` to suspend, `false` to resume."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 260,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "def": {
                "sequence": {
                  "type": 261
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 262,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 106,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 107,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 116,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 269,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 263,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 264
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 264
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "def": {
                "tuple": [
                  4,
                  265
                ]
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 267,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 117,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 268,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 275,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 272,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "def": {
                "sequence": {
                  "type": 273
                }
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 262,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 106,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 274,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 114,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 259,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 266,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 116,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 269,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 114,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 118,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 276,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "def": {
                "sequence": {
                  "type": 277
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 96,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 106,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 9,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 274,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 76,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 275,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 275,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 88,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 10,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 79,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 79,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 81,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 77,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 85,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 90,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 43,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 105,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 82,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 280,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 280,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 282,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 131,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 282,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "fee",
                          "type": 282,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 283,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 113,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 127,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight_limit",
                          "type": 112,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight_limit` is the weight for XCM execution on the dest",
                        "chain, and it would be charged from the transferred assets. If set",
                        "below requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "v2::MultiAsset"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "v3::MultiAsset"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "def": {
                "sequence": {
                  "type": 284
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "def": {
                "tuple": [
                  131,
                  6
                ]
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_fee_receiver",
                      "fields": [
                        {
                          "name": "send_to",
                          "type": 286,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the new receiver of the protocol fee.",
                        "",
                        "# Arguments",
                        "",
                        "- `send_to`:",
                        "(1) Some(receiver): it turn on the protocol fee and the new receiver account.",
                        "(2) None: it turn off the protocol fee."
                      ]
                    },
                    {
                      "name": "set_fee_point",
                      "fields": [
                        {
                          "name": "fee_point",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the protocol fee point.",
                        "",
                        "# Arguments",
                        "",
                        "- `fee_point`:",
                        "0 means that all exchange fees belong to the liquidity provider.",
                        "30 means that all exchange fees belong to the fee receiver."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 82,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Move some assets from one holder to another.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_id`: The foreign id.",
                        "- `target`: The receiver of the foreign.",
                        "- `amount`: The amount of the foreign to transfer."
                      ]
                    },
                    {
                      "name": "create_pair",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Create pair by two assets.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up Pair",
                        "- `asset_1`: Asset which make up Pair"
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount_0_desired",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_desired",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_0_min",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_min",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Provide liquidity to a pair.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up pair",
                        "- `asset_1`: Asset which make up pair",
                        "- `amount_0_desired`: Maximum amount of asset_0 added to the pair",
                        "- `amount_1_desired`: Maximum amount of asset_1 added to the pair",
                        "- `amount_0_min`: Minimum amount of asset_0 added to the pair",
                        "- `amount_1_min`: Minimum amount of asset_1 added to the pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "liquidity",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_0_min",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_min",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Extract liquidity.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up pair",
                        "- `asset_1`: Asset which make up pair",
                        "- `amount_asset_0_min`: Minimum amount of asset_0 to exact",
                        "- `amount_asset_1_min`: Minimum amount of asset_1 to exact",
                        "- `recipient`: Account that accepts withdrawal of assets",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "swap_exact_assets_for_assets",
                      "fields": [
                        {
                          "name": "amount_in",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_out_min",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "path",
                          "type": 137,
                          "typeName": "Vec<T::AssetId>"
                        },
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Sell amount of foreign by path.",
                        "",
                        "# Arguments",
                        "",
                        "- `amount_in`: Amount of the foreign will be sold",
                        "- `amount_out_min`: Minimum amount of target foreign",
                        "- `path`: path can convert to pairs.",
                        "- `recipient`: Account that receive the target foreign",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "swap_assets_for_exact_assets",
                      "fields": [
                        {
                          "name": "amount_out",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_in_max",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "path",
                          "type": 137,
                          "typeName": "Vec<T::AssetId>"
                        },
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Buy amount of foreign by path.",
                        "",
                        "# Arguments",
                        "",
                        "- `amount_out`: Amount of the foreign will be bought",
                        "- `amount_in_max`: Maximum amount of sold foreign",
                        "- `path`: path can convert to pairs.",
                        "- `recipient`: Account that receive the target foreign",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_create",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "target_supply_0",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "target_supply_1",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_0",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_1",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "end",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "rewards",
                          "type": 137,
                          "typeName": "Vec<T::AssetId>"
                        },
                        {
                          "name": "limits",
                          "type": 139,
                          "typeName": "Vec<(T::AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Create bootstrap pair",
                        "",
                        "The order of asset don't affect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `target_supply_0`: Target amount of asset_0 total contribute",
                        "- `target_supply_0`: Target amount of asset_1 total contribute",
                        "- `capacity_supply_0`: The max amount of asset_0 total contribute",
                        "- `capacity_supply_1`: The max amount of asset_1 total contribute",
                        "- `end`: The earliest ending block."
                      ]
                    },
                    {
                      "name": "bootstrap_contribute",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount_0_contribute",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_contribute",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Contribute some asset to a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `amount_0_contribute`: The amount of asset_0 contribute to this bootstrap pair",
                        "- `amount_1_contribute`: The amount of asset_1 contribute to this bootstrap pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_claim",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "deadline",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Claim lp asset from a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_end",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "End a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair"
                      ]
                    },
                    {
                      "name": "bootstrap_update",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "target_supply_0",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "target_supply_1",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_0",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_1",
                          "type": 82,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "end",
                          "type": 79,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "rewards",
                          "type": 137,
                          "typeName": "Vec<T::AssetId>"
                        },
                        {
                          "name": "limits",
                          "type": 139,
                          "typeName": "Vec<(T::AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "update a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `min_contribution_0`: The new min amount of asset_0 contribute",
                        "- `min_contribution_0`: The new min amount of asset_1 contribute",
                        "- `target_supply_0`: The new target amount of asset_0 total contribute",
                        "- `target_supply_0`: The new target amount of asset_1 total contribute",
                        "- `capacity_supply_0`: The new max amount of asset_0 total contribute",
                        "- `capacity_supply_1`: The new max amount of asset_1 total contribute",
                        "- `end`: The earliest ending block."
                      ]
                    },
                    {
                      "name": "bootstrap_refund",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Contributor refund from disable bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair"
                      ]
                    },
                    {
                      "name": "bootstrap_charge_reward",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "charge_rewards",
                          "type": 139,
                          "typeName": "Vec<(T::AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "bootstrap_withdraw_reward",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 136,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "recipient",
                          "type": 199,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 199
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 199
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 288,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "target",
                          "type": 199,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 288,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "peaq_pallet_did",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_attribute",
                      "fields": [
                        {
                          "name": "did_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "valid_for",
                          "type": 143,
                          "typeName": "Option<T::BlockNumber>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Creates a new attribute as part of a DID",
                        "with optional validity"
                      ]
                    },
                    {
                      "name": "update_attribute",
                      "fields": [
                        {
                          "name": "did_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "valid_for",
                          "type": 143,
                          "typeName": "Option<T::BlockNumber>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update an existing attribute of a DID",
                        "with optional validity"
                      ]
                    },
                    {
                      "name": "read_attribute",
                      "fields": [
                        {
                          "name": "did_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Read did attribute"
                      ]
                    },
                    {
                      "name": "remove_attribute",
                      "fields": [
                        {
                          "name": "did_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Delete an existing attribute of a DID"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "peaq_pallet_transaction",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_requested",
                      "fields": [
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "token_deposited",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "service_delivered",
                      "fields": [
                        {
                          "name": "consumer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "refund_info",
                          "type": 146,
                          "typeName": "DeliveredInfo<BalanceOf<T>, T::Hash, T::BlockNumber>"
                        },
                        {
                          "name": "spent_info",
                          "type": 146,
                          "typeName": "DeliveredInfo<BalanceOf<T>, T::Hash, T::BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "## Complexity",
                        "O(Z + C) where Z is the length of the call and C its execution weight."
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 184,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 292,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call",
                          "type": 205,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "## Complexity",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 184,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 292,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 184,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 200,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 149,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 149
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 149
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fetch_role",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "entity",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "fetch_roles",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "add_role",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "create role call"
                      ]
                    },
                    {
                      "name": "update_role",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "update role call"
                      ]
                    },
                    {
                      "name": "disable_role",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "fetch_user_roles",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "assign_role_to_user",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "assign a role to user call"
                      ]
                    },
                    {
                      "name": "unassign_role_to_user",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "unassign role to user relationship call"
                      ]
                    },
                    {
                      "name": "fetch_permission",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "fetch_permissions",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "add_permission",
                      "fields": [
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "create permission call"
                      ]
                    },
                    {
                      "name": "update_permission",
                      "fields": [
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "update permission call"
                      ]
                    },
                    {
                      "name": "disable_permission",
                      "fields": [
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "fetch_role_permissions",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "assign_permission_to_role",
                      "fields": [
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "assign a permission to role call"
                      ]
                    },
                    {
                      "name": "unassign_permission_to_role",
                      "fields": [
                        {
                          "name": "permission_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "unassign permission to role relationship call"
                      ]
                    },
                    {
                      "name": "fetch_group",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "fetch_groups",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "add_group",
                      "fields": [
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "create group call"
                      ]
                    },
                    {
                      "name": "update_group",
                      "fields": [
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "name",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "update group call"
                      ]
                    },
                    {
                      "name": "disable_group",
                      "fields": [
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "disable group call"
                      ]
                    },
                    {
                      "name": "assign_role_to_group",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "assign a role to group call"
                      ]
                    },
                    {
                      "name": "unassign_role_to_group",
                      "fields": [
                        {
                          "name": "role_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "unassign role to group relationship call"
                      ]
                    },
                    {
                      "name": "fetch_group_roles",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "assign_user_to_group",
                      "fields": [
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "assign a user to group call"
                      ]
                    },
                    {
                      "name": "unassign_user_to_group",
                      "fields": [
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "unassign a user to group call"
                      ]
                    },
                    {
                      "name": "fetch_user_groups",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "fetch_user_permissions",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "fetch_group_permissions",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "group_id",
                          "type": 1,
                          "typeName": "T::EntityId"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "peaq_pallet_storage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_item",
                      "fields": [
                        {
                          "name": "item_type",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "item",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a new item to the storage"
                      ]
                    },
                    {
                      "name": "update_item",
                      "fields": [
                        {
                          "name": "item_type",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "item",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update an existing item in the storage"
                      ]
                    },
                    {
                      "name": "get_item",
                      "fields": [
                        {
                          "name": "item_type",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Read storage item"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "peaq_pallet_mor",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "get_registration_reward",
                      "fields": [
                        {
                          "name": "machine",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Registers a new machine on the network by given account-ID and machine-ID. This",
                        "method will raise errors if the machine is already registered, or if the",
                        "authorization in Peaq-DID fails."
                      ]
                    },
                    {
                      "name": "get_online_rewards",
                      "fields": [
                        {
                          "name": "machine",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "In this early version one can collect rewards for a machine, which has been online",
                        "on the network for a defined time period, see MorConfig. This method will raise",
                        "errors if the authorization in Peaq-DID fails or if the machine is not registered",
                        "in Peaq-MOR."
                      ]
                    },
                    {
                      "name": "pay_machine_usage",
                      "fields": [
                        {
                          "name": "machine",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "When using a machine, this extrinsic is about to pay the fee for the machine usage.",
                        "Assumption is, that the origin is the user, which used the machine and he will pay",
                        "the fee for machine usage."
                      ]
                    },
                    {
                      "name": "set_configuration",
                      "fields": [
                        {
                          "name": "config",
                          "type": 163,
                          "typeName": "MorConfig<BalanceOf<T>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Updates the pallet's configuration parameters by passing a MorConfig-struct."
                      ]
                    },
                    {
                      "name": "fetch_pot_balance",
                      "index": 4,
                      "docs": [
                        "This is temporary for debug and development"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "pallet_contracts",
                "wasm",
                "PrefabWasmModule"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "instruction_weights_version",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "initial",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "maximum",
                      "type": 79,
                      "typeName": "u32"
                    },
                    {
                      "name": "code",
                      "type": 299,
                      "typeName": "RelaxedCodeVec<T>"
                    },
                    {
                      "name": "determinism",
                      "type": 208,
                      "typeName": "Determinism"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_contracts",
                "wasm",
                "OwnerInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountIdOf<T>"
                    },
                    {
                      "name": "deposit",
                      "type": 82,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "refcount",
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "pallet_contracts",
                "storage",
                "ContractInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_id",
                      "type": 302,
                      "typeName": "TrieId"
                    },
                    {
                      "name": "deposit_account",
                      "type": 303,
                      "typeName": "DepositAccount<T>"
                    },
                    {
                      "name": "code_hash",
                      "type": 12,
                      "typeName": "CodeHash<T>"
                    },
                    {
                      "name": "storage_bytes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "storage_items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "storage_byte_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "storage_item_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "storage_base_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "pallet_contracts",
                "storage",
                "DepositAccount"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountIdOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "pallet_contracts",
                "storage",
                "DeletionQueueManager"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "insert_counter",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "delete_counter",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "Schedule"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "limits",
                      "type": 306,
                      "typeName": "Limits"
                    },
                    {
                      "name": "instruction_weights",
                      "type": 307,
                      "typeName": "InstructionWeights<T>"
                    },
                    {
                      "name": "host_fn_weights",
                      "type": 308,
                      "typeName": "HostFnWeights<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "Limits"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "event_topics",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "globals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "locals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "parameters",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_pages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "table_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "subject_len",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "payload_len",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "runtime_memory",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "InstructionWeights"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "fallback",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64const",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64load",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64store",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "select",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "r#if",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_if",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "br_table_per_entry",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call_indirect",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "call_per_local",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_get",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_set",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "local_tee",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "global_get",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "global_set",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_current",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "memory_grow",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64clz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ctz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64popcnt",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64eqz",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64extendsi32",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64extendui32",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i32wrapi64",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64eq",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ne",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64lts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ltu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64gts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64gtu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64les",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64leu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64ges",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64geu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64add",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64sub",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64mul",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64divs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64divu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rems",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64remu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64and",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64or",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64xor",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shl",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shrs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64shru",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rotl",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "i64rotr",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_contracts",
                "schedule",
                "HostFnWeights"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "caller",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "is_contract",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "code_hash",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "own_code_hash",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "caller_is_origin",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "caller_is_root",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "address",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "gas_left",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "balance",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "value_transferred",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "minimum_balance",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "block_number",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "now",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "weight_to_fee",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "gas",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "input",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "input_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "r#return",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "return_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "terminate",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "random",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "deposit_event",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "deposit_event_per_topic",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "deposit_event_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "debug_message",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "debug_message_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "set_storage",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "set_storage_per_new_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "set_storage_per_old_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "set_code_hash",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "clear_storage",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "clear_storage_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "contains_storage",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "contains_storage_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "get_storage",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "get_storage_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "take_storage",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "take_storage_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "transfer",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "call",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "delegate_call",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "call_transfer_surcharge",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "call_per_cloned_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "instantiate",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "instantiate_transfer_surcharge",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "instantiate_per_input_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "instantiate_per_salt_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_sha2_256",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_sha2_256_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_keccak_256",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_keccak_256_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_blake2_256",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_blake2_256_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_blake2_128",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "hash_blake2_128_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "ecdsa_recover",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "ecdsa_to_eth_address",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "sr25519_verify",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "sr25519_verify_per_byte",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "reentrance_count",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "account_reentrance_count",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "instantiation_nonce",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "pallet_contracts",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidScheduleVersion",
                      "index": 0,
                      "docs": [
                        "A new schedule must have a greater version than the current one."
                      ]
                    },
                    {
                      "name": "InvalidCallFlags",
                      "index": 1,
                      "docs": [
                        "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
                      ]
                    },
                    {
                      "name": "OutOfGas",
                      "index": 2,
                      "docs": [
                        "The executed contract exhausted its gas limit."
                      ]
                    },
                    {
                      "name": "OutputBufferTooSmall",
                      "index": 3,
                      "docs": [
                        "The output buffer supplied to a contract API call was too small."
                      ]
                    },
                    {
                      "name": "TransferFailed",
                      "index": 4,
                      "docs": [
                        "Performing the requested transfer failed. Probably because there isn't enough",
                        "free balance in the sender's account."
                      ]
                    },
                    {
                      "name": "MaxCallDepthReached",
                      "index": 5,
                      "docs": [
                        "Performing a call was denied because the calling depth reached the limit",
                        "of what is specified in the schedule."
                      ]
                    },
                    {
                      "name": "ContractNotFound",
                      "index": 6,
                      "docs": [
                        "No contract was found at the specified address."
                      ]
                    },
                    {
                      "name": "CodeTooLarge",
                      "index": 7,
                      "docs": [
                        "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                        "current schedule."
                      ]
                    },
                    {
                      "name": "CodeNotFound",
                      "index": 8,
                      "docs": [
                        "No code could be found at the supplied code hash."
                      ]
                    },
                    {
                      "name": "OutOfBounds",
                      "index": 9,
                      "docs": [
                        "A buffer outside of sandbox memory was passed to a contract API function."
                      ]
                    },
                    {
                      "name": "DecodingFailed",
                      "index": 10,
                      "docs": [
                        "Input passed to a contract API function failed to decode as expected type."
                      ]
                    },
                    {
                      "name": "ContractTrapped",
                      "index": 11,
                      "docs": [
                        "Contract trapped during execution."
                      ]
                    },
                    {
                      "name": "ValueTooLarge",
                      "index": 12,
                      "docs": [
                        "The size defined in `T::MaxValueSize` was exceeded."
                      ]
                    },
                    {
                      "name": "TerminatedWhileReentrant",
                      "index": 13,
                      "docs": [
                        "Termination of a contract is not allowed while the contract is already",
                        "on the call stack. Can be triggered by `seal_terminate`."
                      ]
                    },
                    {
                      "name": "InputForwarded",
                      "index": 14,
                      "docs": [
                        "`seal_call` forwarded this contracts input. It therefore is no longer available."
                      ]
                    },
                    {
                      "name": "RandomSubjectTooLong",
                      "index": 15,
                      "docs": [
                        "The subject passed to `seal_random` exceeds the limit."
                      ]
                    },
                    {
                      "name": "TooManyTopics",
                      "index": 16,
                      "docs": [
                        "The amount of topics passed to `seal_deposit_events` exceeds the limit."
                      ]
                    },
                    {
                      "name": "NoChainExtension",
                      "index": 17,
                      "docs": [
                        "The chain does not provide a chain extension. Calling the chain extension results",
                        "in this error. Note that this usually  shouldn't happen as deploying such contracts",
                        "is rejected."
                      ]
                    },
                    {
                      "name": "DuplicateContract",
                      "index": 18,
                      "docs": [
                        "A contract with the same AccountId already exists."
                      ]
                    },
                    {
                      "name": "TerminatedInConstructor",
                      "index": 19,
                      "docs": [
                        "A contract self destructed in its constructor.",
                        "",
                        "This can be triggered by a call to `seal_terminate`."
                      ]
                    },
                    {
                      "name": "ReentranceDenied",
                      "index": 20,
                      "docs": [
                        "A call tried to invoke a contract that is flagged as non-reentrant.",
                        "The only other cause is that a call from a contract into the runtime tried to call back",
                        "into `pallet-contracts`. This would make the whole pallet reentrant with regard to",
                        "contract code execution which is not supported."
                      ]
                    },
                    {
                      "name": "StorageDepositNotEnoughFunds",
                      "index": 21,
                      "docs": [
                        "Origin doesn't have enough balance to pay the required storage deposits."
                      ]
                    },
                    {
                      "name": "StorageDepositLimitExhausted",
                      "index": 22,
                      "docs": [
                        "More storage was created than allowed by the storage deposit limit."
                      ]
                    },
                    {
                      "name": "CodeInUse",
                      "index": 23,
                      "docs": [
                        "Code removal was denied because the code is still in use by at least one contract."
                      ]
                    },
                    {
                      "name": "ContractReverted",
                      "index": 24,
                      "docs": [
                        "The contract ran to completion but decided to revert its storage changes.",
                        "Please note that this error is only returned from extrinsics. When called directly",
                        "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
                        "to determine whether a reversion has taken place."
                      ]
                    },
                    {
                      "name": "CodeRejected",
                      "index": 25,
                      "docs": [
                        "The contract's code was found to be invalid during validation or instrumentation.",
                        "",
                        "The most likely cause of this is that an API was used which is not supported by the",
                        "node. This happens if an older node is used with a new version of ink!. Try updating",
                        "your node to the newest available version.",
                        "",
                        "A more detailed error can be found on the node console if debug messages are enabled",
                        "by supplying `-lruntime::contracts=debug`."
                      ]
                    },
                    {
                      "name": "Indeterministic",
                      "index": 26,
                      "docs": [
                        "An indetermistic code was used in a context where this is not permitted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 313,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 94,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 57,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 200,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 200,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 320,
            "type": {
              "def": {
                "sequence": {
                  "type": 321
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "def": {
                "tuple": [
                  221,
                  322,
                  327
                ]
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "from",
                      "type": 45,
                      "typeName": "H160"
                    },
                    {
                      "name": "to",
                      "type": 323,
                      "typeName": "Option<H160>"
                    },
                    {
                      "name": "contract_address",
                      "type": 323,
                      "typeName": "Option<H160>"
                    },
                    {
                      "name": "logs",
                      "type": 324,
                      "typeName": "Vec<Log>"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 325,
                      "typeName": "Bloom"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 45
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 45
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "sequence": {
                  "type": 56
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 326,
                      "typeName": "[u8; BLOOM_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "type": 328,
                          "typeName": "EIP658ReceiptData"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "type": 328,
                          "typeName": "EIP2930ReceiptData"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "type": 328,
                          "typeName": "EIP1559ReceiptData"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "used_gas",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 325,
                      "typeName": "Bloom"
                    },
                    {
                      "name": "logs",
                      "type": 324,
                      "typeName": "Vec<Log>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 221
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 330,
                      "typeName": "Header"
                    },
                    {
                      "name": "transactions",
                      "type": 332,
                      "typeName": "Vec<T>"
                    },
                    {
                      "name": "ommers",
                      "type": 333,
                      "typeName": "Vec<Header>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "ommers_hash",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "beneficiary",
                      "type": 45,
                      "typeName": "H160"
                    },
                    {
                      "name": "state_root",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "transactions_root",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "receipts_root",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "logs_bloom",
                      "type": 325,
                      "typeName": "Bloom"
                    },
                    {
                      "name": "difficulty",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "number",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_limit",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "gas_used",
                      "type": 59,
                      "typeName": "U256"
                    },
                    {
                      "name": "timestamp",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "extra_data",
                      "type": 13,
                      "typeName": "Bytes"
                    },
                    {
                      "name": "mix_hash",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "nonce",
                      "type": 331,
                      "typeName": "H64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 94,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "def": {
                "sequence": {
                  "type": 221
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "def": {
                "sequence": {
                  "type": 330
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "sequence": {
                  "type": 327
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "def": {
                "sequence": {
                  "type": 322
                }
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "pallet_evm",
                "CodeMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "size",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "H256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "def": {
                "tuple": [
                  45,
                  12
                ]
              }
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "index": 6,
                      "docs": [
                        "Gas limit is too low."
                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "index": 7,
                      "docs": [
                        "Gas limit is too high."
                      ]
                    },
                    {
                      "name": "Undefined",
                      "index": 8,
                      "docs": [
                        "Undefined error."
                      ]
                    },
                    {
                      "name": "Reentrancy",
                      "index": 9,
                      "docs": [
                        "EVM reentrancy"
                      ]
                    },
                    {
                      "name": "TransactionMustComeFromEOA",
                      "index": 10,
                      "docs": [
                        "EIP-3607,"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "def": {
                "sequence": {
                  "type": 341
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "def": {
                "tuple": [
                  0,
                  237
                ]
              }
            }
          },
          {
            "id": 342,
            "type": {
              "def": {
                "tuple": [
                  343,
                  13
                ]
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 238
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 346,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "def": {
                "sequence": {
                  "type": 238
                }
              }
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "RoundInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "length",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegationCounter"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "SessionIndex"
                    },
                    {
                      "name": "counter",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegator"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxCollatorsPerDelegator",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegations",
                      "type": 350,
                      "typeName": "OrderedSet<Stake<AccountId, Balance>, MaxCollatorsPerDelegator>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 352,
                      "typeName": "BoundedVec<T, S>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Stake"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 353,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "def": {
                "sequence": {
                  "type": 351
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Candidate"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxDelegatorsPerCandidate",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "delegators",
                      "type": 355,
                      "typeName": "OrderedSet<Stake<AccountId, Balance>, MaxDelegatorsPerCandidate>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "status",
                      "type": 357,
                      "typeName": "CandidateStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 356,
                      "typeName": "BoundedVec<T, S>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 353,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "index": 0
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "TotalStake"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collators",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "delegators",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 360,
                      "typeName": "BoundedVec<T, S>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 353,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 362,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 363
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "def": {
                "sequence": {
                  "type": 364
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "def": {
                "tuple": [
                  4,
                  6
                ]
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegatorNotFound",
                      "index": 0,
                      "docs": [
                        "The account is not part of the delegators set."
                      ]
                    },
                    {
                      "name": "CandidateNotFound",
                      "index": 1,
                      "docs": [
                        "The account is not part of the collator candidates set."
                      ]
                    },
                    {
                      "name": "DelegatorExists",
                      "index": 2,
                      "docs": [
                        "The account is already part of the delegators set."
                      ]
                    },
                    {
                      "name": "CandidateExists",
                      "index": 3,
                      "docs": [
                        "The account is already part of the collator candidates set."
                      ]
                    },
                    {
                      "name": "ValStakeZero",
                      "index": 4,
                      "docs": [
                        "The account tried to stake more or less with amount zero."
                      ]
                    },
                    {
                      "name": "ValStakeBelowMin",
                      "index": 5,
                      "docs": [
                        "The account has not staked enough funds to be added to the collator",
                        "candidates set."
                      ]
                    },
                    {
                      "name": "ValStakeAboveMax",
                      "index": 6,
                      "docs": [
                        "The account has already staked the maximum amount of funds possible."
                      ]
                    },
                    {
                      "name": "NomStakeBelowMin",
                      "index": 7,
                      "docs": [
                        "The account has not staked enough funds to become a delegator."
                      ]
                    },
                    {
                      "name": "DelegationBelowMin",
                      "index": 8,
                      "docs": [
                        "The account has not staked enough funds to delegate a collator",
                        "candidate."
                      ]
                    },
                    {
                      "name": "AlreadyLeaving",
                      "index": 9,
                      "docs": [
                        "The collator candidate has already trigger the process to leave the",
                        "set of collator candidates."
                      ]
                    },
                    {
                      "name": "NotLeaving",
                      "index": 10,
                      "docs": [
                        "The collator candidate wanted to execute the exit but has not",
                        "requested to leave before by calling `init_leave_candidates`."
                      ]
                    },
                    {
                      "name": "CannotLeaveYet",
                      "index": 11,
                      "docs": [
                        "The collator tried to leave before waiting at least for",
                        "`ExitQueueDelay` many rounds."
                      ]
                    },
                    {
                      "name": "CannotJoinBeforeUnlocking",
                      "index": 12,
                      "docs": [
                        "The account has a full list of unstaking requests and needs to",
                        "unlock at least one of these before being able to join (again).",
                        "NOTE: Can only happen if the account was a candidate or",
                        "delegator before and either got kicked or exited voluntarily."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 13,
                      "docs": [
                        "The account is already delegating the collator candidate."
                      ]
                    },
                    {
                      "name": "NotYetDelegating",
                      "index": 14,
                      "docs": [
                        "The account has not delegated any collator candidate yet, hence it",
                        "is not in the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationsPerRoundExceeded",
                      "index": 15,
                      "docs": [
                        "The delegator has exceeded the number of delegations per round which",
                        "is equal to MaxDelegatorsPerCollator.",
                        "",
                        "This protects against attacks in which a delegator can re-delegate",
                        "from a collator who has already authored a block, to another one",
                        "which has not in this round."
                      ]
                    },
                    {
                      "name": "TooManyDelegators",
                      "index": 16,
                      "docs": [
                        "The collator candidate has already reached the maximum number of",
                        "delegators.",
                        "",
                        "This error is generated in case a new delegation request does not",
                        "stake enough funds to replace some other existing delegation."
                      ]
                    },
                    {
                      "name": "TooFewCollatorCandidates",
                      "index": 17,
                      "docs": [
                        "The set of collator candidates would fall below the required minimum",
                        "if the collator left."
                      ]
                    },
                    {
                      "name": "CannotStakeIfLeaving",
                      "index": 18,
                      "docs": [
                        "The collator candidate is in the process of leaving the set of",
                        "candidates and cannot perform any other actions in the meantime."
                      ]
                    },
                    {
                      "name": "CannotDelegateIfLeaving",
                      "index": 19,
                      "docs": [
                        "The collator candidate is in the process of leaving the set of",
                        "candidates and thus cannot be delegated to."
                      ]
                    },
                    {
                      "name": "MaxCollatorsPerDelegatorExceeded",
                      "index": 20,
                      "docs": [
                        "The delegator has already delegated the maximum number of candidates",
                        "allowed."
                      ]
                    },
                    {
                      "name": "AlreadyDelegatedCollator",
                      "index": 21,
                      "docs": [
                        "The delegator has already previously delegated the collator",
                        "candidate."
                      ]
                    },
                    {
                      "name": "DelegationNotFound",
                      "index": 22,
                      "docs": [
                        "The given delegation does not exist in the set of delegations."
                      ]
                    },
                    {
                      "name": "Underflow",
                      "index": 23,
                      "docs": [
                        "The collator delegate or the delegator is trying to un-stake more",
                        "funds that are currently staked."
                      ]
                    },
                    {
                      "name": "CannotSetAboveMax",
                      "index": 24,
                      "docs": [
                        "The number of selected candidates per staking round is",
                        "above the maximum value allowed."
                      ]
                    },
                    {
                      "name": "CannotSetBelowMin",
                      "index": 25,
                      "docs": [
                        "The number of selected candidates per staking round is",
                        "below the minimum value allowed."
                      ]
                    },
                    {
                      "name": "InvalidSchedule",
                      "index": 26,
                      "docs": [
                        "An invalid reward rate configuration is trying to be set."
                      ]
                    },
                    {
                      "name": "NoMoreUnstaking",
                      "index": 27,
                      "docs": [
                        "The staking reward being unlocked does not exist.",
                        "Max unlocking requests reached."
                      ]
                    },
                    {
                      "name": "StakeNotFound",
                      "index": 28,
                      "docs": [
                        "Provided staked value is zero. Should never be thrown."
                      ]
                    },
                    {
                      "name": "UnstakingIsEmpty",
                      "index": 29,
                      "docs": [
                        "Cannot unlock when Unstaked is empty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 367
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 367
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 12,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 369,
                      "typeName": "RelayDispachQueueSize"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 370,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 370,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "RelayDispachQueueSize"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "def": {
                "sequence": {
                  "type": 371
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "def": {
                "tuple": [
                  73,
                  372
                ]
              }
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "AbridgedHrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 373,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 12
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "polkadot_primitives",
                "v4",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 73
                },
                {
                  "name": "V",
                  "type": 375
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 377
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "def": {
                "sequence": {
                  "type": 378
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "def": {
                "tuple": [
                  73,
                  375
                ]
              }
            }
          },
          {
            "id": 379,
            "type": {
              "def": {
                "sequence": {
                  "type": 380
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 73
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 73,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 13,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 12,
                      "typeName": "T::Hash"
                    },
                    {
                      "name": "check_version",
                      "type": 43,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending."
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function."
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run."
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block."
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block."
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_block_reward",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidDistributionConfiguration",
                      "index": 0,
                      "docs": [
                        "Sum of all rations must be one whole (100%)"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "staking_coefficient_reward",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidRateConfig",
                      "index": 0,
                      "docs": [
                        "An invalid reward rate configuration is trying to be set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 385,
            "type": {
              "def": {
                "sequence": {
                  "type": 386
                }
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 73,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 387,
                      "typeName": "InboundState"
                    },
                    {
                      "name": "message_metadata",
                      "type": 388,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "def": {
                "sequence": {
                  "type": 389
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "def": {
                "tuple": [
                  4,
                  390
                ]
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "XcmpMessageFormat"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "index": 0
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "index": 1
                    },
                    {
                      "name": "Signals",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "def": {
                "tuple": [
                  73,
                  4
                ]
              }
            }
          },
          {
            "id": 392,
            "type": {
              "def": {
                "sequence": {
                  "type": 393
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 73,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 394,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 43,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 184,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 184,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "def": {
                "tuple": [
                  73,
                  184
                ]
              }
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "threshold_weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "def": {
                "tuple": [
                  73,
                  4,
                  13
                ]
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "index": 0,
                      "docs": [
                        "Failed to send XCM message."
                      ]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "index": 1,
                      "docs": [
                        "Bad XCM origin."
                      ]
                    },
                    {
                      "name": "BadXcm",
                      "index": 2,
                      "docs": [
                        "Bad XCM data."
                      ]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "index": 3,
                      "docs": [
                        "Bad overweight index."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 13,
                      "docs": [
                        "Invalid asset for the operation."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 14,
                      "docs": [
                        "The owner does not own (all) of the asset that they wish to do the operation on."
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "index": 15,
                      "docs": [
                        "The asset owner has too many locks on the asset."
                      ]
                    },
                    {
                      "name": "AccountNotSovereign",
                      "index": 16,
                      "docs": [
                        "The given account is not an identifiable sovereign account for any location."
                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 17,
                      "docs": [
                        "The operation required fees to be paid which the initiator could not meet."
                      ]
                    },
                    {
                      "name": "LockNotFound",
                      "index": 18,
                      "docs": [
                        "A remote lock with the corresponding data could not be found."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 19,
                      "docs": [
                        "The unlock operation cannot succeed because there are still consumers of the lock."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "ConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "PageIndexData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "overweight_count",
                      "type": 11,
                      "typeName": "OverweightIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "def": {
                "sequence": {
                  "type": 404
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "def": {
                "tuple": [
                  4,
                  13
                ]
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "OverLimit",
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 0,
                      "docs": [
                        "Unable to convert the Amount type into Balance."
                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "index": 1,
                      "docs": [
                        "Balance is too low."
                      ]
                    },
                    {
                      "name": "DepositFailed",
                      "index": 2,
                      "docs": [
                        "Deposit result is not expected"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 407,
            "type": {
              "def": {
                "tuple": [
                  0,
                  131
                ]
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 409
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 410,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "orml_tokens",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 94,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "def": {
                "sequence": {
                  "type": 409
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "orml_tokens",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 413
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 414,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "orml_tokens",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 94
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 94,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "def": {
                "sequence": {
                  "type": 413
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low"
                      ]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": [
                        "Cannot convert Amount into Balance type"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": [
                        "Failed because the maximum locks was exceeded"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "index": 0,
                      "docs": [
                        "Asset has no reserve location."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "index": 1,
                      "docs": [
                        "Not cross-chain transfer."
                      ]
                    },
                    {
                      "name": "InvalidDest",
                      "index": 2,
                      "docs": [
                        "Invalid transfer destination."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "index": 3,
                      "docs": [
                        "Currency is not cross-chain transferable."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 4,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "index": 5,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the",
                        "destination chain."
                      ]
                    },
                    {
                      "name": "InvalidAncestry",
                      "index": 7,
                      "docs": [
                        "Could not get ancestry of asset reserve location."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 8,
                      "docs": [
                        "The MultiAsset is invalid."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 9,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 10,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "index": 11,
                      "docs": [
                        "We tried sending distinct asset and fee but they have different",
                        "reserve chains."
                      ]
                    },
                    {
                      "name": "ZeroFee",
                      "index": 12,
                      "docs": [
                        "The fee is zero."
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 13,
                      "docs": [
                        "The transfering asset amount is zero."
                      ]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "index": 14,
                      "docs": [
                        "The number of assets to be sent is over the maximum."
                      ]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "index": 15,
                      "docs": [
                        "The specified index does not exist in a MultiAssets struct."
                      ]
                    },
                    {
                      "name": "FeeNotEnough",
                      "index": 16,
                      "docs": [
                        "Fee is not enough."
                      ]
                    },
                    {
                      "name": "NotSupportedMultiLocation",
                      "index": 17,
                      "docs": [
                        "Not supported MultiLocation"
                      ]
                    },
                    {
                      "name": "MinXcmFeeNotDefined",
                      "index": 18,
                      "docs": [
                        "MinXcmFee not registered for certain reserve location"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 417,
            "type": {
              "def": {
                "tuple": [
                  76,
                  76
                ]
              }
            }
          },
          {
            "id": 418,
            "type": {
              "def": {
                "tuple": [
                  76,
                  13
                ]
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low."
                      ]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 1,
                      "docs": [
                        "The operation will cause balance to overflow."
                      ]
                    },
                    {
                      "name": "UnhandledAsset",
                      "index": 2,
                      "docs": [
                        "Unhandled asset."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 420,
            "type": {
              "def": {
                "tuple": [
                  136,
                  0
                ]
              }
            }
          },
          {
            "id": 421,
            "type": {
              "def": {
                "tuple": [
                  136,
                  136
                ]
              }
            }
          },
          {
            "id": 422,
            "type": {
              "def": {
                "tuple": [
                  36,
                  2
                ]
              }
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 136
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 136
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "PairStatus"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Trading",
                      "fields": [
                        {
                          "type": 425,
                          "typeName": "PairMetadata<Balance, Account>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Bootstrap",
                      "fields": [
                        {
                          "type": 426,
                          "typeName": "BootstrapParameter<Balance, BlockNumber, Account>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Disable",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "PairMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pair_account",
                      "type": 0,
                      "typeName": "Account"
                    },
                    {
                      "name": "total_supply",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "BootstrapParameter"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_supply",
                      "type": 427,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "capacity_supply",
                      "type": 427,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "accumulated_supply",
                      "type": 427,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "end_block_number",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "pair_account",
                      "type": 0,
                      "typeName": "Account"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 427,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6
                ]
              }
            }
          },
          {
            "id": 428,
            "type": {
              "def": {
                "tuple": [
                  421,
                  0
                ]
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 136
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 139
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireProtocolAdmin",
                      "index": 0,
                      "docs": [
                        "Require the admin who can reset the admin and receiver of the protocol fee."
                      ]
                    },
                    {
                      "name": "RequireProtocolAdminCandidate",
                      "index": 1,
                      "docs": [
                        "Require the admin candidate who can become new admin after confirm."
                      ]
                    },
                    {
                      "name": "InvalidFeePoint",
                      "index": 2,
                      "docs": [
                        "Invalid fee_point"
                      ]
                    },
                    {
                      "name": "UnsupportedAssetType",
                      "index": 3,
                      "docs": [
                        "Unsupported AssetId by this ZenlinkProtocol Version."
                      ]
                    },
                    {
                      "name": "InsufficientAssetBalance",
                      "index": 4,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NativeBalanceTooLow",
                      "index": 5,
                      "docs": [
                        "Account native currency balance must be greater than ExistentialDeposit."
                      ]
                    },
                    {
                      "name": "DeniedCreatePair",
                      "index": 6,
                      "docs": [
                        "Trading pair can't be created."
                      ]
                    },
                    {
                      "name": "PairAlreadyExists",
                      "index": 7,
                      "docs": [
                        "Trading pair already exists."
                      ]
                    },
                    {
                      "name": "PairNotExists",
                      "index": 8,
                      "docs": [
                        "Trading pair does not exist."
                      ]
                    },
                    {
                      "name": "AssetNotExists",
                      "index": 9,
                      "docs": [
                        "Asset does not exist."
                      ]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "index": 10,
                      "docs": [
                        "Liquidity is not enough."
                      ]
                    },
                    {
                      "name": "InsufficientPairReserve",
                      "index": 11,
                      "docs": [
                        "Trading pair does have enough foreign."
                      ]
                    },
                    {
                      "name": "InsufficientTargetAmount",
                      "index": 12,
                      "docs": [
                        "Get target amount is less than exception."
                      ]
                    },
                    {
                      "name": "ExcessiveSoldAmount",
                      "index": 13,
                      "docs": [
                        "Sold amount is more than exception."
                      ]
                    },
                    {
                      "name": "InvalidPath",
                      "index": 14,
                      "docs": [
                        "Can't find pair though trading path."
                      ]
                    },
                    {
                      "name": "IncorrectAssetAmountRange",
                      "index": 15,
                      "docs": [
                        "Incorrect foreign amount range."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 16,
                      "docs": [
                        "Overflow."
                      ]
                    },
                    {
                      "name": "Deadline",
                      "index": 17,
                      "docs": [
                        "Transaction block number is larger than the end block number."
                      ]
                    },
                    {
                      "name": "AccountIdBadLocation",
                      "index": 18,
                      "docs": [
                        "Location given was invalid or unsupported."
                      ]
                    },
                    {
                      "name": "ExecutionFailed",
                      "index": 19,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "DeniedTransferToSelf",
                      "index": 20,
                      "docs": [
                        "Transfer to self by XCM message."
                      ]
                    },
                    {
                      "name": "TargetChainNotRegistered",
                      "index": 21,
                      "docs": [
                        "Not in ZenlinkRegistedParaChains."
                      ]
                    },
                    {
                      "name": "InvariantCheckFailed",
                      "index": 22,
                      "docs": [
                        "Can't pass the K value check"
                      ]
                    },
                    {
                      "name": "PairCreateForbidden",
                      "index": 23,
                      "docs": [
                        "Created pair can't create now"
                      ]
                    },
                    {
                      "name": "NotInBootstrap",
                      "index": 24,
                      "docs": [
                        "Pair is not in bootstrap"
                      ]
                    },
                    {
                      "name": "InvalidContributionAmount",
                      "index": 25,
                      "docs": [
                        "Amount of contribution is invalid."
                      ]
                    },
                    {
                      "name": "UnqualifiedBootstrap",
                      "index": 26,
                      "docs": [
                        "Amount of contribution is invalid."
                      ]
                    },
                    {
                      "name": "ZeroContribute",
                      "index": 27,
                      "docs": [
                        "Zero contribute in bootstrap"
                      ]
                    },
                    {
                      "name": "DenyRefund",
                      "index": 28,
                      "docs": [
                        "Bootstrap deny refund"
                      ]
                    },
                    {
                      "name": "DisableBootstrap",
                      "index": 29,
                      "docs": [
                        "Bootstrap is disable"
                      ]
                    },
                    {
                      "name": "NotQualifiedAccount",
                      "index": 30,
                      "docs": [
                        "Not eligible to contribute"
                      ]
                    },
                    {
                      "name": "NoRewardTokens",
                      "index": 31,
                      "docs": [
                        "Reward of bootstrap is not set."
                      ]
                    },
                    {
                      "name": "ChargeRewardParamsError",
                      "index": 32,
                      "docs": [
                        "Charge bootstrap extrinsic args has error,"
                      ]
                    },
                    {
                      "name": "ExistRewardsInBootstrap",
                      "index": 33,
                      "docs": [
                        "Exist some reward in bootstrap,"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 288
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 432,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 432,
            "type": {
              "def": {
                "sequence": {
                  "type": 288
                }
              }
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 435,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "peaq_pallet_did",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AttributeNameExceedMax64",
                      "index": 0
                    },
                    {
                      "name": "AttributeAlreadyExist",
                      "index": 1
                    },
                    {
                      "name": "AttributeCreationFailed",
                      "index": 2
                    },
                    {
                      "name": "AttributeUpdateFailed",
                      "index": 3
                    },
                    {
                      "name": "AttributeNotFound",
                      "index": 4
                    },
                    {
                      "name": "AttributeAuthorizationFailed",
                      "index": 5
                    },
                    {
                      "name": "MaxBlockNumberExceeded",
                      "index": 6
                    },
                    {
                      "name": "InvalidSuppliedValue",
                      "index": 7
                    },
                    {
                      "name": "ParseError",
                      "index": 8
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "peaq_pallet_transaction",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "MaxApprovals",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 149,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 439,
                      "typeName": "BoundedVec<AccountId, MaxApprovals>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 200,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "peaq_pallet_rbac",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EntityNameExceedMax64",
                      "index": 0,
                      "docs": [
                        "Name exceeds 64"
                      ]
                    },
                    {
                      "name": "EntityAlreadyExist",
                      "index": 1,
                      "docs": [
                        "Returned if the Role already exists"
                      ]
                    },
                    {
                      "name": "EntityDoesNotExist",
                      "index": 2,
                      "docs": [
                        "Returned if the Role does not exists"
                      ]
                    },
                    {
                      "name": "EntityDisabled",
                      "index": 3,
                      "docs": [
                        "Returned if the Entity is not enabled"
                      ]
                    },
                    {
                      "name": "EntityAuthorizationFailed",
                      "index": 4,
                      "docs": [
                        "Failed to verify entity ownership"
                      ]
                    },
                    {
                      "name": "AssignmentAlreadyExist",
                      "index": 5,
                      "docs": [
                        "Failed to assign entity to entity (e.g. user to group, role to user)"
                      ]
                    },
                    {
                      "name": "AssignmentDoesNotExist",
                      "index": 6,
                      "docs": [
                        "Returned if assignment does not exist"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "peaq_pallet_storage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ItemNotFound",
                      "index": 0
                    },
                    {
                      "name": "ItemTypeAlreadyExists",
                      "index": 1
                    },
                    {
                      "name": "ItemTypeExceedMax64",
                      "index": 2
                    },
                    {
                      "name": "ItemExceedMax128",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 443,
            "type": {
              "def": {
                "tuple": [
                  2,
                  444
                ]
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 138,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "peaq_pallet_mor",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DidAuthorizationFailed",
                      "index": 0
                    },
                    {
                      "name": "InsufficientTokensInPot",
                      "index": 1
                    },
                    {
                      "name": "MachineAlreadyRegistered",
                      "index": 2
                    },
                    {
                      "name": "MachineNotRegistered",
                      "index": 3
                    },
                    {
                      "name": "MachinePaymentOutOfRange",
                      "index": 4
                    },
                    {
                      "name": "MorAuthorizationFailed",
                      "index": 5
                    },
                    {
                      "name": "MorConfigIsNotConsistent",
                      "index": 6
                    },
                    {
                      "name": "TokensCouldNotBeTransfered",
                      "index": 7
                    },
                    {
                      "name": "UnexpectedDidError",
                      "index": 8
                    },
                    {
                      "name": "UnknownError",
                      "index": 9
                    }
                  ]
                }
              },
              "docs": [
                "For description of error types, please have a look into module error for",
                "further informations about error types."
              ]
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 199
                },
                {
                  "name": "Call",
                  "type": 205
                },
                {
                  "name": "Signature",
                  "type": 447
                },
                {
                  "name": "Extra",
                  "type": 453
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 462,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 448,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 450,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 451,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 449,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 449,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 452,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 452,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "def": {
                "tuple": [
                  454,
                  455,
                  456,
                  457,
                  459,
                  460,
                  461
                ]
              }
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 455,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 458,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 79,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 82,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 199
                },
                {
                  "name": "Call",
                  "type": 205
                },
                {
                  "name": "Signature",
                  "type": 447
                },
                {
                  "name": "Extra",
                  "type": 453
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 18
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 166
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 168
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 165
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 169
          },
          "event": {
            "ty": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 173,
              "value": [
                2,
                3,
                129,
                93,
                0,
                7,
                0,
                136,
                82,
                106,
                116,
                2,
                0,
                64,
                1,
                194,
                233,
                23,
                27,
                0,
                1,
                7,
                144,
                49,
                218,
                118,
                81,
                2,
                0,
                224,
                0,
                1,
                7,
                0,
                230,
                189,
                79,
                87,
                2,
                0,
                240,
                0,
                1,
                0,
                0,
                194,
                233,
                23,
                27,
                0,
                1,
                7,
                144,
                211,
                110,
                145,
                110,
                2,
                0,
                48,
                1,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                2,
                0,
                64,
                1,
                1,
                7,
                0,
                162,
                148,
                26,
                29,
                2,
                0,
                80,
                0,
                194,
                233,
                23,
                27,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 177,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 179,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 180,
              "value": [
                52,
                112,
                101,
                97,
                113,
                45,
                110,
                111,
                100,
                101,
                45,
                100,
                101,
                118,
                52,
                112,
                101,
                97,
                113,
                45,
                110,
                111,
                100,
                101,
                45,
                100,
                101,
                118,
                1,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                76,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                189,
                120,
                37,
                93,
                79,
                238,
                234,
                31,
                4,
                0,
                0,
                0,
                163,
                61,
                67,
                245,
                135,
                49,
                173,
                132,
                2,
                0,
                0,
                0,
                88,
                34,
                17,
                246,
                91,
                177,
                75,
                137,
                5,
                0,
                0,
                0,
                230,
                91,
                0,
                228,
                108,
                237,
                208,
                170,
                2,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                104,
                182,
                107,
                161,
                34,
                201,
                63,
                167,
                2,
                0,
                0,
                0,
                223,
                145,
                76,
                138,
                193,
                54,
                57,
                119,
                1,
                0,
                0,
                0,
                202,
                160,
                71,
                156,
                196,
                15,
                30,
                21,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                234,
                147,
                227,
                241,
                111,
                61,
                105,
                98,
                2,
                0,
                0,
                0,
                156,
                79,
                58,
                251,
                86,
                32,
                110,
                191,
                1,
                0,
                0,
                0,
                96,
                174,
                212,
                60,
                181,
                36,
                86,
                241,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 184,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 185
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "entries": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "ty": {
                  "Plain": 186
                },
                "default": [
                  0
                ],
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 187
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 11,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 2
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 192
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 195
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 195
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 198
          },
          "event": {
            "ty": 30
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            },
            {
              "name": "MaxHolds",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of holds that can exist on an account at any time."
              ]
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": {
            "ty": 201
          },
          "index": 4
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 202
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 203
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 32
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 5
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 204
          },
          "event": {
            "ty": 33
          },
          "constants": [],
          "error": {
            "ty": 296
          },
          "index": 6
        },
        {
          "name": "Contracts",
          "storage": {
            "prefix": "Contracts",
            "entries": [
              {
                "name": "PristineCode",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 297
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from an original code hash to the original code, untouched by instrumentation."
                ]
              },
              {
                "name": "CodeStorage",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 298
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping between an original code hash and instrumented wasm code, ready for execution."
                ]
              },
              {
                "name": "OwnerInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 300
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping between an original code hash and its owner information."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This is a **monotonic** counter incremented on contract instantiation.",
                  "",
                  " This is used in order to generate unique trie ids for contracts.",
                  " The trie id of a new contract is calculated from hash(account_id, nonce).",
                  " The nonce is required because otherwise the following sequence would lead to",
                  " a possible collision of storage:",
                  "",
                  " 1. Create a new contract.",
                  " 2. Terminate the contract.",
                  " 3. Immediately recreate the contract with the same account_id.",
                  "",
                  " This is bad because the contents of a trie are deleted lazily and there might be",
                  " storage of the old instantiation still in it when the new contract is created. Please",
                  " note that we can't replace the counter by the block number because the sequence above",
                  " can happen in the same block. We also can't keep the account counter in memory only",
                  " because storage is the only way to communicate across different extrinsics in the",
                  " same block.",
                  "",
                  " # Note",
                  "",
                  " Do not use it to determine the number of contracts. It won't be decremented if",
                  " a contract is destroyed."
                ]
              },
              {
                "name": "ContractInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 301
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The code associated with a given account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "DeletionQueue",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 302
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Evicted contracts that await child trie deletion.",
                  "",
                  " Child trie deletion is a heavy operation depending on the amount of storage items",
                  " stored in said trie. Therefore this operation is performed lazily in `on_idle`."
                ]
              },
              {
                "name": "DeletionQueueCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 304
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pair of monotonic counters used to track the latest contract marked for deletion",
                  " and the latest deleted contract in queue."
                ]
              }
            ]
          },
          "calls": {
            "ty": 206
          },
          "event": {
            "ty": 37
          },
          "constants": [
            {
              "name": "Schedule",
              "ty": 305,
              "value": [
                4,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                4,
                0,
                0,
                128,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                1,
                0,
                0,
                32,
                0,
                0,
                0,
                0,
                64,
                0,
                0,
                0,
                0,
                0,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                195,
                5,
                0,
                0,
                52,
                14,
                0,
                0,
                0,
                12,
                0,
                0,
                243,
                7,
                0,
                0,
                3,
                24,
                0,
                0,
                126,
                6,
                0,
                0,
                255,
                13,
                0,
                0,
                161,
                20,
                0,
                0,
                4,
                0,
                0,
                0,
                241,
                64,
                0,
                0,
                199,
                77,
                0,
                0,
                17,
                4,
                0,
                0,
                96,
                3,
                0,
                0,
                144,
                8,
                0,
                0,
                149,
                3,
                0,
                0,
                90,
                28,
                0,
                0,
                196,
                28,
                0,
                0,
                233,
                8,
                0,
                0,
                97,
                30,
                203,
                0,
                110,
                3,
                0,
                0,
                44,
                3,
                0,
                0,
                36,
                3,
                0,
                0,
                219,
                2,
                0,
                0,
                162,
                3,
                0,
                0,
                178,
                3,
                0,
                0,
                7,
                3,
                0,
                0,
                84,
                6,
                0,
                0,
                82,
                7,
                0,
                0,
                58,
                6,
                0,
                0,
                59,
                6,
                0,
                0,
                111,
                5,
                0,
                0,
                153,
                6,
                0,
                0,
                29,
                6,
                0,
                0,
                111,
                5,
                0,
                0,
                3,
                6,
                0,
                0,
                60,
                6,
                0,
                0,
                193,
                5,
                0,
                0,
                193,
                6,
                0,
                0,
                92,
                5,
                0,
                0,
                73,
                28,
                0,
                0,
                227,
                23,
                0,
                0,
                51,
                29,
                0,
                0,
                153,
                24,
                0,
                0,
                234,
                4,
                0,
                0,
                51,
                5,
                0,
                0,
                226,
                5,
                0,
                0,
                162,
                5,
                0,
                0,
                176,
                6,
                0,
                0,
                158,
                5,
                0,
                0,
                217,
                5,
                0,
                0,
                150,
                5,
                0,
                0,
                202,
                195,
                19,
                0,
                24,
                194,
                29,
                193,
                6,
                109,
                42,
                166,
                27,
                242,
                6,
                125,
                42,
                246,
                79,
                25,
                0,
                24,
                30,
                56,
                10,
                0,
                12,
                222,
                219,
                8,
                0,
                12,
                166,
                29,
                20,
                0,
                24,
                178,
                163,
                31,
                0,
                24,
                38,
                192,
                88,
                0,
                24,
                118,
                242,
                19,
                0,
                24,
                158,
                206,
                19,
                0,
                24,
                186,
                104,
                19,
                0,
                24,
                186,
                85,
                19,
                0,
                24,
                10,
                171,
                84,
                0,
                56,
                238,
                206,
                7,
                0,
                0,
                138,
                32,
                17,
                0,
                24,
                77,
                9,
                0,
                62,
                143,
                56,
                0,
                180,
                213,
                2,
                0,
                22,
                194,
                254,
                253,
                149,
                121,
                182,
                174,
                107,
                0,
                40,
                218,
                191,
                210,
                0,
                40,
                158,
                245,
                100,
                30,
                49,
                39,
                209,
                11,
                0,
                122,
                18,
                14,
                0,
                28,
                133,
                11,
                0,
                54,
                228,
                63,
                31,
                149,
                4,
                217,
                6,
                0,
                165,
                1,
                4,
                162,
                5,
                214,
                70,
                73,
                48,
                202,
                29,
                54,
                31,
                133,
                4,
                245,
                1,
                4,
                206,
                39,
                27,
                7,
                133,
                4,
                0,
                4,
                2,
                65,
                35,
                7,
                165,
                4,
                9,
                11,
                4,
                10,
                113,
                68,
                31,
                165,
                4,
                161,
                11,
                4,
                190,
                156,
                60,
                38,
                97,
                39,
                78,
                168,
                81,
                111,
                1,
                43,
                142,
                163,
                145,
                86,
                49,
                40,
                250,
                6,
                222,
                66,
                137,
                80,
                101,
                9,
                0,
                94,
                45,
                93,
                238,
                85,
                81,
                250,
                201,
                176,
                59,
                41,
                41,
                125,
                18,
                0,
                33,
                21,
                0,
                206,
                7,
                35,
                0,
                32,
                181,
                61,
                0,
                26,
                85,
                45,
                0,
                32,
                101,
                49,
                0,
                234,
                128,
                25,
                0,
                32,
                69,
                14,
                0,
                150,
                113,
                25,
                0,
                32,
                93,
                14,
                0,
                6,
                28,
                247,
                8,
                53,
                1,
                178,
                93,
                58,
                2,
                168,
                6,
                66,
                119,
                11,
                193,
                1,
                17,
                73,
                4,
                102,
                189,
                9,
                0,
                12,
                54,
                175,
                15,
                0,
                160,
                194,
                192,
                8,
                0,
                12
              ],
              "docs": [
                " Cost schedule and limits."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance a caller has to pay for each byte of storage.",
                "",
                " # Note",
                "",
                " Changing this value for an existing chain might need a storage migration."
              ]
            },
            {
              "name": "DefaultDepositLimit",
              "ty": 6,
              "value": [
                0,
                0,
                144,
                198,
                96,
                208,
                92,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Fallback value to limit the storage deposit if it's not being set by the caller."
              ]
            },
            {
              "name": "DepositPerItem",
              "ty": 6,
              "value": [
                0,
                0,
                233,
                65,
                204,
                107,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance a caller has to pay for each storage item.",
                "",
                " # Note",
                "",
                " Changing this value for an existing chain might need a storage migration."
              ]
            },
            {
              "name": "MaxCodeLen",
              "ty": 4,
              "value": [
                0,
                236,
                1,
                0
              ],
              "docs": [
                " The maximum length of a contract code in bytes. This limit applies to the instrumented",
                " version of the code. Therefore `instantiate_with_code` can fail even when supplying",
                " a wasm binary below this maximum size.",
                "",
                " The value should be chosen carefully taking into the account the overall memory limit",
                " your runtime has, as well as the [maximum allowed callstack",
                " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
              ]
            },
            {
              "name": "MaxStorageKeyLen",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum allowable length in bytes for storage keys."
              ]
            },
            {
              "name": "UnsafeUnstableInterface",
              "ty": 43,
              "value": [
                0
              ],
              "docs": [
                " Make contract callable functions marked as `#[unstable]` available.",
                "",
                " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
                " this is set to `true`. This is only meant for testnets and dev nodes in order to",
                " experiment with new features.",
                "",
                " # Warning",
                "",
                " Do **not** set to `true` on productions chains."
              ]
            },
            {
              "name": "MaxDebugBufferLen",
              "ty": 4,
              "value": [
                0,
                0,
                32,
                0
              ],
              "docs": [
                " The maximum length of the debug buffer in bytes."
              ]
            }
          ],
          "error": {
            "ty": 309
          },
          "index": 7
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 209
          },
          "event": {
            "ty": 40
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 310
          },
          "index": 8
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 311
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 312
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 218
          },
          "event": {
            "ty": 41
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 61,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "ty": 314,
              "value": [
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                75,
                0,
                0,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "ty": 61,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": {
            "ty": 316
          },
          "index": 9
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 317
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 205
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 318
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 200
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 219
          },
          "event": {
            "ty": 42
          },
          "constants": [
            {
              "name": "MaxProposalWeight",
              "ty": 9,
              "value": [
                7,
                0,
                68,
                41,
                53,
                58,
                2,
                0,
                160,
                0
              ],
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "error": {
            "ty": 319
          },
          "index": 10
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "entries": [
              {
                "name": "Pending",
                "modifier": "Default",
                "ty": {
                  "Plain": 320
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "ty": {
                  "Plain": 329
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "ty": {
                  "Plain": 334
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "ty": {
                  "Plain": 335
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 59,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 220
          },
          "event": {
            "ty": 44
          },
          "constants": [],
          "error": {
            "ty": 336
          },
          "index": 11
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "entries": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 45,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "AccountCodesMetadata",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 45,
                    "value": 337
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 338,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 230
          },
          "event": {
            "ty": 55
          },
          "constants": [],
          "error": {
            "ty": 339
          },
          "index": 12
        },
        {
          "name": "DynamicFee",
          "storage": {
            "prefix": "DynamicFee",
            "entries": [
              {
                "name": "MinGasPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TargetMinGasPrice",
                "modifier": "Optional",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 234
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 13
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "entries": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0,
                  4,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "ty": {
                  "Plain": 61
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 235
          },
          "event": {
            "ty": 58
          },
          "constants": [],
          "error": null,
          "index": 14
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 20
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 200
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 340
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 313
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 237
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 342,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 236
          },
          "event": {
            "ty": 62
          },
          "constants": [],
          "error": {
            "ty": 344
          },
          "index": 21
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 345
                },
                "default": [
                  0
                ],
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 22
        },
        {
          "name": "ParachainStaking",
          "storage": {
            "prefix": "ParachainStaking",
            "entries": [
              {
                "name": "MaxSelectedCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The maximum number of collator candidates selected at each round."
                ]
              },
              {
                "name": "Round",
                "modifier": "Default",
                "ty": {
                  "Plain": 347
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  20,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current round number and next round scheduled transition."
                ]
              },
              {
                "name": "LastDelegation",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 348
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Delegation information for the latest session in which a delegator",
                  " delegated.",
                  "",
                  " It maps from an account to the number of delegations in the last",
                  " session in which they (re-)delegated."
                ]
              },
              {
                "name": "DelegatorState",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 349
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Delegation staking information.",
                  "",
                  " It maps from an account to its delegation details."
                ]
              },
              {
                "name": "CandidatePool",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 354
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The staking information for a candidate.",
                  "",
                  " It maps from an account to its information.",
                  " Moreover, it counts the number of candidates."
                ]
              },
              {
                "name": "CounterForCandidatePool",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "TotalCollatorStake",
                "modifier": "Default",
                "ty": {
                  "Plain": 358
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total funds locked to back the currently selected collators.",
                  " The sum of all collator and their delegator stakes.",
                  "",
                  " Note: There are more funds locked by this pallet, since the backing for",
                  " non collating candidates is not included in [TotalCollatorStake]."
                ]
              },
              {
                "name": "TopCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 359
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collator candidates with the highest amount of stake.",
                  "",
                  " Each time the stake of a collator is increased, it is checked whether",
                  " this pushes another candidate out of the list. When the stake is",
                  " reduced however, it is not checked if another candidate has more stake,",
                  " since this would require iterating over the entire [CandidatePool].",
                  "",
                  " There must always be more candidates than [MaxSelectedCandidates] so",
                  " that a collator can drop out of the collator set by reducing their",
                  " stake."
                ]
              },
              {
                "name": "Unstaking",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 361
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The funds waiting to be unstaked.",
                  "",
                  " It maps from accounts to all the funds addressed to them in the future",
                  " blocks."
                ]
              },
              {
                "name": "MaxCollatorCandidateStake",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The maximum amount a collator candidate can stake."
                ]
              },
              {
                "name": "ForceNewRound",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 240
          },
          "event": {
            "ty": 63
          },
          "constants": [
            {
              "name": "MinBlocksPerRound",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of blocks validation rounds can last."
              ]
            },
            {
              "name": "DefaultBlocksPerRound",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Default number of blocks validation rounds last, as set in the",
                " genesis configuration."
              ]
            },
            {
              "name": "StakeDuration",
              "ty": 4,
              "value": [
                35,
                0,
                0,
                0
              ],
              "docs": [
                " Number of blocks for which unstaked balance will still be locked",
                " before it can be unlocked by actively calling the extrinsic",
                " `unlock_unstaked`."
              ]
            },
            {
              "name": "ExitQueueDelay",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds a collator has to stay active after submitting a",
                " request to leave the set of collator candidates."
              ]
            },
            {
              "name": "MinCollators",
              "ty": 4,
              "value": [
                4,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of collators selected from the set of candidates at",
                " every validation round."
              ]
            },
            {
              "name": "MinRequiredCollators",
              "ty": 4,
              "value": [
                4,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of collators which cannot leave the network if there",
                " are no others."
              ]
            },
            {
              "name": "MaxDelegationsPerRound",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of delegations which can be made within the same",
                " round.",
                "",
                " NOTE: To prevent re-delegation-reward attacks, we should keep this",
                " to be one."
              ]
            },
            {
              "name": "MaxDelegatorsPerCollator",
              "ty": 4,
              "value": [
                25,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of delegators a single collator can have."
              ]
            },
            {
              "name": "MaxCollatorsPerDelegator",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of collators a single delegator can delegate."
              ]
            },
            {
              "name": "MaxTopCandidates",
              "ty": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the top candidates set."
              ]
            },
            {
              "name": "MinCollatorStake",
              "ty": 6,
              "value": [
                0,
                125,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any account to be elected as validator",
                " for a round."
              ]
            },
            {
              "name": "MinCollatorCandidateStake",
              "ty": 6,
              "value": [
                0,
                125,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any account to be added to the set of",
                " candidates."
              ]
            },
            {
              "name": "MinDelegation",
              "ty": 6,
              "value": [
                32,
                78,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any account to be able to delegate."
              ]
            },
            {
              "name": "MinDelegatorStake",
              "ty": 6,
              "value": [
                32,
                78,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any account to become a delegator."
              ]
            },
            {
              "name": "MaxUnstakeRequests",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Max number of concurrent active unstaking requests before",
                " unlocking.",
                "",
                " NOTE: To protect against irremovability of a candidate or delegator,",
                " we only allow for MaxUnstakeRequests - 1 many manual unstake",
                " requests. The last one serves as a placeholder for the cases of",
                " calling either `kick_delegator`, force_remove_candidate` or",
                " `execute_leave_candidates`. Otherwise, a user could max out their",
                " unstake requests and prevent themselves from being kicked from the",
                " set of candidates/delegators until they unlock their funds."
              ]
            },
            {
              "name": "PotId",
              "ty": 315,
              "value": [
                80,
                111,
                116,
                83,
                116,
                97,
                107,
                101
              ],
              "docs": [
                " Account Identifier from which the internal Pot is generated."
              ]
            }
          ],
          "error": {
            "ty": 365
          },
          "index": 23
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0
                ],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 243
                },
                "default": [
                  0
                ],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block number associated with the last parachain block."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 366
                },
                "default": [
                  0
                ],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "ty": {
                  "Plain": 245
                },
                "default": [
                  0
                ],
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 368
                },
                "default": [
                  0
                ],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 374
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 375
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 376
                },
                "default": [
                  0
                ],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 379
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 172
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 172
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 381
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0
                ],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 241
          },
          "event": {
            "ty": 64
          },
          "constants": [],
          "error": {
            "ty": 382
          },
          "index": 24
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 73
                },
                "default": [
                  100,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 25
        },
        {
          "name": "BlockReward",
          "storage": {
            "prefix": "BlockReward",
            "entries": [
              {
                "name": "RewardDistributionConfigStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 67
                },
                "default": [
                  2,
                  70,
                  195,
                  35,
                  2,
                  210,
                  73,
                  107,
                  2,
                  132,
                  215,
                  23,
                  2,
                  8,
                  175,
                  47,
                  2,
                  194,
                  235,
                  11,
                  2,
                  194,
                  235,
                  11
                ],
                "docs": []
              },
              {
                "name": "BlockIssueReward",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "MaxCurrencySupply",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 254
          },
          "event": {
            "ty": 66
          },
          "constants": [],
          "error": {
            "ty": 383
          },
          "index": 26
        },
        {
          "name": "StakingCoefficientRewardCalculator",
          "storage": {
            "prefix": "StakingCoefficientRewardCalculator",
            "entries": [
              {
                "name": "CoefficientConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 2
                },
                "default": [
                  0
                ],
                "docs": [
                  " Here, we setup this as u8 because the balance is u128, we might have overflow while",
                  " Reward rate configuration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 255
          },
          "event": {
            "ty": 70
          },
          "constants": [],
          "error": {
            "ty": 384
          },
          "index": 27
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 385
                },
                "default": [
                  0
                ],
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 391,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 392
                },
                "default": [
                  0
                ],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 395,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 73,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 396
                },
                "default": [
                  2,
                  0,
                  0,
                  0,
                  5,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  130,
                  26,
                  6,
                  0,
                  0,
                  8,
                  0,
                  7,
                  0,
                  200,
                  23,
                  168,
                  4,
                  2,
                  0,
                  4,
                  0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 11,
                    "value": 397
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 43
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": {
            "ty": 256
          },
          "event": {
            "ty": 71
          },
          "constants": [],
          "error": {
            "ty": 398
          },
          "index": 30
        },
        {
          "name": "PolkadotXcm",
          "storage": null,
          "calls": {
            "ty": 257
          },
          "event": {
            "ty": 74
          },
          "constants": [],
          "error": {
            "ty": 399
          },
          "index": 31
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": null,
          "event": {
            "ty": 128
          },
          "constants": [],
          "error": {
            "ty": 400
          },
          "index": 32
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "entries": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "ty": {
                  "Plain": 401
                },
                "default": [
                  7,
                  0,
                  228,
                  11,
                  84,
                  2,
                  2,
                  0,
                  4,
                  0
                ],
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 402
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 403
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 404
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The overweight messages."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              }
            ]
          },
          "calls": {
            "ty": 278
          },
          "event": {
            "ty": 129
          },
          "constants": [],
          "error": {
            "ty": 405
          },
          "index": 33
        },
        {
          "name": "Currencies",
          "storage": null,
          "calls": {
            "ty": 279
          },
          "event": null,
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 131,
              "value": [
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 406
          },
          "index": 34
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 131,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total issuance of a token type."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 407,
                    "value": 408
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 407,
                    "value": 411
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 407,
                    "value": 412
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 130
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 415
          },
          "index": 35
        },
        {
          "name": "XTokens",
          "storage": {
            "prefix": "XTokens",
            "entries": []
          },
          "calls": {
            "ty": 281
          },
          "event": {
            "ty": 133
          },
          "constants": [
            {
              "name": "SelfLocation",
              "ty": 76,
              "value": [
                1,
                1,
                0,
                65,
                31
              ],
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "ty": 9,
              "value": [
                2,
                132,
                215,
                23,
                0
              ],
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": {
            "ty": 416
          },
          "index": 36
        },
        {
          "name": "UnknownTokens",
          "storage": {
            "prefix": "UnknownTokens",
            "entries": [
              {
                "name": "ConcreteFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 417,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Concrete fungible balances under a given location and a concrete",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              },
              {
                "name": "AbstractFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 418,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Abstract fungible balances under a given location and a abstract",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 134
          },
          "constants": [],
          "error": {
            "ty": 419
          },
          "index": 37
        },
        {
          "name": "ZenlinkProtocol",
          "storage": {
            "prefix": "ZenlinkProtocol",
            "entries": [
              {
                "name": "ForeignLedger",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 420,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Foreign foreign storage",
                  " The number of units of assets held by any given account."
                ]
              },
              {
                "name": "ForeignMeta",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 136,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " TWOX-NOTE: `AssetId` is trusted, so this is safe."
                ]
              },
              {
                "name": "ForeignList",
                "modifier": "Default",
                "ty": {
                  "Plain": 137
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "KLast",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 421,
                    "value": 59
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88",
                  " Last unliquidated protocol fee;"
                ]
              },
              {
                "name": "FeeMeta",
                "modifier": "Default",
                "ty": {
                  "Plain": 422
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " (Option<fee_receiver>, fee_point)"
                ]
              },
              {
                "name": "LiquidityPairs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 421,
                    "value": 423
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PairStatuses",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 421,
                    "value": 424
                  }
                },
                "default": [
                  2
                ],
                "docs": [
                  " (T::AssetId, T::AssetId) -> PairStatus"
                ]
              },
              {
                "name": "BootstrapPersonalSupply",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 428,
                    "value": 427
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "BootstrapEndStatus",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 421,
                    "value": 424
                  }
                },
                "default": [
                  2
                ],
                "docs": [
                  " End status of bootstrap",
                  "",
                  " BootstrapEndStatus: map bootstrap pair => pairStatus"
                ]
              },
              {
                "name": "BootstrapRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 421,
                    "value": 429
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "BootstrapLimits",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 421,
                    "value": 429
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 285
          },
          "event": {
            "ty": 135
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                122,
                101,
                110,
                108,
                107,
                112,
                114,
                111
              ],
              "docs": [
                " This pallet id."
              ]
            }
          ],
          "error": {
            "ty": 430
          },
          "index": 38
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 431
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 433
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "ty": 287
          },
          "event": {
            "ty": 141
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 434
          },
          "index": 50
        },
        {
          "name": "PeaqDid",
          "storage": {
            "prefix": "PeaqDid",
            "entries": [
              {
                "name": "AttributeStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 144
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "OwnerStore",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 435,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 289
          },
          "event": {
            "ty": 142
          },
          "constants": [],
          "error": {
            "ty": 436
          },
          "index": 100
        },
        {
          "name": "Transaction",
          "storage": {
            "prefix": "Transaction",
            "entries": []
          },
          "calls": {
            "ty": 290
          },
          "event": {
            "ty": 145
          },
          "constants": [],
          "error": {
            "ty": 437
          },
          "index": 101
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 435,
                    "value": 438
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 291
          },
          "event": {
            "ty": 148
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                134,
                158,
                174,
                41,
                213,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                0,
                138,
                93,
                120,
                69,
                99,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 440
          },
          "index": 102
        },
        {
          "name": "PeaqRbac",
          "storage": {
            "prefix": "PeaqRbac",
            "entries": [
              {
                "name": "RoleStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 152
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Role2UserStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 155
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PermissionStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 152
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Permission2RoleStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 159
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "GroupStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 152
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Role2GroupStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 153
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "User2GroupStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 157
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "KeysLookUpStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 151
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 293
          },
          "event": {
            "ty": 150
          },
          "constants": [],
          "error": {
            "ty": 441
          },
          "index": 103
        },
        {
          "name": "PeaqStorage",
          "storage": {
            "prefix": "PeaqStorage",
            "entries": [
              {
                "name": "ItemStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 294
          },
          "event": {
            "ty": 161
          },
          "constants": [],
          "error": {
            "ty": 442
          },
          "index": 104
        },
        {
          "name": "PeaqMor",
          "storage": {
            "prefix": "PeaqMor",
            "entries": [
              {
                "name": "MachineRegister",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 1
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This storage is only a lookup table, to make sure, that each machine will be",
                  " registered only once (prevents registering same machine on different accounts).",
                  " Its purpose is not designed for interacting with machines on the network.",
                  " Key of the StorageMap will be the machine's account, value the owner's account."
                ]
              },
              {
                "name": "RewardsRecordStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 443
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Storage for recording incoming block-rewards. Its purpose is to be able to",
                  " calculate the amount (sum) of all collected block-rewards within the defined",
                  " time period.",
                  " u8 stores the next Vec-index to be written over.",
                  " Vec of balances of collected block-rewards."
                ]
              },
              {
                "name": "PeriodRewardStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This storage is for the sum over collected block-rewards. This amount will be",
                  " transfered to an owner's account, when he requests the online-reward for his",
                  " macine."
                ]
              },
              {
                "name": "MorConfigStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 163
                },
                "default": [
                  0,
                  0,
                  4,
                  4
                ],
                "docs": [
                  " This storage hols the configuration of this pallet. About configurable",
                  " parameters have a look at the MorConfig definition/description."
                ]
              }
            ]
          },
          "calls": {
            "ty": 295
          },
          "event": {
            "ty": 162
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "PotId",
              "ty": 315,
              "value": [
                80,
                111,
                116,
                77,
                99,
                104,
                79,
                119
              ],
              "docs": [
                " Account Identifier from which the internal Pot is generated."
              ]
            }
          ],
          "error": {
            "ty": 445
          },
          "index": 105
        }
      ],
      "extrinsic": {
        "ty": 446,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 454,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 455,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 456,
            "additional_signed": 12
          },
          {
            "identifier": "CheckMortality",
            "ty": 457,
            "additional_signed": 12
          },
          {
            "identifier": "CheckNonce",
            "ty": 459,
            "additional_signed": 35
          },
          {
            "identifier": "CheckWeight",
            "ty": 460,
            "additional_signed": 35
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 461,
            "additional_signed": 35
          }
        ]
      },
      "ty": 39
    }
  }
]