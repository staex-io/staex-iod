#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 39usize] = [
        "System",
        "RandomnessCollectiveFlip",
        "Timestamp",
        "Aura",
        "Balances",
        "TransactionPayment",
        "Sudo",
        "Contracts",
        "Utility",
        "Treasury",
        "Council",
        "Ethereum",
        "EVM",
        "DynamicFee",
        "BaseFee",
        "Authorship",
        "Session",
        "AuraExt",
        "ParachainStaking",
        "ParachainSystem",
        "ParachainInfo",
        "BlockReward",
        "StakingCoefficientRewardCalculator",
        "XcmpQueue",
        "PolkadotXcm",
        "CumulusXcm",
        "DmpQueue",
        "Currencies",
        "Tokens",
        "XTokens",
        "UnknownTokens",
        "ZenlinkProtocol",
        "Vesting",
        "PeaqDid",
        "Transaction",
        "Multisig",
        "PeaqRbac",
        "PeaqStorage",
        "PeaqMor",
    ];
    pub static RUNTIME_APIS: [&str; 0usize] = [];
    #[doc = r" The error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::peaq_dev_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
    #[doc = r" The outer error enum representing the DispatchError's Module variant."]
    pub type Error = runtime_types::peaq_dev_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use ::subxt::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {}
    }
    pub fn custom() -> CustomValuesApi {
        CustomValuesApi
    }
    pub struct CustomValuesApi;
    impl CustomValuesApi {}
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn contracts(&self) -> contracts::constants::ConstantsApi {
            contracts::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn council(&self) -> council::constants::ConstantsApi {
            council::constants::ConstantsApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::constants::ConstantsApi {
            parachain_staking::constants::ConstantsApi
        }
        pub fn currencies(&self) -> currencies::constants::ConstantsApi {
            currencies::constants::ConstantsApi
        }
        pub fn tokens(&self) -> tokens::constants::ConstantsApi {
            tokens::constants::ConstantsApi
        }
        pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi {
            x_tokens::constants::ConstantsApi
        }
        pub fn zenlink_protocol(&self) -> zenlink_protocol::constants::ConstantsApi {
            zenlink_protocol::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn peaq_mor(&self) -> peaq_mor::constants::ConstantsApi {
            peaq_mor::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi {
            randomness_collective_flip::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn contracts(&self) -> contracts::storage::StorageApi {
            contracts::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn ethereum(&self) -> ethereum::storage::StorageApi {
            ethereum::storage::StorageApi
        }
        pub fn evm(&self) -> evm::storage::StorageApi {
            evm::storage::StorageApi
        }
        pub fn dynamic_fee(&self) -> dynamic_fee::storage::StorageApi {
            dynamic_fee::storage::StorageApi
        }
        pub fn base_fee(&self) -> base_fee::storage::StorageApi {
            base_fee::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
            aura_ext::storage::StorageApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::storage::StorageApi {
            parachain_staking::storage::StorageApi
        }
        pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
            parachain_system::storage::StorageApi
        }
        pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
            parachain_info::storage::StorageApi
        }
        pub fn block_reward(&self) -> block_reward::storage::StorageApi {
            block_reward::storage::StorageApi
        }
        pub fn staking_coefficient_reward_calculator(
            &self,
        ) -> staking_coefficient_reward_calculator::storage::StorageApi {
            staking_coefficient_reward_calculator::storage::StorageApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
            xcmp_queue::storage::StorageApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi {
            dmp_queue::storage::StorageApi
        }
        pub fn tokens(&self) -> tokens::storage::StorageApi {
            tokens::storage::StorageApi
        }
        pub fn x_tokens(&self) -> x_tokens::storage::StorageApi {
            x_tokens::storage::StorageApi
        }
        pub fn unknown_tokens(&self) -> unknown_tokens::storage::StorageApi {
            unknown_tokens::storage::StorageApi
        }
        pub fn zenlink_protocol(&self) -> zenlink_protocol::storage::StorageApi {
            zenlink_protocol::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn peaq_did(&self) -> peaq_did::storage::StorageApi {
            peaq_did::storage::StorageApi
        }
        pub fn transaction(&self) -> transaction::storage::StorageApi {
            transaction::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn peaq_rbac(&self) -> peaq_rbac::storage::StorageApi {
            peaq_rbac::storage::StorageApi
        }
        pub fn peaq_storage(&self) -> peaq_storage::storage::StorageApi {
            peaq_storage::storage::StorageApi
        }
        pub fn peaq_mor(&self) -> peaq_mor::storage::StorageApi {
            peaq_mor::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn contracts(&self) -> contracts::calls::TransactionApi {
            contracts::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn ethereum(&self) -> ethereum::calls::TransactionApi {
            ethereum::calls::TransactionApi
        }
        pub fn evm(&self) -> evm::calls::TransactionApi {
            evm::calls::TransactionApi
        }
        pub fn dynamic_fee(&self) -> dynamic_fee::calls::TransactionApi {
            dynamic_fee::calls::TransactionApi
        }
        pub fn base_fee(&self) -> base_fee::calls::TransactionApi {
            base_fee::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::calls::TransactionApi {
            parachain_staking::calls::TransactionApi
        }
        pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
            parachain_system::calls::TransactionApi
        }
        pub fn block_reward(&self) -> block_reward::calls::TransactionApi {
            block_reward::calls::TransactionApi
        }
        pub fn staking_coefficient_reward_calculator(
            &self,
        ) -> staking_coefficient_reward_calculator::calls::TransactionApi {
            staking_coefficient_reward_calculator::calls::TransactionApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
            xcmp_queue::calls::TransactionApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
            polkadot_xcm::calls::TransactionApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi {
            dmp_queue::calls::TransactionApi
        }
        pub fn currencies(&self) -> currencies::calls::TransactionApi {
            currencies::calls::TransactionApi
        }
        pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi {
            x_tokens::calls::TransactionApi
        }
        pub fn zenlink_protocol(&self) -> zenlink_protocol::calls::TransactionApi {
            zenlink_protocol::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn peaq_did(&self) -> peaq_did::calls::TransactionApi {
            peaq_did::calls::TransactionApi
        }
        pub fn transaction(&self) -> transaction::calls::TransactionApi {
            transaction::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn peaq_rbac(&self) -> peaq_rbac::calls::TransactionApi {
            peaq_rbac::calls::TransactionApi
        }
        pub fn peaq_storage(&self) -> peaq_storage::calls::TransactionApi {
            peaq_storage::calls::TransactionApi
        }
        pub fn peaq_mor(&self) -> peaq_mor::calls::TransactionApi {
            peaq_mor::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                236u8, 83u8, 244u8, 92u8, 207u8, 239u8, 219u8, 189u8, 255u8, 90u8, 220u8, 23u8,
                179u8, 86u8, 9u8, 86u8, 205u8, 212u8, 97u8, 88u8, 162u8, 242u8, 197u8, 221u8,
                112u8, 62u8, 71u8, 221u8, 90u8, 225u8, 153u8, 173u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::frame_system::pallet::Error;
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Remark {
                    pub remark: remark::Remark,
                }
                pub mod remark {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetHeapPages {
                    pub pages: set_heap_pages::Pages,
                }
                pub mod set_heap_pages {
                    use super::runtime_types;
                    pub type Pages = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCode {
                    pub code: set_code::Code,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCodeWithoutChecks {
                    pub code: set_code_without_checks::Code,
                }
                pub mod set_code_without_checks {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStorage {
                    pub items: set_storage::Items,
                }
                pub mod set_storage {
                    use super::runtime_types;
                    pub type Items = ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillStorage {
                    pub keys: kill_storage::Keys,
                }
                pub mod kill_storage {
                    use super::runtime_types;
                    pub type Keys = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillPrefix {
                    pub prefix: kill_prefix::Prefix,
                    pub subkeys: kill_prefix::Subkeys,
                }
                pub mod kill_prefix {
                    use super::runtime_types;
                    pub type Prefix = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Subkeys = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemarkWithEvent {
                    pub remark: remark_with_event::Remark,
                }
                pub mod remark_with_event {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn remark(
                    &self,
                    remark: types::remark::Remark,
                ) -> ::subxt::tx::Payload<types::Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                pub fn set_heap_pages(
                    &self,
                    pages: types::set_heap_pages::Pages,
                ) -> ::subxt::tx::Payload<types::SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                pub fn set_code(
                    &self,
                    code: types::set_code::Code,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                pub fn set_code_without_checks(
                    &self,
                    code: types::set_code_without_checks::Code,
                ) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                pub fn set_storage(
                    &self,
                    items: types::set_storage::Items,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                pub fn kill_storage(
                    &self,
                    keys: types::kill_storage::Keys,
                ) -> ::subxt::tx::Payload<types::KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                pub fn kill_prefix(
                    &self,
                    prefix: types::kill_prefix::Prefix,
                    subkeys: types::kill_prefix::Subkeys,
                ) -> ::subxt::tx::Payload<types::KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                pub fn remark_with_event(
                    &self,
                    remark: types::remark_with_event::Remark,
                ) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: extrinsic_success::DispatchInfo,
            }
            pub mod extrinsic_success {
                use super::runtime_types;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExtrinsicFailed {
                pub dispatch_error: extrinsic_failed::DispatchError,
                pub dispatch_info: extrinsic_failed::DispatchInfo,
            }
            pub mod extrinsic_failed {
                use super::runtime_types;
                pub type DispatchError = runtime_types::sp_runtime::DispatchError;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewAccount {
                pub account: new_account::Account,
            }
            pub mod new_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KilledAccount {
                pub account: killed_account::Account,
            }
            pub mod killed_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Remarked {
                pub sender: remarked::Sender,
                pub hash: remarked::Hash,
            }
            pub mod remarked {
                use super::runtime_types;
                pub type Sender = ::subxt::utils::AccountId32;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account {
                    use super::runtime_types;
                    pub type Account = runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod extrinsic_count {
                    use super::runtime_types;
                    pub type ExtrinsicCount = ::core::primitive::u32;
                }
                pub mod block_weight {
                    use super::runtime_types;
                    pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                }
                pub mod all_extrinsics_len {
                    use super::runtime_types;
                    pub type AllExtrinsicsLen = ::core::primitive::u32;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod extrinsic_data {
                    use super::runtime_types;
                    pub type ExtrinsicData = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod number {
                    use super::runtime_types;
                    pub type Number = ::core::primitive::u32;
                }
                pub mod parent_hash {
                    use super::runtime_types;
                    pub type ParentHash = ::subxt::utils::H256;
                }
                pub mod digest {
                    use super::runtime_types;
                    pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
                }
                pub mod events {
                    use super::runtime_types;
                    pub type Events = ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::peaq_dev_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >;
                }
                pub mod event_count {
                    use super::runtime_types;
                    pub type EventCount = ::core::primitive::u32;
                }
                pub mod event_topics {
                    use super::runtime_types;
                    pub type EventTopics =
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod last_runtime_upgrade {
                    use super::runtime_types;
                    pub type LastRuntimeUpgrade =
                        runtime_types::frame_system::LastRuntimeUpgradeInfo;
                }
                pub mod upgraded_to_u32_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToU32RefCount = ::core::primitive::bool;
                }
                pub mod upgraded_to_triple_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToTripleRefCount = ::core::primitive::bool;
                }
                pub mod execution_phase {
                    use super::runtime_types;
                    pub type ExecutionPhase = runtime_types::frame_system::Phase;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![],
                        [
                            14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
                            175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
                            124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
                        ],
                    )
                }
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
                            175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
                            124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
                        ],
                    )
                }
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_count::ExtrinsicCount,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_weight::BlockWeight,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::all_extrinsics_len::AllExtrinsicsLen,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                pub fn extrinsic_data_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::extrinsic_data::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::number::Number,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::parent_hash::ParentHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::events::Events,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            47u8, 203u8, 237u8, 206u8, 124u8, 154u8, 175u8, 6u8, 104u8, 48u8, 85u8,
                            170u8, 140u8, 117u8, 182u8, 140u8, 28u8, 24u8, 116u8, 218u8, 182u8,
                            86u8, 172u8, 103u8, 245u8, 19u8, 239u8, 99u8, 188u8, 30u8, 151u8, 48u8,
                        ],
                    )
                }
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_count::EventCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                pub fn event_topics_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::event_topics::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_runtime_upgrade::LastRuntimeUpgrade,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_phase::ExecutionPhase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
                            228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
                            72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
                            165u8,
                        ],
                    )
                }
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod randomness_collective_flip {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod random_material {
                    use super::runtime_types;
                    pub type RandomMaterial =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::H256,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn random_material(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::random_material::RandomMaterial,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RandomnessCollectiveFlip",
                        "RandomMaterial",
                        vec![],
                        [
                            195u8, 232u8, 244u8, 162u8, 110u8, 137u8, 66u8, 57u8, 51u8, 221u8,
                            143u8, 38u8, 51u8, 183u8, 105u8, 245u8, 175u8, 13u8, 33u8, 192u8, 53u8,
                            16u8, 161u8, 76u8, 219u8, 177u8, 144u8, 192u8, 96u8, 166u8, 117u8,
                            247u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Set {
                    #[codec(compact)]
                    pub now: set::Now,
                }
                pub mod set {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set(&self, now: types::set::Now) -> ::subxt::tx::Payload<types::Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod now {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                pub mod did_update {
                    use super::runtime_types;
                    pub type DidUpdate = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::now::Now,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::did_update::DidUpdate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAllowDeath {
                    pub dest: transfer_allow_death::Dest,
                    #[codec(compact)]
                    pub value: transfer_allow_death::Value,
                }
                pub mod transfer_allow_death {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAllowDeath {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_allow_death";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBalanceDeprecated {
                    pub who: set_balance_deprecated::Who,
                    #[codec(compact)]
                    pub new_free: set_balance_deprecated::NewFree,
                    #[codec(compact)]
                    pub old_reserved: set_balance_deprecated::OldReserved,
                }
                pub mod set_balance_deprecated {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type NewFree = ::core::primitive::u128;
                    pub type OldReserved = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBalanceDeprecated {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "set_balance_deprecated";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    pub source: force_transfer::Source,
                    pub dest: force_transfer::Dest,
                    #[codec(compact)]
                    pub value: force_transfer::Value,
                }
                pub mod force_transfer {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    pub dest: transfer_keep_alive::Dest,
                    #[codec(compact)]
                    pub value: transfer_keep_alive::Value,
                }
                pub mod transfer_keep_alive {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAll {
                    pub dest: transfer_all::Dest,
                    pub keep_alive: transfer_all::KeepAlive,
                }
                pub mod transfer_all {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnreserve {
                    pub who: force_unreserve::Who,
                    pub amount: force_unreserve::Amount,
                }
                pub mod force_unreserve {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpgradeAccounts {
                    pub who: upgrade_accounts::Who,
                }
                pub mod upgrade_accounts {
                    use super::runtime_types;
                    pub type Who = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpgradeAccounts {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "upgrade_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub dest: transfer::Dest,
                    #[codec(compact)]
                    pub value: transfer::Value,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetBalance {
                    pub who: force_set_balance::Who,
                    #[codec(compact)]
                    pub new_free: force_set_balance::NewFree,
                }
                pub mod force_set_balance {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type NewFree = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_set_balance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn transfer_allow_death(
                    &self,
                    dest: types::transfer_allow_death::Dest,
                    value: types::transfer_allow_death::Value,
                ) -> ::subxt::tx::Payload<types::TransferAllowDeath> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_allow_death",
                        types::TransferAllowDeath { dest, value },
                        [
                            24u8, 176u8, 111u8, 60u8, 103u8, 161u8, 139u8, 10u8, 197u8, 207u8,
                            140u8, 212u8, 166u8, 50u8, 47u8, 150u8, 83u8, 180u8, 86u8, 4u8, 159u8,
                            84u8, 195u8, 71u8, 204u8, 109u8, 233u8, 23u8, 10u8, 156u8, 209u8,
                            153u8,
                        ],
                    )
                }
                pub fn set_balance_deprecated(
                    &self,
                    who: types::set_balance_deprecated::Who,
                    new_free: types::set_balance_deprecated::NewFree,
                    old_reserved: types::set_balance_deprecated::OldReserved,
                ) -> ::subxt::tx::Payload<types::SetBalanceDeprecated> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "set_balance_deprecated",
                        types::SetBalanceDeprecated {
                            who,
                            new_free,
                            old_reserved,
                        },
                        [
                            37u8, 252u8, 153u8, 117u8, 175u8, 86u8, 206u8, 115u8, 114u8, 75u8,
                            226u8, 183u8, 222u8, 208u8, 208u8, 16u8, 90u8, 82u8, 101u8, 241u8,
                            82u8, 161u8, 116u8, 175u8, 200u8, 113u8, 154u8, 220u8, 224u8, 245u8,
                            112u8, 215u8,
                        ],
                    )
                }
                pub fn force_transfer(
                    &self,
                    source: types::force_transfer::Source,
                    dest: types::force_transfer::Dest,
                    value: types::force_transfer::Value,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            23u8, 7u8, 44u8, 138u8, 180u8, 140u8, 216u8, 52u8, 198u8, 3u8, 225u8,
                            116u8, 47u8, 26u8, 61u8, 163u8, 55u8, 64u8, 113u8, 250u8, 192u8, 16u8,
                            228u8, 228u8, 85u8, 255u8, 100u8, 128u8, 245u8, 132u8, 84u8, 186u8,
                        ],
                    )
                }
                pub fn transfer_keep_alive(
                    &self,
                    dest: types::transfer_keep_alive::Dest,
                    value: types::transfer_keep_alive::Value,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            196u8, 51u8, 121u8, 239u8, 68u8, 97u8, 174u8, 26u8, 21u8, 9u8, 111u8,
                            224u8, 189u8, 35u8, 106u8, 30u8, 83u8, 184u8, 234u8, 174u8, 27u8,
                            197u8, 40u8, 126u8, 197u8, 92u8, 201u8, 253u8, 144u8, 175u8, 8u8,
                            215u8,
                        ],
                    )
                }
                pub fn transfer_all(
                    &self,
                    dest: types::transfer_all::Dest,
                    keep_alive: types::transfer_all::KeepAlive,
                ) -> ::subxt::tx::Payload<types::TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            13u8, 46u8, 127u8, 231u8, 179u8, 61u8, 45u8, 188u8, 195u8, 251u8,
                            146u8, 25u8, 138u8, 19u8, 52u8, 112u8, 148u8, 241u8, 134u8, 145u8,
                            97u8, 9u8, 199u8, 172u8, 229u8, 239u8, 67u8, 185u8, 128u8, 36u8, 134u8,
                            122u8,
                        ],
                    )
                }
                pub fn force_unreserve(
                    &self,
                    who: types::force_unreserve::Who,
                    amount: types::force_unreserve::Amount,
                ) -> ::subxt::tx::Payload<types::ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            176u8, 105u8, 20u8, 111u8, 49u8, 253u8, 22u8, 225u8, 0u8, 81u8, 221u8,
                            39u8, 62u8, 22u8, 95u8, 12u8, 21u8, 251u8, 179u8, 31u8, 104u8, 23u8,
                            34u8, 216u8, 119u8, 205u8, 133u8, 196u8, 182u8, 113u8, 36u8, 93u8,
                        ],
                    )
                }
                pub fn upgrade_accounts(
                    &self,
                    who: types::upgrade_accounts::Who,
                ) -> ::subxt::tx::Payload<types::UpgradeAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "upgrade_accounts",
                        types::UpgradeAccounts { who },
                        [
                            66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
                            233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
                            214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
                        ],
                    )
                }
                pub fn transfer(
                    &self,
                    dest: types::transfer::Dest,
                    value: types::transfer::Value,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer",
                        types::Transfer { dest, value },
                        [
                            228u8, 253u8, 44u8, 208u8, 33u8, 44u8, 33u8, 42u8, 114u8, 57u8, 107u8,
                            6u8, 127u8, 116u8, 15u8, 205u8, 122u8, 172u8, 64u8, 108u8, 169u8,
                            241u8, 190u8, 221u8, 248u8, 171u8, 236u8, 129u8, 120u8, 147u8, 49u8,
                            95u8,
                        ],
                    )
                }
                pub fn force_set_balance(
                    &self,
                    who: types::force_set_balance::Who,
                    new_free: types::force_set_balance::NewFree,
                ) -> ::subxt::tx::Payload<types::ForceSetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_set_balance",
                        types::ForceSetBalance { who, new_free },
                        [
                            101u8, 181u8, 86u8, 32u8, 61u8, 75u8, 34u8, 164u8, 142u8, 250u8, 7u8,
                            218u8, 125u8, 57u8, 98u8, 222u8, 147u8, 26u8, 115u8, 185u8, 190u8,
                            172u8, 12u8, 212u8, 132u8, 80u8, 253u8, 69u8, 26u8, 116u8, 197u8,
                            203u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Endowed {
                pub account: endowed::Account,
                pub free_balance: endowed::FreeBalance,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type FreeBalance = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DustLost {
                pub account: dust_lost::Account,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transfer {
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BalanceSet {
                pub who: balance_set::Who,
                pub free: balance_set::Free,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Free = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Reserved {
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unreserved {
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveRepatriated {
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub destination_status: reserve_repatriated::DestinationStatus,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
                pub type DestinationStatus =
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deposit {
                pub who: deposit::Who,
                pub amount: deposit::Amount,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Withdraw {
                pub who: withdraw::Who,
                pub amount: withdraw::Amount,
            }
            pub mod withdraw {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slashed {
                pub who: slashed::Who,
                pub amount: slashed::Amount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Minted {
                pub who: minted::Who,
                pub amount: minted::Amount,
            }
            pub mod minted {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Minted {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Burned {
                pub who: burned::Who,
                pub amount: burned::Amount,
            }
            pub mod burned {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Suspended {
                pub who: suspended::Who,
                pub amount: suspended::Amount,
            }
            pub mod suspended {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Suspended {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Suspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Restored {
                pub who: restored::Who,
                pub amount: restored::Amount,
            }
            pub mod restored {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Restored {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Restored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Upgraded {
                pub who: upgraded::Who,
            }
            pub mod upgraded {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Upgraded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Upgraded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Issued {
                pub amount: issued::Amount,
            }
            pub mod issued {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Rescinded {
                pub amount: rescinded::Amount,
            }
            pub mod rescinded {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Rescinded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Locked {
                pub who: locked::Who,
                pub amount: locked::Amount,
            }
            pub mod locked {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Locked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unlocked {
                pub who: unlocked::Who,
                pub amount: unlocked::Amount,
            }
            pub mod unlocked {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Frozen {
                pub who: frozen::Who,
                pub amount: frozen::Amount,
            }
            pub mod frozen {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Thawed {
                pub who: thawed::Who,
                pub amount: thawed::Amount,
            }
            pub mod thawed {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Thawed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u128;
                }
                pub mod inactive_issuance {
                    use super::runtime_types;
                    pub type InactiveIssuance = ::core::primitive::u128;
                }
                pub mod account {
                    use super::runtime_types;
                    pub type Account =
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::types::BalanceLock<
                                ::core::primitive::u128,
                            >,
                        >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod holds {
                    use super::runtime_types;
                    pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod freezes {
                    use super::runtime_types;
                    pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
                            171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
                            255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
                            185u8,
                        ],
                    )
                }
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inactive_issuance::InactiveIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
                            249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
                            30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
                        ],
                    )
                }
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![],
                        [
                            213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
                            90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
                            18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
                        ],
                    )
                }
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
                            90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
                            18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
                        ],
                    )
                }
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![],
                        [
                            10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
                            167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
                            13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
                        ],
                    )
                }
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
                            167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
                            13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
                        ],
                    )
                }
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![],
                        [
                            112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
                            140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
                            106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
                        ],
                    )
                }
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
                            140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
                            106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
                        ],
                    )
                }
                pub fn holds_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::holds::Holds,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![],
                        [
                            53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
                            95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
                            231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
                            202u8,
                        ],
                    )
                }
                pub fn holds(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::holds::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::holds::Holds,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            53u8, 126u8, 215u8, 237u8, 42u8, 223u8, 188u8, 150u8, 230u8, 107u8,
                            95u8, 24u8, 26u8, 235u8, 158u8, 149u8, 193u8, 191u8, 10u8, 194u8,
                            231u8, 59u8, 35u8, 167u8, 186u8, 89u8, 43u8, 126u8, 215u8, 117u8, 1u8,
                            202u8,
                        ],
                    )
                }
                pub fn freezes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::freezes::Freezes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![],
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
                pub fn freezes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::freezes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::freezes::Freezes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_holds(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxHolds",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_freezes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxFreezes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionFeePaid {
                pub who: transaction_fee_paid::Who,
                pub actual_fee: transaction_fee_paid::ActualFee,
                pub tip: transaction_fee_paid::Tip,
            }
            pub mod transaction_fee_paid {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type ActualFee = ::core::primitive::u128;
                pub type Tip = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod next_fee_multiplier {
                    use super::runtime_types;
                    pub type NextFeeMultiplier =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_fee_multiplier::NextFeeMultiplier,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::storage_version::StorageVersion,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_sudo::pallet::Error;
        pub type Call = runtime_types::pallet_sudo::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Sudo {
                    pub call: ::std::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoUncheckedWeight {
                    pub call: ::std::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKey {
                    pub new: set_key::New,
                }
                pub mod set_key {
                    use super::runtime_types;
                    pub type New = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoAs {
                    pub who: sudo_as::Who,
                    pub call: ::std::boxed::Box<sudo_as::Call>,
                }
                pub mod sudo_as {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn sudo(&self, call: types::sudo::Call) -> ::subxt::tx::Payload<types::Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            58u8, 83u8, 103u8, 244u8, 90u8, 88u8, 214u8, 170u8, 63u8, 94u8, 83u8,
                            23u8, 145u8, 233u8, 111u8, 133u8, 61u8, 170u8, 21u8, 193u8, 130u8,
                            66u8, 18u8, 59u8, 68u8, 65u8, 110u8, 245u8, 255u8, 30u8, 39u8, 6u8,
                        ],
                    )
                }
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::tx::Payload<types::SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            240u8, 73u8, 64u8, 104u8, 250u8, 192u8, 230u8, 209u8, 134u8, 225u8,
                            32u8, 162u8, 197u8, 66u8, 196u8, 238u8, 105u8, 161u8, 13u8, 52u8, 35u8,
                            2u8, 145u8, 244u8, 50u8, 225u8, 162u8, 200u8, 156u8, 68u8, 13u8, 229u8,
                        ],
                    )
                }
                pub fn set_key(
                    &self,
                    new: types::set_key::New,
                ) -> ::subxt::tx::Payload<types::SetKey> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            247u8, 148u8, 125u8, 134u8, 90u8, 138u8, 216u8, 117u8, 246u8, 75u8,
                            85u8, 242u8, 229u8, 203u8, 227u8, 242u8, 166u8, 28u8, 247u8, 215u8,
                            35u8, 13u8, 243u8, 13u8, 4u8, 48u8, 175u8, 192u8, 63u8, 142u8, 13u8,
                            94u8,
                        ],
                    )
                }
                pub fn sudo_as(
                    &self,
                    who: types::sudo_as::Who,
                    call: types::sudo_as::Call,
                ) -> ::subxt::tx::Payload<types::SudoAs> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            123u8, 129u8, 120u8, 238u8, 194u8, 61u8, 72u8, 207u8, 79u8, 24u8, 40u8,
                            87u8, 150u8, 40u8, 115u8, 53u8, 163u8, 59u8, 14u8, 124u8, 106u8, 220u8,
                            90u8, 139u8, 14u8, 124u8, 6u8, 177u8, 21u8, 118u8, 207u8, 231u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Sudid {
                pub sudo_result: sudid::SudoResult,
            }
            pub mod sudid {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KeyChanged {
                pub old_sudoer: key_changed::OldSudoer,
            }
            pub mod key_changed {
                use super::runtime_types;
                pub type OldSudoer = ::core::option::Option<::subxt::utils::AccountId32>;
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SudoAsDone {
                pub sudo_result: sudo_as_done::SudoResult,
            }
            pub mod sudo_as_done {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod key {
                    use super::runtime_types;
                    pub type Key = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn key(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key::Key,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            72u8, 14u8, 225u8, 162u8, 205u8, 247u8, 227u8, 105u8, 116u8, 57u8, 4u8,
                            31u8, 84u8, 137u8, 227u8, 228u8, 133u8, 245u8, 206u8, 227u8, 117u8,
                            36u8, 252u8, 151u8, 107u8, 15u8, 180u8, 4u8, 4u8, 152u8, 195u8, 144u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod contracts {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_contracts::pallet::Error;
        pub type Call = runtime_types::pallet_contracts::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CallOldWeight {
                    pub dest: call_old_weight::Dest,
                    #[codec(compact)]
                    pub value: call_old_weight::Value,
                    #[codec(compact)]
                    pub gas_limit: call_old_weight::GasLimit,
                    pub storage_deposit_limit: call_old_weight::StorageDepositLimit,
                    pub data: call_old_weight::Data,
                }
                pub mod call_old_weight {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for CallOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "call_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateWithCodeOldWeight {
                    #[codec(compact)]
                    pub value: instantiate_with_code_old_weight::Value,
                    #[codec(compact)]
                    pub gas_limit: instantiate_with_code_old_weight::GasLimit,
                    pub storage_deposit_limit:
                        instantiate_with_code_old_weight::StorageDepositLimit,
                    pub code: instantiate_with_code_old_weight::Code,
                    pub data: instantiate_with_code_old_weight::Data,
                    pub salt: instantiate_with_code_old_weight::Salt,
                }
                pub mod instantiate_with_code_old_weight {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Salt = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateWithCodeOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_with_code_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateOldWeight {
                    #[codec(compact)]
                    pub value: instantiate_old_weight::Value,
                    #[codec(compact)]
                    pub gas_limit: instantiate_old_weight::GasLimit,
                    pub storage_deposit_limit: instantiate_old_weight::StorageDepositLimit,
                    pub code_hash: instantiate_old_weight::CodeHash,
                    pub data: instantiate_old_weight::Data,
                    pub salt: instantiate_old_weight::Salt,
                }
                pub mod instantiate_old_weight {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type CodeHash = ::subxt::utils::H256;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Salt = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UploadCode {
                    pub code: upload_code::Code,
                    pub storage_deposit_limit: upload_code::StorageDepositLimit,
                    pub determinism: upload_code::Determinism,
                }
                pub mod upload_code {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type Determinism = runtime_types::pallet_contracts::wasm::Determinism;
                }
                impl ::subxt::blocks::StaticExtrinsic for UploadCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "upload_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveCode {
                    pub code_hash: remove_code::CodeHash,
                }
                pub mod remove_code {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "remove_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCode {
                    pub dest: set_code::Dest,
                    pub code_hash: set_code::CodeHash,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type CodeHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Call {
                    pub dest: call::Dest,
                    #[codec(compact)]
                    pub value: call::Value,
                    pub gas_limit: call::GasLimit,
                    pub storage_deposit_limit: call::StorageDepositLimit,
                    pub data: call::Data,
                }
                pub mod call {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = runtime_types::sp_weights::weight_v2::Weight;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Call {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateWithCode {
                    #[codec(compact)]
                    pub value: instantiate_with_code::Value,
                    pub gas_limit: instantiate_with_code::GasLimit,
                    pub storage_deposit_limit: instantiate_with_code::StorageDepositLimit,
                    pub code: instantiate_with_code::Code,
                    pub data: instantiate_with_code::Data,
                    pub salt: instantiate_with_code::Salt,
                }
                pub mod instantiate_with_code {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = runtime_types::sp_weights::weight_v2::Weight;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Salt = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateWithCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_with_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Instantiate {
                    #[codec(compact)]
                    pub value: instantiate::Value,
                    pub gas_limit: instantiate::GasLimit,
                    pub storage_deposit_limit: instantiate::StorageDepositLimit,
                    pub code_hash: instantiate::CodeHash,
                    pub data: instantiate::Data,
                    pub salt: instantiate::Salt,
                }
                pub mod instantiate {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type GasLimit = runtime_types::sp_weights::weight_v2::Weight;
                    pub type StorageDepositLimit = ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >;
                    pub type CodeHash = ::subxt::utils::H256;
                    pub type Data = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Salt = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Instantiate {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn call_old_weight(
                    &self,
                    dest: types::call_old_weight::Dest,
                    value: types::call_old_weight::Value,
                    gas_limit: types::call_old_weight::GasLimit,
                    storage_deposit_limit: types::call_old_weight::StorageDepositLimit,
                    data: types::call_old_weight::Data,
                ) -> ::subxt::tx::Payload<types::CallOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "call_old_weight",
                        types::CallOldWeight {
                            dest,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            data,
                        },
                        [
                            75u8, 234u8, 197u8, 66u8, 203u8, 143u8, 141u8, 75u8, 194u8, 210u8,
                            69u8, 231u8, 109u8, 187u8, 6u8, 19u8, 152u8, 188u8, 131u8, 124u8, 73u8,
                            147u8, 74u8, 136u8, 225u8, 205u8, 228u8, 183u8, 26u8, 228u8, 0u8,
                            172u8,
                        ],
                    )
                }
                pub fn instantiate_with_code_old_weight(
                    &self,
                    value: types::instantiate_with_code_old_weight::Value,
                    gas_limit: types::instantiate_with_code_old_weight::GasLimit,
                    storage_deposit_limit : types :: instantiate_with_code_old_weight :: StorageDepositLimit,
                    code: types::instantiate_with_code_old_weight::Code,
                    data: types::instantiate_with_code_old_weight::Data,
                    salt: types::instantiate_with_code_old_weight::Salt,
                ) -> ::subxt::tx::Payload<types::InstantiateWithCodeOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_with_code_old_weight",
                        types::InstantiateWithCodeOldWeight {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code,
                            data,
                            salt,
                        },
                        [
                            48u8, 125u8, 188u8, 220u8, 158u8, 122u8, 158u8, 63u8, 0u8, 249u8,
                            164u8, 200u8, 199u8, 2u8, 21u8, 168u8, 84u8, 158u8, 120u8, 17u8, 82u8,
                            54u8, 115u8, 185u8, 69u8, 236u8, 64u8, 176u8, 187u8, 201u8, 230u8,
                            98u8,
                        ],
                    )
                }
                pub fn instantiate_old_weight(
                    &self,
                    value: types::instantiate_old_weight::Value,
                    gas_limit: types::instantiate_old_weight::GasLimit,
                    storage_deposit_limit: types::instantiate_old_weight::StorageDepositLimit,
                    code_hash: types::instantiate_old_weight::CodeHash,
                    data: types::instantiate_old_weight::Data,
                    salt: types::instantiate_old_weight::Salt,
                ) -> ::subxt::tx::Payload<types::InstantiateOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_old_weight",
                        types::InstantiateOldWeight {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code_hash,
                            data,
                            salt,
                        },
                        [
                            145u8, 119u8, 37u8, 211u8, 172u8, 215u8, 72u8, 110u8, 71u8, 230u8,
                            212u8, 56u8, 78u8, 221u8, 239u8, 159u8, 110u8, 219u8, 71u8, 10u8,
                            248u8, 112u8, 237u8, 188u8, 198u8, 0u8, 28u8, 255u8, 147u8, 152u8,
                            162u8, 83u8,
                        ],
                    )
                }
                pub fn upload_code(
                    &self,
                    code: types::upload_code::Code,
                    storage_deposit_limit: types::upload_code::StorageDepositLimit,
                    determinism: types::upload_code::Determinism,
                ) -> ::subxt::tx::Payload<types::UploadCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "upload_code",
                        types::UploadCode {
                            code,
                            storage_deposit_limit,
                            determinism,
                        },
                        [
                            159u8, 17u8, 234u8, 83u8, 162u8, 68u8, 117u8, 80u8, 64u8, 251u8, 31u8,
                            38u8, 214u8, 227u8, 235u8, 74u8, 97u8, 72u8, 83u8, 197u8, 7u8, 57u8,
                            212u8, 217u8, 219u8, 139u8, 182u8, 248u8, 92u8, 91u8, 56u8, 2u8,
                        ],
                    )
                }
                pub fn remove_code(
                    &self,
                    code_hash: types::remove_code::CodeHash,
                ) -> ::subxt::tx::Payload<types::RemoveCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "remove_code",
                        types::RemoveCode { code_hash },
                        [
                            99u8, 184u8, 12u8, 208u8, 123u8, 158u8, 140u8, 21u8, 190u8, 152u8,
                            95u8, 79u8, 217u8, 131u8, 161u8, 160u8, 21u8, 56u8, 167u8, 27u8, 90u8,
                            255u8, 75u8, 0u8, 133u8, 111u8, 119u8, 217u8, 157u8, 67u8, 238u8, 69u8,
                        ],
                    )
                }
                pub fn set_code(
                    &self,
                    dest: types::set_code::Dest,
                    code_hash: types::set_code::CodeHash,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "set_code",
                        types::SetCode { dest, code_hash },
                        [
                            38u8, 146u8, 68u8, 45u8, 22u8, 25u8, 163u8, 173u8, 185u8, 179u8, 20u8,
                            142u8, 110u8, 88u8, 131u8, 111u8, 106u8, 20u8, 219u8, 57u8, 103u8,
                            220u8, 211u8, 37u8, 68u8, 33u8, 116u8, 21u8, 64u8, 105u8, 202u8, 1u8,
                        ],
                    )
                }
                pub fn call(
                    &self,
                    dest: types::call::Dest,
                    value: types::call::Value,
                    gas_limit: types::call::GasLimit,
                    storage_deposit_limit: types::call::StorageDepositLimit,
                    data: types::call::Data,
                ) -> ::subxt::tx::Payload<types::Call> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "call",
                        types::Call {
                            dest,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            data,
                        },
                        [
                            45u8, 147u8, 61u8, 153u8, 44u8, 86u8, 154u8, 238u8, 72u8, 62u8, 38u8,
                            66u8, 76u8, 217u8, 60u8, 75u8, 140u8, 10u8, 45u8, 25u8, 0u8, 167u8,
                            150u8, 45u8, 159u8, 227u8, 220u8, 75u8, 236u8, 127u8, 234u8, 218u8,
                        ],
                    )
                }
                pub fn instantiate_with_code(
                    &self,
                    value: types::instantiate_with_code::Value,
                    gas_limit: types::instantiate_with_code::GasLimit,
                    storage_deposit_limit: types::instantiate_with_code::StorageDepositLimit,
                    code: types::instantiate_with_code::Code,
                    data: types::instantiate_with_code::Data,
                    salt: types::instantiate_with_code::Salt,
                ) -> ::subxt::tx::Payload<types::InstantiateWithCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_with_code",
                        types::InstantiateWithCode {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code,
                            data,
                            salt,
                        },
                        [
                            34u8, 182u8, 171u8, 163u8, 86u8, 205u8, 184u8, 72u8, 117u8, 214u8,
                            11u8, 24u8, 73u8, 6u8, 158u8, 16u8, 5u8, 212u8, 209u8, 64u8, 66u8,
                            98u8, 47u8, 14u8, 96u8, 132u8, 22u8, 37u8, 202u8, 148u8, 83u8, 125u8,
                        ],
                    )
                }
                pub fn instantiate(
                    &self,
                    value: types::instantiate::Value,
                    gas_limit: types::instantiate::GasLimit,
                    storage_deposit_limit: types::instantiate::StorageDepositLimit,
                    code_hash: types::instantiate::CodeHash,
                    data: types::instantiate::Data,
                    salt: types::instantiate::Salt,
                ) -> ::subxt::tx::Payload<types::Instantiate> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate",
                        types::Instantiate {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code_hash,
                            data,
                            salt,
                        },
                        [
                            221u8, 142u8, 55u8, 187u8, 6u8, 98u8, 228u8, 231u8, 38u8, 81u8, 222u8,
                            86u8, 205u8, 122u8, 32u8, 236u8, 237u8, 50u8, 201u8, 140u8, 111u8,
                            23u8, 242u8, 212u8, 118u8, 212u8, 98u8, 247u8, 166u8, 196u8, 206u8,
                            232u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_contracts::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Instantiated {
                pub deployer: instantiated::Deployer,
                pub contract: instantiated::Contract,
            }
            pub mod instantiated {
                use super::runtime_types;
                pub type Deployer = ::subxt::utils::AccountId32;
                pub type Contract = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Instantiated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Instantiated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Terminated {
                pub contract: terminated::Contract,
                pub beneficiary: terminated::Beneficiary,
            }
            pub mod terminated {
                use super::runtime_types;
                pub type Contract = ::subxt::utils::AccountId32;
                pub type Beneficiary = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Terminated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Terminated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeStored {
                pub code_hash: code_stored::CodeHash,
            }
            pub mod code_stored {
                use super::runtime_types;
                pub type CodeHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for CodeStored {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "CodeStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ContractEmitted {
                pub contract: contract_emitted::Contract,
                pub data: contract_emitted::Data,
            }
            pub mod contract_emitted {
                use super::runtime_types;
                pub type Contract = ::subxt::utils::AccountId32;
                pub type Data = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for ContractEmitted {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "ContractEmitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeRemoved {
                pub code_hash: code_removed::CodeHash,
            }
            pub mod code_removed {
                use super::runtime_types;
                pub type CodeHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for CodeRemoved {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "CodeRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ContractCodeUpdated {
                pub contract: contract_code_updated::Contract,
                pub new_code_hash: contract_code_updated::NewCodeHash,
                pub old_code_hash: contract_code_updated::OldCodeHash,
            }
            pub mod contract_code_updated {
                use super::runtime_types;
                pub type Contract = ::subxt::utils::AccountId32;
                pub type NewCodeHash = ::subxt::utils::H256;
                pub type OldCodeHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for ContractCodeUpdated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "ContractCodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Called {
                pub caller: called::Caller,
                pub contract: called::Contract,
            }
            pub mod called {
                use super::runtime_types;
                pub type Caller = runtime_types::pallet_contracts::Origin<
                    runtime_types::peaq_dev_runtime::Runtime,
                >;
                pub type Contract = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Called {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Called";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegateCalled {
                pub contract: delegate_called::Contract,
                pub code_hash: delegate_called::CodeHash,
            }
            pub mod delegate_called {
                use super::runtime_types;
                pub type Contract = ::subxt::utils::AccountId32;
                pub type CodeHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for DelegateCalled {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "DelegateCalled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pristine_code {
                    use super::runtime_types;
                    pub type PristineCode =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod code_storage {
                    use super::runtime_types;
                    pub type CodeStorage = runtime_types::pallet_contracts::wasm::PrefabWasmModule;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod owner_info_of {
                    use super::runtime_types;
                    pub type OwnerInfoOf = runtime_types::pallet_contracts::wasm::OwnerInfo;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod nonce {
                    use super::runtime_types;
                    pub type Nonce = ::core::primitive::u64;
                }
                pub mod contract_info_of {
                    use super::runtime_types;
                    pub type ContractInfoOf =
                        runtime_types::pallet_contracts::storage::ContractInfo;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod deletion_queue {
                    use super::runtime_types;
                    pub type DeletionQueue =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod deletion_queue_counter {
                    use super::runtime_types;
                    pub type DeletionQueueCounter =
                        runtime_types::pallet_contracts::storage::DeletionQueueManager;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn pristine_code_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pristine_code::PristineCode,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "PristineCode",
                        vec![],
                        [
                            6u8, 31u8, 218u8, 40u8, 203u8, 188u8, 155u8, 242u8, 11u8, 64u8, 196u8,
                            23u8, 70u8, 117u8, 21u8, 42u8, 68u8, 254u8, 90u8, 190u8, 155u8, 117u8,
                            153u8, 198u8, 119u8, 35u8, 52u8, 217u8, 209u8, 144u8, 1u8, 66u8,
                        ],
                    )
                }
                pub fn pristine_code(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pristine_code::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pristine_code::PristineCode,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "PristineCode",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            6u8, 31u8, 218u8, 40u8, 203u8, 188u8, 155u8, 242u8, 11u8, 64u8, 196u8,
                            23u8, 70u8, 117u8, 21u8, 42u8, 68u8, 254u8, 90u8, 190u8, 155u8, 117u8,
                            153u8, 198u8, 119u8, 35u8, 52u8, 217u8, 209u8, 144u8, 1u8, 66u8,
                        ],
                    )
                }
                pub fn code_storage_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::code_storage::CodeStorage,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "CodeStorage",
                        vec![],
                        [
                            230u8, 97u8, 217u8, 216u8, 118u8, 84u8, 50u8, 207u8, 146u8, 86u8, 56u8,
                            193u8, 100u8, 197u8, 227u8, 134u8, 116u8, 127u8, 182u8, 197u8, 167u8,
                            27u8, 77u8, 213u8, 98u8, 200u8, 192u8, 234u8, 144u8, 164u8, 96u8,
                            213u8,
                        ],
                    )
                }
                pub fn code_storage(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::code_storage::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::code_storage::CodeStorage,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "CodeStorage",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            230u8, 97u8, 217u8, 216u8, 118u8, 84u8, 50u8, 207u8, 146u8, 86u8, 56u8,
                            193u8, 100u8, 197u8, 227u8, 134u8, 116u8, 127u8, 182u8, 197u8, 167u8,
                            27u8, 77u8, 213u8, 98u8, 200u8, 192u8, 234u8, 144u8, 164u8, 96u8,
                            213u8,
                        ],
                    )
                }
                pub fn owner_info_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner_info_of::OwnerInfoOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "OwnerInfoOf",
                        vec![],
                        [
                            169u8, 209u8, 222u8, 46u8, 247u8, 1u8, 102u8, 141u8, 158u8, 59u8, 88u8,
                            73u8, 144u8, 208u8, 201u8, 121u8, 38u8, 166u8, 2u8, 130u8, 200u8,
                            172u8, 75u8, 116u8, 191u8, 107u8, 154u8, 160u8, 12u8, 125u8, 203u8,
                            214u8,
                        ],
                    )
                }
                pub fn owner_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::owner_info_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner_info_of::OwnerInfoOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "OwnerInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            169u8, 209u8, 222u8, 46u8, 247u8, 1u8, 102u8, 141u8, 158u8, 59u8, 88u8,
                            73u8, 144u8, 208u8, 201u8, 121u8, 38u8, 166u8, 2u8, 130u8, 200u8,
                            172u8, 75u8, 116u8, 191u8, 107u8, 154u8, 160u8, 12u8, 125u8, 203u8,
                            214u8,
                        ],
                    )
                }
                pub fn nonce(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::nonce::Nonce,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "Nonce",
                        vec![],
                        [
                            47u8, 101u8, 89u8, 252u8, 98u8, 25u8, 178u8, 154u8, 17u8, 57u8, 185u8,
                            10u8, 133u8, 94u8, 73u8, 160u8, 137u8, 150u8, 97u8, 119u8, 8u8, 146u8,
                            149u8, 146u8, 212u8, 60u8, 141u8, 24u8, 124u8, 28u8, 57u8, 19u8,
                        ],
                    )
                }
                pub fn contract_info_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::contract_info_of::ContractInfoOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "ContractInfoOf",
                        vec![],
                        [
                            248u8, 123u8, 214u8, 11u8, 141u8, 157u8, 174u8, 206u8, 251u8, 239u8,
                            184u8, 167u8, 218u8, 140u8, 245u8, 159u8, 190u8, 198u8, 167u8, 196u8,
                            205u8, 229u8, 6u8, 194u8, 88u8, 26u8, 57u8, 94u8, 140u8, 76u8, 8u8,
                            144u8,
                        ],
                    )
                }
                pub fn contract_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::contract_info_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::contract_info_of::ContractInfoOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "ContractInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            248u8, 123u8, 214u8, 11u8, 141u8, 157u8, 174u8, 206u8, 251u8, 239u8,
                            184u8, 167u8, 218u8, 140u8, 245u8, 159u8, 190u8, 198u8, 167u8, 196u8,
                            205u8, 229u8, 6u8, 194u8, 88u8, 26u8, 57u8, 94u8, 140u8, 76u8, 8u8,
                            144u8,
                        ],
                    )
                }
                pub fn deletion_queue_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::deletion_queue::DeletionQueue,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueue",
                        vec![],
                        [
                            233u8, 193u8, 191u8, 44u8, 151u8, 46u8, 124u8, 188u8, 132u8, 227u8,
                            107u8, 210u8, 37u8, 110u8, 172u8, 95u8, 12u8, 114u8, 63u8, 83u8, 60u8,
                            163u8, 58u8, 174u8, 160u8, 47u8, 198u8, 156u8, 216u8, 182u8, 65u8,
                            229u8,
                        ],
                    )
                }
                pub fn deletion_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::deletion_queue::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::deletion_queue::DeletionQueue,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            233u8, 193u8, 191u8, 44u8, 151u8, 46u8, 124u8, 188u8, 132u8, 227u8,
                            107u8, 210u8, 37u8, 110u8, 172u8, 95u8, 12u8, 114u8, 63u8, 83u8, 60u8,
                            163u8, 58u8, 174u8, 160u8, 47u8, 198u8, 156u8, 216u8, 182u8, 65u8,
                            229u8,
                        ],
                    )
                }
                pub fn deletion_queue_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::deletion_queue_counter::DeletionQueueCounter,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueueCounter",
                        vec![],
                        [
                            124u8, 63u8, 32u8, 109u8, 8u8, 113u8, 105u8, 172u8, 87u8, 88u8, 244u8,
                            191u8, 252u8, 196u8, 10u8, 137u8, 101u8, 87u8, 124u8, 220u8, 178u8,
                            155u8, 163u8, 214u8, 116u8, 121u8, 129u8, 129u8, 173u8, 76u8, 188u8,
                            41u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn schedule(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::pallet_contracts::schedule::Schedule>
                {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "Schedule",
                        [
                            119u8, 197u8, 243u8, 217u8, 75u8, 55u8, 180u8, 85u8, 195u8, 88u8, 88u8,
                            112u8, 21u8, 225u8, 222u8, 47u8, 50u8, 194u8, 79u8, 168u8, 252u8,
                            247u8, 65u8, 205u8, 23u8, 6u8, 224u8, 167u8, 2u8, 115u8, 179u8, 204u8,
                        ],
                    )
                }
                pub fn deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn default_deposit_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DefaultDepositLimit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn deposit_per_item(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DepositPerItem",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_code_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxCodeLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_storage_key_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxStorageKeyLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn unsafe_unstable_interface(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "UnsafeUnstableInterface",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                pub fn max_debug_buffer_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxDebugBufferLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Batch {
                    pub calls: batch::Calls,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Calls = ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsDerivative {
                    pub index: as_derivative::Index,
                    pub call: ::std::boxed::Box<as_derivative::Call>,
                }
                pub mod as_derivative {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u16;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BatchAll {
                    pub calls: batch_all::Calls,
                }
                pub mod batch_all {
                    use super::runtime_types;
                    pub type Calls = ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchAs {
                    pub as_origin: ::std::boxed::Box<dispatch_as::AsOrigin>,
                    pub call: ::std::boxed::Box<dispatch_as::Call>,
                }
                pub mod dispatch_as {
                    use super::runtime_types;
                    pub type AsOrigin = runtime_types::peaq_dev_runtime::OriginCaller;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceBatch {
                    pub calls: force_batch::Calls,
                }
                pub mod force_batch {
                    use super::runtime_types;
                    pub type Calls = ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WithWeight {
                    pub call: ::std::boxed::Box<with_weight::Call>,
                    pub weight: with_weight::Weight,
                }
                pub mod with_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn batch(
                    &self,
                    calls: types::batch::Calls,
                ) -> ::subxt::tx::Payload<types::Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            110u8, 53u8, 237u8, 135u8, 188u8, 255u8, 50u8, 176u8, 136u8, 65u8,
                            80u8, 191u8, 197u8, 161u8, 82u8, 200u8, 54u8, 188u8, 173u8, 208u8,
                            140u8, 243u8, 118u8, 37u8, 59u8, 220u8, 76u8, 30u8, 244u8, 119u8,
                            135u8, 226u8,
                        ],
                    )
                }
                pub fn as_derivative(
                    &self,
                    index: types::as_derivative::Index,
                    call: types::as_derivative::Call,
                ) -> ::subxt::tx::Payload<types::AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            130u8, 57u8, 208u8, 1u8, 179u8, 101u8, 112u8, 227u8, 74u8, 19u8, 24u8,
                            39u8, 205u8, 234u8, 249u8, 195u8, 106u8, 128u8, 177u8, 97u8, 0u8,
                            122u8, 53u8, 34u8, 126u8, 32u8, 40u8, 113u8, 182u8, 27u8, 175u8, 142u8,
                        ],
                    )
                }
                pub fn batch_all(
                    &self,
                    calls: types::batch_all::Calls,
                ) -> ::subxt::tx::Payload<types::BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            114u8, 105u8, 177u8, 176u8, 31u8, 90u8, 0u8, 255u8, 35u8, 14u8, 176u8,
                            51u8, 81u8, 39u8, 55u8, 144u8, 122u8, 15u8, 43u8, 232u8, 210u8, 26u8,
                            41u8, 228u8, 136u8, 130u8, 216u8, 38u8, 233u8, 48u8, 171u8, 2u8,
                        ],
                    )
                }
                pub fn dispatch_as(
                    &self,
                    as_origin: types::dispatch_as::AsOrigin,
                    call: types::dispatch_as::Call,
                ) -> ::subxt::tx::Payload<types::DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            210u8, 27u8, 252u8, 210u8, 173u8, 78u8, 106u8, 5u8, 73u8, 158u8, 171u8,
                            159u8, 11u8, 116u8, 248u8, 68u8, 112u8, 3u8, 84u8, 15u8, 158u8, 131u8,
                            25u8, 5u8, 130u8, 42u8, 178u8, 245u8, 237u8, 172u8, 52u8, 24u8,
                        ],
                    )
                }
                pub fn force_batch(
                    &self,
                    calls: types::force_batch::Calls,
                ) -> ::subxt::tx::Payload<types::ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            141u8, 205u8, 212u8, 3u8, 15u8, 60u8, 137u8, 106u8, 200u8, 33u8, 199u8,
                            29u8, 253u8, 236u8, 0u8, 69u8, 93u8, 60u8, 117u8, 117u8, 139u8, 31u8,
                            53u8, 63u8, 116u8, 67u8, 118u8, 12u8, 230u8, 212u8, 111u8, 214u8,
                        ],
                    )
                }
                pub fn with_weight(
                    &self,
                    call: types::with_weight::Call,
                    weight: types::with_weight::Weight,
                ) -> ::subxt::tx::Payload<types::WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            83u8, 255u8, 156u8, 138u8, 199u8, 42u8, 224u8, 221u8, 36u8, 140u8,
                            62u8, 91u8, 99u8, 65u8, 27u8, 0u8, 6u8, 211u8, 131u8, 189u8, 100u8,
                            216u8, 228u8, 210u8, 107u8, 171u8, 68u8, 170u8, 174u8, 69u8, 170u8,
                            114u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BatchInterrupted {
                pub index: batch_interrupted::Index,
                pub error: batch_interrupted::Error,
            }
            pub mod batch_interrupted {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ItemFailed {
                pub error: item_failed::Error,
            }
            pub mod item_failed {
                use super::runtime_types;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DispatchedAs {
                pub result: dispatched_as::Result,
            }
            pub mod dispatched_as {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_treasury::pallet::Error;
        pub type Call = runtime_types::pallet_treasury::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeSpend {
                    #[codec(compact)]
                    pub value: propose_spend::Value,
                    pub beneficiary: propose_spend::Beneficiary,
                }
                pub mod propose_spend {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type Beneficiary = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "propose_spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RejectProposal {
                    #[codec(compact)]
                    pub proposal_id: reject_proposal::ProposalId,
                }
                pub mod reject_proposal {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for RejectProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "reject_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveProposal {
                    #[codec(compact)]
                    pub proposal_id: approve_proposal::ProposalId,
                }
                pub mod approve_proposal {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "approve_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Spend {
                    #[codec(compact)]
                    pub amount: spend::Amount,
                    pub beneficiary: spend::Beneficiary,
                }
                pub mod spend {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                    pub type Beneficiary = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for Spend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveApproval {
                    #[codec(compact)]
                    pub proposal_id: remove_approval::ProposalId,
                }
                pub mod remove_approval {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveApproval {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "remove_approval";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn propose_spend(
                    &self,
                    value: types::propose_spend::Value,
                    beneficiary: types::propose_spend::Beneficiary,
                ) -> ::subxt::tx::Payload<types::ProposeSpend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "propose_spend",
                        types::ProposeSpend { value, beneficiary },
                        [
                            82u8, 0u8, 77u8, 68u8, 172u8, 126u8, 179u8, 217u8, 173u8, 214u8, 69u8,
                            227u8, 243u8, 252u8, 100u8, 30u8, 205u8, 80u8, 99u8, 57u8, 63u8, 59u8,
                            142u8, 81u8, 38u8, 22u8, 243u8, 165u8, 131u8, 193u8, 135u8, 171u8,
                        ],
                    )
                }
                pub fn reject_proposal(
                    &self,
                    proposal_id: types::reject_proposal::ProposalId,
                ) -> ::subxt::tx::Payload<types::RejectProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "reject_proposal",
                        types::RejectProposal { proposal_id },
                        [
                            18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
                            40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
                            225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
                        ],
                    )
                }
                pub fn approve_proposal(
                    &self,
                    proposal_id: types::approve_proposal::ProposalId,
                ) -> ::subxt::tx::Payload<types::ApproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "approve_proposal",
                        types::ApproveProposal { proposal_id },
                        [
                            154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
                            199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
                            65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
                        ],
                    )
                }
                pub fn spend(
                    &self,
                    amount: types::spend::Amount,
                    beneficiary: types::spend::Beneficiary,
                ) -> ::subxt::tx::Payload<types::Spend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "spend",
                        types::Spend {
                            amount,
                            beneficiary,
                        },
                        [
                            127u8, 149u8, 250u8, 91u8, 236u8, 214u8, 148u8, 99u8, 110u8, 217u8,
                            128u8, 254u8, 102u8, 8u8, 203u8, 245u8, 101u8, 171u8, 176u8, 191u8,
                            167u8, 223u8, 97u8, 235u8, 86u8, 18u8, 40u8, 41u8, 19u8, 116u8, 1u8,
                            13u8,
                        ],
                    )
                }
                pub fn remove_approval(
                    &self,
                    proposal_id: types::remove_approval::ProposalId,
                ) -> ::subxt::tx::Payload<types::RemoveApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "remove_approval",
                        types::RemoveApproval { proposal_id },
                        [
                            180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
                            197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
                            250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
                            196u8, 100u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposed {
                pub proposal_index: proposed::ProposalIndex,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Spending {
                pub budget_remaining: spending::BudgetRemaining,
            }
            pub mod spending {
                use super::runtime_types;
                pub type BudgetRemaining = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Awarded {
                pub proposal_index: awarded::ProposalIndex,
                pub award: awarded::Award,
                pub account: awarded::Account,
            }
            pub mod awarded {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Award = ::core::primitive::u128;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Rejected {
                pub proposal_index: rejected::ProposalIndex,
                pub slashed: rejected::Slashed,
            }
            pub mod rejected {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Slashed = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Burnt {
                pub burnt_funds: burnt::BurntFunds,
            }
            pub mod burnt {
                use super::runtime_types;
                pub type BurntFunds = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Rollover {
                pub rollover_balance: rollover::RolloverBalance,
            }
            pub mod rollover {
                use super::runtime_types;
                pub type RolloverBalance = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deposit {
                pub value: deposit::Value,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Value = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SpendApproved {
                pub proposal_index: spend_approved::ProposalIndex,
                pub amount: spend_approved::Amount,
                pub beneficiary: spend_approved::Beneficiary,
            }
            pub mod spend_approved {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
                pub type Beneficiary = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UpdatedInactive {
                pub reactivated: updated_inactive::Reactivated,
                pub deactivated: updated_inactive::Deactivated,
            }
            pub mod updated_inactive {
                use super::runtime_types;
                pub type Reactivated = ::core::primitive::u128;
                pub type Deactivated = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals = runtime_types::pallet_treasury::Proposal<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod deactivated {
                    use super::runtime_types;
                    pub type Deactivated = ::core::primitive::u128;
                }
                pub mod approvals {
                    use super::runtime_types;
                    pub type Approvals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u32,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_count::ProposalCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                pub fn proposals_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposals::Proposals,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        vec![],
                        [
                            207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
                            205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
                            213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
                            55u8,
                        ],
                    )
                }
                pub fn proposals(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::proposals::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposals::Proposals,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            207u8, 135u8, 145u8, 146u8, 48u8, 10u8, 252u8, 40u8, 20u8, 115u8,
                            205u8, 41u8, 173u8, 83u8, 115u8, 46u8, 106u8, 40u8, 130u8, 157u8,
                            213u8, 87u8, 45u8, 23u8, 14u8, 167u8, 99u8, 208u8, 153u8, 163u8, 141u8,
                            55u8,
                        ],
                    )
                }
                pub fn deactivated(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::deactivated::Deactivated,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Deactivated",
                        vec![],
                        [
                            120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
                            170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
                            208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
                            123u8,
                        ],
                    )
                }
                pub fn approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::approvals::Approvals,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
                            14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
                            187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBond",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn burn(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "Burn",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_collective::pallet::Error;
        pub type Call = runtime_types::pallet_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: set_members::NewMembers,
                    pub prime: set_members::Prime,
                    pub old_count: set_members::OldCount,
                }
                pub mod set_members {
                    use super::runtime_types;
                    pub type NewMembers = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Prime = ::core::option::Option<::subxt::utils::AccountId32>;
                    pub type OldCount = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<execute::Proposal>,
                    #[codec(compact)]
                    pub length_bound: execute::LengthBound,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: propose::Threshold,
                    pub proposal: ::std::boxed::Box<propose::Proposal>,
                    #[codec(compact)]
                    pub length_bound: propose::LengthBound,
                }
                pub mod propose {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u32;
                    pub type Proposal = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: vote::Proposal,
                    #[codec(compact)]
                    pub index: vote::Index,
                    pub approve: vote::Approve,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type Proposal = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type Approve = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: disapprove_proposal::ProposalHash,
                }
                pub mod disapprove_proposal {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: close::ProposalHash,
                    #[codec(compact)]
                    pub index: close::Index,
                    pub proposal_weight_bound: close::ProposalWeightBound,
                    #[codec(compact)]
                    pub length_bound: close::LengthBound,
                }
                pub mod close {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_members(
                    &self,
                    new_members: types::set_members::NewMembers,
                    prime: types::set_members::Prime,
                    old_count: types::set_members::OldCount,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
                            141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
                            142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
                            61u8,
                        ],
                    )
                }
                pub fn execute(
                    &self,
                    proposal: types::execute::Proposal,
                    length_bound: types::execute::LengthBound,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            147u8, 5u8, 101u8, 176u8, 171u8, 108u8, 95u8, 35u8, 208u8, 110u8,
                            105u8, 58u8, 64u8, 218u8, 220u8, 202u8, 105u8, 154u8, 97u8, 144u8,
                            241u8, 147u8, 178u8, 17u8, 211u8, 194u8, 252u8, 155u8, 199u8, 146u8,
                            18u8, 84u8,
                        ],
                    )
                }
                pub fn propose(
                    &self,
                    threshold: types::propose::Threshold,
                    proposal: types::propose::Proposal,
                    length_bound: types::propose::LengthBound,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            14u8, 10u8, 1u8, 1u8, 77u8, 200u8, 169u8, 227u8, 33u8, 172u8, 59u8,
                            79u8, 130u8, 172u8, 238u8, 163u8, 7u8, 60u8, 94u8, 127u8, 64u8, 56u8,
                            200u8, 115u8, 54u8, 141u8, 21u8, 20u8, 154u8, 32u8, 211u8, 15u8,
                        ],
                    )
                }
                pub fn vote(
                    &self,
                    proposal: types::vote::Proposal,
                    index: types::vote::Index,
                    approve: types::vote::Approve,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: types::disapprove_proposal::ProposalHash,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                pub fn close(
                    &self,
                    proposal_hash: types::close::ProposalHash,
                    index: types::close::Index,
                    proposal_weight_bound: types::close::ProposalWeightBound,
                    length_bound: types::close::LengthBound,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposed {
                pub account: proposed::Account,
                pub proposal_index: proposed::ProposalIndex,
                pub proposal_hash: proposed::ProposalHash,
                pub threshold: proposed::Threshold,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Threshold = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Voted {
                pub account: voted::Account,
                pub proposal_hash: voted::ProposalHash,
                pub voted: voted::Voted,
                pub yes: voted::Yes,
                pub no: voted::No,
            }
            pub mod voted {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Voted = ::core::primitive::bool;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Approved {
                pub proposal_hash: approved::ProposalHash,
            }
            pub mod approved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Disapproved {
                pub proposal_hash: disapproved::ProposalHash,
            }
            pub mod disapproved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Executed {
                pub proposal_hash: executed::ProposalHash,
                pub result: executed::Result,
            }
            pub mod executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MemberExecuted {
                pub proposal_hash: member_executed::ProposalHash,
                pub result: member_executed::Result,
            }
            pub mod member_executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Closed {
                pub proposal_hash: closed::ProposalHash,
                pub yes: closed::Yes,
                pub no: closed::No,
            }
            pub mod closed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::H256,
                        >;
                }
                pub mod proposal_of {
                    use super::runtime_types;
                    pub type ProposalOf = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod voting {
                    use super::runtime_types;
                    pub type Voting = runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod members {
                    use super::runtime_types;
                    pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposals::Proposals,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                pub fn proposal_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_of::ProposalOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        vec![],
                        [
                            126u8, 23u8, 104u8, 134u8, 111u8, 90u8, 69u8, 6u8, 59u8, 150u8, 0u8,
                            210u8, 225u8, 66u8, 172u8, 124u8, 233u8, 173u8, 222u8, 198u8, 156u8,
                            20u8, 44u8, 0u8, 192u8, 183u8, 135u8, 74u8, 204u8, 45u8, 193u8, 71u8,
                        ],
                    )
                }
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::proposal_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_of::ProposalOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            126u8, 23u8, 104u8, 134u8, 111u8, 90u8, 69u8, 6u8, 59u8, 150u8, 0u8,
                            210u8, 225u8, 66u8, 172u8, 124u8, 233u8, 173u8, 222u8, 198u8, 156u8,
                            20u8, 44u8, 0u8, 192u8, 183u8, 135u8, 74u8, 204u8, 45u8, 193u8, 71u8,
                        ],
                    )
                }
                pub fn voting_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::voting::Voting,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        vec![],
                        [
                            109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
                            4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
                            137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
                            132u8,
                        ],
                    )
                }
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::voting::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::voting::Voting,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
                            4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
                            137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
                            132u8,
                        ],
                    )
                }
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_count::ProposalCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::members::Members,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Members",
                        vec![],
                        [
                            16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
                            81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
                            90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
                        ],
                    )
                }
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prime::Prime,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Council",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_ethereum::pallet::Error;
        pub type Call = runtime_types::pallet_ethereum::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transact {
                    pub transaction: transact::Transaction,
                }
                pub mod transact {
                    use super::runtime_types;
                    pub type Transaction = runtime_types::ethereum::transaction::TransactionV2;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transact {
                    const PALLET: &'static str = "Ethereum";
                    const CALL: &'static str = "transact";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn transact(
                    &self,
                    transaction: types::transact::Transaction,
                ) -> ::subxt::tx::Payload<types::Transact> {
                    ::subxt::tx::Payload::new_static(
                        "Ethereum",
                        "transact",
                        types::Transact { transaction },
                        [
                            124u8, 9u8, 75u8, 222u8, 225u8, 49u8, 255u8, 53u8, 207u8, 220u8, 198u8,
                            31u8, 26u8, 150u8, 238u8, 140u8, 230u8, 77u8, 248u8, 1u8, 97u8, 222u8,
                            9u8, 32u8, 217u8, 160u8, 195u8, 4u8, 69u8, 210u8, 251u8, 109u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_ethereum::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Executed {
                pub from: executed::From,
                pub to: executed::To,
                pub transaction_hash: executed::TransactionHash,
                pub exit_reason: executed::ExitReason,
                pub extra_data: executed::ExtraData,
            }
            pub mod executed {
                use super::runtime_types;
                pub type From = ::subxt::utils::H160;
                pub type To = ::subxt::utils::H160;
                pub type TransactionHash = ::subxt::utils::H256;
                pub type ExitReason = runtime_types::evm_core::error::ExitReason;
                pub type ExtraData = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Ethereum";
                const EVENT: &'static str = "Executed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pending {
                    use super::runtime_types;
                    pub type Pending = ::std::vec::Vec<(
                        runtime_types::ethereum::transaction::TransactionV2,
                        runtime_types::fp_rpc::TransactionStatus,
                        runtime_types::ethereum::receipt::ReceiptV3,
                    )>;
                }
                pub mod current_block {
                    use super::runtime_types;
                    pub type CurrentBlock = runtime_types::ethereum::block::Block<
                        runtime_types::ethereum::transaction::TransactionV2,
                    >;
                }
                pub mod current_receipts {
                    use super::runtime_types;
                    pub type CurrentReceipts =
                        ::std::vec::Vec<runtime_types::ethereum::receipt::ReceiptV3>;
                }
                pub mod current_transaction_statuses {
                    use super::runtime_types;
                    pub type CurrentTransactionStatuses =
                        ::std::vec::Vec<runtime_types::fp_rpc::TransactionStatus>;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::utils::H256;
                    pub type Param0 = runtime_types::primitive_types::U256;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn pending(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending::Pending,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "Pending",
                        vec![],
                        [
                            249u8, 60u8, 121u8, 166u8, 91u8, 128u8, 146u8, 87u8, 240u8, 165u8,
                            236u8, 61u8, 65u8, 140u8, 14u8, 203u8, 169u8, 102u8, 126u8, 247u8,
                            245u8, 3u8, 166u8, 188u8, 144u8, 74u8, 13u8, 2u8, 244u8, 49u8, 223u8,
                            198u8,
                        ],
                    )
                }
                pub fn current_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_block::CurrentBlock,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentBlock",
                        vec![],
                        [
                            54u8, 128u8, 41u8, 16u8, 65u8, 25u8, 184u8, 85u8, 192u8, 220u8, 208u8,
                            92u8, 166u8, 132u8, 223u8, 50u8, 252u8, 112u8, 236u8, 217u8, 108u8,
                            166u8, 131u8, 224u8, 141u8, 59u8, 248u8, 42u8, 197u8, 96u8, 240u8,
                            88u8,
                        ],
                    )
                }
                pub fn current_receipts(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_receipts::CurrentReceipts,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentReceipts",
                        vec![],
                        [
                            97u8, 46u8, 228u8, 135u8, 133u8, 148u8, 98u8, 3u8, 128u8, 26u8, 83u8,
                            12u8, 33u8, 135u8, 88u8, 205u8, 147u8, 176u8, 13u8, 113u8, 148u8, 48u8,
                            31u8, 200u8, 105u8, 224u8, 201u8, 225u8, 157u8, 108u8, 55u8, 209u8,
                        ],
                    )
                }
                pub fn current_transaction_statuses(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_transaction_statuses::CurrentTransactionStatuses,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentTransactionStatuses",
                        vec![],
                        [
                            29u8, 20u8, 106u8, 243u8, 226u8, 102u8, 121u8, 20u8, 222u8, 53u8, 99u8,
                            68u8, 173u8, 238u8, 167u8, 165u8, 192u8, 192u8, 230u8, 46u8, 231u8,
                            88u8, 144u8, 159u8, 3u8, 171u8, 72u8, 125u8, 68u8, 66u8, 125u8, 165u8,
                        ],
                    )
                }
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "BlockHash",
                        vec![],
                        [
                            131u8, 87u8, 201u8, 82u8, 203u8, 241u8, 176u8, 149u8, 39u8, 243u8,
                            227u8, 1u8, 86u8, 62u8, 6u8, 231u8, 55u8, 6u8, 212u8, 96u8, 207u8,
                            73u8, 56u8, 204u8, 215u8, 227u8, 48u8, 249u8, 67u8, 137u8, 139u8, 76u8,
                        ],
                    )
                }
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            131u8, 87u8, 201u8, 82u8, 203u8, 241u8, 176u8, 149u8, 39u8, 243u8,
                            227u8, 1u8, 86u8, 62u8, 6u8, 231u8, 55u8, 6u8, 212u8, 96u8, 207u8,
                            73u8, 56u8, 204u8, 215u8, 227u8, 48u8, 249u8, 67u8, 137u8, 139u8, 76u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod evm {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_evm::pallet::Error;
        pub type Call = runtime_types::pallet_evm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Withdraw {
                    pub address: withdraw::Address,
                    pub value: withdraw::Value,
                }
                pub mod withdraw {
                    use super::runtime_types;
                    pub type Address = ::subxt::utils::H160;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for Withdraw {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "withdraw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Call {
                    pub source: call::Source,
                    pub target: call::Target,
                    pub input: call::Input,
                    pub value: call::Value,
                    pub gas_limit: call::GasLimit,
                    pub max_fee_per_gas: call::MaxFeePerGas,
                    pub max_priority_fee_per_gas: call::MaxPriorityFeePerGas,
                    pub nonce: call::Nonce,
                    pub access_list: call::AccessList,
                }
                pub mod call {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::H160;
                    pub type Target = ::subxt::utils::H160;
                    pub type Input = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Value = runtime_types::primitive_types::U256;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type MaxFeePerGas = runtime_types::primitive_types::U256;
                    pub type MaxPriorityFeePerGas =
                        ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type Nonce = ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type AccessList = ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Call {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    pub source: create::Source,
                    pub init: create::Init,
                    pub value: create::Value,
                    pub gas_limit: create::GasLimit,
                    pub max_fee_per_gas: create::MaxFeePerGas,
                    pub max_priority_fee_per_gas: create::MaxPriorityFeePerGas,
                    pub nonce: create::Nonce,
                    pub access_list: create::AccessList,
                }
                pub mod create {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::H160;
                    pub type Init = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Value = runtime_types::primitive_types::U256;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type MaxFeePerGas = runtime_types::primitive_types::U256;
                    pub type MaxPriorityFeePerGas =
                        ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type Nonce = ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type AccessList = ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create2 {
                    pub source: create2::Source,
                    pub init: create2::Init,
                    pub salt: create2::Salt,
                    pub value: create2::Value,
                    pub gas_limit: create2::GasLimit,
                    pub max_fee_per_gas: create2::MaxFeePerGas,
                    pub max_priority_fee_per_gas: create2::MaxPriorityFeePerGas,
                    pub nonce: create2::Nonce,
                    pub access_list: create2::AccessList,
                }
                pub mod create2 {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::H160;
                    pub type Init = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Salt = ::subxt::utils::H256;
                    pub type Value = runtime_types::primitive_types::U256;
                    pub type GasLimit = ::core::primitive::u64;
                    pub type MaxFeePerGas = runtime_types::primitive_types::U256;
                    pub type MaxPriorityFeePerGas =
                        ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type Nonce = ::core::option::Option<runtime_types::primitive_types::U256>;
                    pub type AccessList = ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Create2 {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "create2";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn withdraw(
                    &self,
                    address: types::withdraw::Address,
                    value: types::withdraw::Value,
                ) -> ::subxt::tx::Payload<types::Withdraw> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "withdraw",
                        types::Withdraw { address, value },
                        [
                            62u8, 162u8, 234u8, 15u8, 176u8, 61u8, 183u8, 203u8, 241u8, 10u8,
                            202u8, 26u8, 45u8, 116u8, 38u8, 44u8, 32u8, 57u8, 208u8, 55u8, 182u8,
                            92u8, 136u8, 133u8, 216u8, 255u8, 25u8, 132u8, 242u8, 34u8, 43u8, 64u8,
                        ],
                    )
                }
                pub fn call(
                    &self,
                    source: types::call::Source,
                    target: types::call::Target,
                    input: types::call::Input,
                    value: types::call::Value,
                    gas_limit: types::call::GasLimit,
                    max_fee_per_gas: types::call::MaxFeePerGas,
                    max_priority_fee_per_gas: types::call::MaxPriorityFeePerGas,
                    nonce: types::call::Nonce,
                    access_list: types::call::AccessList,
                ) -> ::subxt::tx::Payload<types::Call> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "call",
                        types::Call {
                            source,
                            target,
                            input,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            121u8, 179u8, 103u8, 152u8, 89u8, 27u8, 36u8, 13u8, 114u8, 246u8,
                            222u8, 197u8, 249u8, 250u8, 241u8, 66u8, 219u8, 123u8, 126u8, 144u8,
                            144u8, 213u8, 165u8, 25u8, 248u8, 129u8, 86u8, 34u8, 105u8, 145u8,
                            85u8, 85u8,
                        ],
                    )
                }
                pub fn create(
                    &self,
                    source: types::create::Source,
                    init: types::create::Init,
                    value: types::create::Value,
                    gas_limit: types::create::GasLimit,
                    max_fee_per_gas: types::create::MaxFeePerGas,
                    max_priority_fee_per_gas: types::create::MaxPriorityFeePerGas,
                    nonce: types::create::Nonce,
                    access_list: types::create::AccessList,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "create",
                        types::Create {
                            source,
                            init,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            231u8, 52u8, 103u8, 5u8, 29u8, 96u8, 200u8, 245u8, 151u8, 231u8, 111u8,
                            150u8, 185u8, 126u8, 12u8, 42u8, 169u8, 92u8, 68u8, 130u8, 36u8, 11u8,
                            234u8, 211u8, 199u8, 200u8, 45u8, 10u8, 53u8, 91u8, 226u8, 145u8,
                        ],
                    )
                }
                pub fn create2(
                    &self,
                    source: types::create2::Source,
                    init: types::create2::Init,
                    salt: types::create2::Salt,
                    value: types::create2::Value,
                    gas_limit: types::create2::GasLimit,
                    max_fee_per_gas: types::create2::MaxFeePerGas,
                    max_priority_fee_per_gas: types::create2::MaxPriorityFeePerGas,
                    nonce: types::create2::Nonce,
                    access_list: types::create2::AccessList,
                ) -> ::subxt::tx::Payload<types::Create2> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "create2",
                        types::Create2 {
                            source,
                            init,
                            salt,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            73u8, 157u8, 32u8, 232u8, 164u8, 93u8, 191u8, 129u8, 171u8, 104u8,
                            212u8, 108u8, 167u8, 5u8, 61u8, 171u8, 247u8, 97u8, 122u8, 162u8,
                            102u8, 152u8, 224u8, 130u8, 94u8, 112u8, 115u8, 68u8, 249u8, 215u8,
                            233u8, 115u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_evm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Log {
                pub log: log::Log,
            }
            pub mod log {
                use super::runtime_types;
                pub type Log = runtime_types::ethereum::log::Log;
            }
            impl ::subxt::events::StaticEvent for Log {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Log";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Created {
                pub address: created::Address,
            }
            pub mod created {
                use super::runtime_types;
                pub type Address = ::subxt::utils::H160;
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CreatedFailed {
                pub address: created_failed::Address,
            }
            pub mod created_failed {
                use super::runtime_types;
                pub type Address = ::subxt::utils::H160;
            }
            impl ::subxt::events::StaticEvent for CreatedFailed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "CreatedFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Executed {
                pub address: executed::Address,
            }
            pub mod executed {
                use super::runtime_types;
                pub type Address = ::subxt::utils::H160;
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExecutedFailed {
                pub address: executed_failed::Address,
            }
            pub mod executed_failed {
                use super::runtime_types;
                pub type Address = ::subxt::utils::H160;
            }
            impl ::subxt::events::StaticEvent for ExecutedFailed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "ExecutedFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account_codes {
                    use super::runtime_types;
                    pub type AccountCodes = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::subxt::utils::H160;
                }
                pub mod account_codes_metadata {
                    use super::runtime_types;
                    pub type AccountCodesMetadata = runtime_types::pallet_evm::CodeMetadata;
                    pub type Param0 = ::subxt::utils::H160;
                }
                pub mod account_storages {
                    use super::runtime_types;
                    pub type AccountStorages = ::subxt::utils::H256;
                    pub type Param0 = ::subxt::utils::H160;
                    pub type Param1 = ::subxt::utils::H256;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn account_codes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_codes::AccountCodes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodes",
                        vec![],
                        [
                            49u8, 73u8, 188u8, 164u8, 3u8, 40u8, 187u8, 216u8, 70u8, 119u8, 176u8,
                            187u8, 76u8, 24u8, 49u8, 174u8, 54u8, 98u8, 208u8, 255u8, 38u8, 214u8,
                            120u8, 116u8, 130u8, 139u8, 44u8, 102u8, 115u8, 222u8, 63u8, 56u8,
                        ],
                    )
                }
                pub fn account_codes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account_codes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_codes::AccountCodes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            49u8, 73u8, 188u8, 164u8, 3u8, 40u8, 187u8, 216u8, 70u8, 119u8, 176u8,
                            187u8, 76u8, 24u8, 49u8, 174u8, 54u8, 98u8, 208u8, 255u8, 38u8, 214u8,
                            120u8, 116u8, 130u8, 139u8, 44u8, 102u8, 115u8, 222u8, 63u8, 56u8,
                        ],
                    )
                }
                pub fn account_codes_metadata_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_codes_metadata::AccountCodesMetadata,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodesMetadata",
                        vec![],
                        [
                            17u8, 83u8, 22u8, 15u8, 158u8, 242u8, 39u8, 174u8, 61u8, 230u8, 0u8,
                            161u8, 173u8, 242u8, 155u8, 156u8, 149u8, 108u8, 47u8, 129u8, 190u8,
                            223u8, 25u8, 235u8, 168u8, 86u8, 49u8, 118u8, 132u8, 93u8, 100u8,
                            173u8,
                        ],
                    )
                }
                pub fn account_codes_metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account_codes_metadata::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_codes_metadata::AccountCodesMetadata,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodesMetadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            17u8, 83u8, 22u8, 15u8, 158u8, 242u8, 39u8, 174u8, 61u8, 230u8, 0u8,
                            161u8, 173u8, 242u8, 155u8, 156u8, 149u8, 108u8, 47u8, 129u8, 190u8,
                            223u8, 25u8, 235u8, 168u8, 86u8, 49u8, 118u8, 132u8, 93u8, 100u8,
                            173u8,
                        ],
                    )
                }
                pub fn account_storages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_storages::AccountStorages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountStorages",
                        vec![],
                        [
                            63u8, 69u8, 109u8, 3u8, 190u8, 233u8, 39u8, 122u8, 94u8, 37u8, 74u8,
                            90u8, 197u8, 191u8, 12u8, 119u8, 165u8, 61u8, 217u8, 15u8, 36u8, 167u8,
                            211u8, 120u8, 169u8, 97u8, 13u8, 38u8, 148u8, 224u8, 167u8, 199u8,
                        ],
                    )
                }
                pub fn account_storages_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account_storages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_storages::AccountStorages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountStorages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            63u8, 69u8, 109u8, 3u8, 190u8, 233u8, 39u8, 122u8, 94u8, 37u8, 74u8,
                            90u8, 197u8, 191u8, 12u8, 119u8, 165u8, 61u8, 217u8, 15u8, 36u8, 167u8,
                            211u8, 120u8, 169u8, 97u8, 13u8, 38u8, 148u8, 224u8, 167u8, 199u8,
                        ],
                    )
                }
                pub fn account_storages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account_storages::Param0>,
                    _1: impl ::std::borrow::Borrow<types::account_storages::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account_storages::AccountStorages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountStorages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            63u8, 69u8, 109u8, 3u8, 190u8, 233u8, 39u8, 122u8, 94u8, 37u8, 74u8,
                            90u8, 197u8, 191u8, 12u8, 119u8, 165u8, 61u8, 217u8, 15u8, 36u8, 167u8,
                            211u8, 120u8, 169u8, 97u8, 13u8, 38u8, 148u8, 224u8, 167u8, 199u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod dynamic_fee {
        use super::root_mod;
        use super::runtime_types;
        pub type Call = runtime_types::pallet_dynamic_fee::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NoteMinGasPriceTarget {
                    pub target: note_min_gas_price_target::Target,
                }
                pub mod note_min_gas_price_target {
                    use super::runtime_types;
                    pub type Target = runtime_types::primitive_types::U256;
                }
                impl ::subxt::blocks::StaticExtrinsic for NoteMinGasPriceTarget {
                    const PALLET: &'static str = "DynamicFee";
                    const CALL: &'static str = "note_min_gas_price_target";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn note_min_gas_price_target(
                    &self,
                    target: types::note_min_gas_price_target::Target,
                ) -> ::subxt::tx::Payload<types::NoteMinGasPriceTarget> {
                    ::subxt::tx::Payload::new_static(
                        "DynamicFee",
                        "note_min_gas_price_target",
                        types::NoteMinGasPriceTarget { target },
                        [
                            195u8, 135u8, 128u8, 209u8, 249u8, 41u8, 223u8, 153u8, 197u8, 51u8,
                            194u8, 204u8, 79u8, 173u8, 113u8, 25u8, 6u8, 153u8, 167u8, 20u8, 24u8,
                            86u8, 205u8, 157u8, 213u8, 248u8, 52u8, 247u8, 209u8, 0u8, 17u8, 171u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod min_gas_price {
                    use super::runtime_types;
                    pub type MinGasPrice = runtime_types::primitive_types::U256;
                }
                pub mod target_min_gas_price {
                    use super::runtime_types;
                    pub type TargetMinGasPrice = runtime_types::primitive_types::U256;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn min_gas_price(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_gas_price::MinGasPrice,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DynamicFee",
                        "MinGasPrice",
                        vec![],
                        [
                            135u8, 244u8, 108u8, 147u8, 120u8, 36u8, 33u8, 200u8, 200u8, 249u8,
                            110u8, 39u8, 180u8, 17u8, 231u8, 219u8, 95u8, 60u8, 227u8, 68u8, 150u8,
                            151u8, 67u8, 45u8, 235u8, 130u8, 4u8, 244u8, 35u8, 112u8, 69u8, 119u8,
                        ],
                    )
                }
                pub fn target_min_gas_price(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::target_min_gas_price::TargetMinGasPrice,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DynamicFee",
                        "TargetMinGasPrice",
                        vec![],
                        [
                            219u8, 94u8, 37u8, 223u8, 148u8, 89u8, 16u8, 136u8, 218u8, 154u8, 54u8,
                            94u8, 202u8, 5u8, 82u8, 185u8, 235u8, 239u8, 152u8, 206u8, 203u8, 71u8,
                            237u8, 200u8, 28u8, 250u8, 217u8, 29u8, 132u8, 255u8, 78u8, 94u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod base_fee {
        use super::root_mod;
        use super::runtime_types;
        pub type Call = runtime_types::pallet_base_fee::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBaseFeePerGas {
                    pub fee: set_base_fee_per_gas::Fee,
                }
                pub mod set_base_fee_per_gas {
                    use super::runtime_types;
                    pub type Fee = runtime_types::primitive_types::U256;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBaseFeePerGas {
                    const PALLET: &'static str = "BaseFee";
                    const CALL: &'static str = "set_base_fee_per_gas";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetElasticity {
                    pub elasticity: set_elasticity::Elasticity,
                }
                pub mod set_elasticity {
                    use super::runtime_types;
                    pub type Elasticity = runtime_types::sp_arithmetic::per_things::Permill;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetElasticity {
                    const PALLET: &'static str = "BaseFee";
                    const CALL: &'static str = "set_elasticity";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_base_fee_per_gas(
                    &self,
                    fee: types::set_base_fee_per_gas::Fee,
                ) -> ::subxt::tx::Payload<types::SetBaseFeePerGas> {
                    ::subxt::tx::Payload::new_static(
                        "BaseFee",
                        "set_base_fee_per_gas",
                        types::SetBaseFeePerGas { fee },
                        [
                            126u8, 236u8, 128u8, 184u8, 42u8, 39u8, 13u8, 175u8, 155u8, 36u8,
                            229u8, 20u8, 13u8, 15u8, 88u8, 56u8, 206u8, 44u8, 127u8, 182u8, 120u8,
                            212u8, 35u8, 72u8, 100u8, 181u8, 64u8, 200u8, 63u8, 129u8, 167u8,
                            132u8,
                        ],
                    )
                }
                pub fn set_elasticity(
                    &self,
                    elasticity: types::set_elasticity::Elasticity,
                ) -> ::subxt::tx::Payload<types::SetElasticity> {
                    ::subxt::tx::Payload::new_static(
                        "BaseFee",
                        "set_elasticity",
                        types::SetElasticity { elasticity },
                        [
                            209u8, 8u8, 19u8, 35u8, 199u8, 151u8, 122u8, 91u8, 181u8, 133u8, 162u8,
                            167u8, 186u8, 150u8, 54u8, 83u8, 101u8, 180u8, 188u8, 136u8, 111u8,
                            100u8, 76u8, 51u8, 118u8, 171u8, 15u8, 75u8, 120u8, 106u8, 37u8, 1u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_base_fee::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewBaseFeePerGas {
                pub fee: new_base_fee_per_gas::Fee,
            }
            pub mod new_base_fee_per_gas {
                use super::runtime_types;
                pub type Fee = runtime_types::primitive_types::U256;
            }
            impl ::subxt::events::StaticEvent for NewBaseFeePerGas {
                const PALLET: &'static str = "BaseFee";
                const EVENT: &'static str = "NewBaseFeePerGas";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BaseFeeOverflow;
            impl ::subxt::events::StaticEvent for BaseFeeOverflow {
                const PALLET: &'static str = "BaseFee";
                const EVENT: &'static str = "BaseFeeOverflow";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewElasticity {
                pub elasticity: new_elasticity::Elasticity,
            }
            pub mod new_elasticity {
                use super::runtime_types;
                pub type Elasticity = runtime_types::sp_arithmetic::per_things::Permill;
            }
            impl ::subxt::events::StaticEvent for NewElasticity {
                const PALLET: &'static str = "BaseFee";
                const EVENT: &'static str = "NewElasticity";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod base_fee_per_gas {
                    use super::runtime_types;
                    pub type BaseFeePerGas = runtime_types::primitive_types::U256;
                }
                pub mod elasticity {
                    use super::runtime_types;
                    pub type Elasticity = runtime_types::sp_arithmetic::per_things::Permill;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn base_fee_per_gas(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::base_fee_per_gas::BaseFeePerGas,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BaseFee",
                        "BaseFeePerGas",
                        vec![],
                        [
                            63u8, 94u8, 12u8, 160u8, 222u8, 9u8, 173u8, 20u8, 161u8, 206u8, 186u8,
                            61u8, 139u8, 169u8, 172u8, 167u8, 190u8, 96u8, 218u8, 245u8, 70u8,
                            19u8, 34u8, 140u8, 216u8, 139u8, 173u8, 140u8, 71u8, 1u8, 139u8, 7u8,
                        ],
                    )
                }
                pub fn elasticity(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::elasticity::Elasticity,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BaseFee",
                        "Elasticity",
                        vec![],
                        [
                            219u8, 23u8, 184u8, 17u8, 59u8, 152u8, 197u8, 61u8, 167u8, 131u8,
                            124u8, 42u8, 70u8, 42u8, 101u8, 54u8, 11u8, 206u8, 96u8, 165u8, 30u8,
                            76u8, 2u8, 64u8, 58u8, 49u8, 74u8, 97u8, 109u8, 222u8, 75u8, 234u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod author {
                    use super::runtime_types;
                    pub type Author = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn author(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::author::Author,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            247u8, 192u8, 118u8, 227u8, 47u8, 20u8, 203u8, 199u8, 216u8, 87u8,
                            220u8, 50u8, 166u8, 61u8, 168u8, 213u8, 253u8, 62u8, 202u8, 199u8,
                            61u8, 192u8, 237u8, 53u8, 22u8, 148u8, 164u8, 245u8, 99u8, 24u8, 146u8,
                            18u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_session::pallet::Error;
        pub type Call = runtime_types::pallet_session::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKeys {
                    pub keys: set_keys::Keys,
                    pub proof: set_keys::Proof,
                }
                pub mod set_keys {
                    use super::runtime_types;
                    pub type Keys = runtime_types::peaq_dev_runtime::opaque::SessionKeys;
                    pub type Proof = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "set_keys";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PurgeKeys;
                impl ::subxt::blocks::StaticExtrinsic for PurgeKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "purge_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_keys(
                    &self,
                    keys: types::set_keys::Keys,
                    proof: types::set_keys::Proof,
                ) -> ::subxt::tx::Payload<types::SetKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "set_keys",
                        types::SetKeys { keys, proof },
                        [
                            10u8, 183u8, 202u8, 82u8, 236u8, 202u8, 212u8, 220u8, 51u8, 217u8,
                            229u8, 169u8, 238u8, 141u8, 129u8, 231u8, 203u8, 176u8, 97u8, 148u8,
                            240u8, 87u8, 177u8, 245u8, 33u8, 109u8, 243u8, 52u8, 46u8, 118u8,
                            164u8, 35u8,
                        ],
                    )
                }
                pub fn purge_keys(&self) -> ::subxt::tx::Payload<types::PurgeKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "purge_keys",
                        types::PurgeKeys {},
                        [
                            215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
                            151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
                            67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
                            209u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewSession {
                pub session_index: new_session::SessionIndex,
            }
            pub mod new_session {
                use super::runtime_types;
                pub type SessionIndex = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod validators {
                    use super::runtime_types;
                    pub type Validators = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                pub mod current_index {
                    use super::runtime_types;
                    pub type CurrentIndex = ::core::primitive::u32;
                }
                pub mod queued_changed {
                    use super::runtime_types;
                    pub type QueuedChanged = ::core::primitive::bool;
                }
                pub mod queued_keys {
                    use super::runtime_types;
                    pub type QueuedKeys = ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::peaq_dev_runtime::opaque::SessionKeys,
                    )>;
                }
                pub mod disabled_validators {
                    use super::runtime_types;
                    pub type DisabledValidators = ::std::vec::Vec<::core::primitive::u32>;
                }
                pub mod next_keys {
                    use super::runtime_types;
                    pub type NextKeys = runtime_types::peaq_dev_runtime::opaque::SessionKeys;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod key_owner {
                    use super::runtime_types;
                    pub type KeyOwner = ::subxt::utils::AccountId32;
                    pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
                    pub type Param1 = [::core::primitive::u8];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validators::Validators,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            50u8, 86u8, 154u8, 222u8, 249u8, 209u8, 156u8, 22u8, 155u8, 25u8,
                            133u8, 194u8, 210u8, 50u8, 38u8, 28u8, 139u8, 201u8, 90u8, 139u8,
                            115u8, 12u8, 12u8, 141u8, 4u8, 178u8, 201u8, 241u8, 223u8, 234u8, 6u8,
                            86u8,
                        ],
                    )
                }
                pub fn current_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_index::CurrentIndex,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
                            135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
                            134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
                            221u8, 230u8,
                        ],
                    )
                }
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queued_changed::QueuedChanged,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
                            198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
                            36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
                            153u8,
                        ],
                    )
                }
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queued_keys::QueuedKeys,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            3u8, 214u8, 191u8, 168u8, 90u8, 94u8, 107u8, 111u8, 170u8, 31u8, 78u8,
                            61u8, 240u8, 184u8, 170u8, 104u8, 178u8, 229u8, 159u8, 89u8, 207u8,
                            37u8, 49u8, 209u8, 131u8, 165u8, 14u8, 169u8, 13u8, 68u8, 151u8, 144u8,
                        ],
                    )
                }
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::disabled_validators::DisabledValidators,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
                            36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
                            183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
                        ],
                    )
                }
                pub fn next_keys_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_keys::NextKeys,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![],
                        [
                            193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
                            241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
                            172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
                        ],
                    )
                }
                pub fn next_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::next_keys::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_keys::NextKeys,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
                            241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
                            172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
                        ],
                    )
                }
                pub fn key_owner_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
                pub fn key_owner_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
                pub fn key_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
                    _1: impl ::std::borrow::Borrow<types::key_owner::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura_ext {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorities::Authorities,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuraExt",
                        "Authorities",
                        vec![],
                        [
                            232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
                            129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
                            94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_staking {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::parachain_staking::pallet::Error;
        pub type Call = runtime_types::parachain_staking::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceNewRound;
                impl ::subxt::blocks::StaticExtrinsic for ForceNewRound {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "force_new_round";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMaxSelectedCandidates {
                    pub new: set_max_selected_candidates::New,
                }
                pub mod set_max_selected_candidates {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMaxSelectedCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_max_selected_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBlocksPerRound {
                    pub new: set_blocks_per_round::New,
                }
                pub mod set_blocks_per_round {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBlocksPerRound {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_blocks_per_round";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMaxCandidateStake {
                    pub new: set_max_candidate_stake::New,
                }
                pub mod set_max_candidate_stake {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMaxCandidateStake {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_max_candidate_stake";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceRemoveCandidate {
                    pub collator: force_remove_candidate::Collator,
                }
                pub mod force_remove_candidate {
                    use super::runtime_types;
                    pub type Collator = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceRemoveCandidate {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "force_remove_candidate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct JoinCandidates {
                    pub stake: join_candidates::Stake,
                }
                pub mod join_candidates {
                    use super::runtime_types;
                    pub type Stake = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for JoinCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "join_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitLeaveCandidates;
                impl ::subxt::blocks::StaticExtrinsic for InitLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "init_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteLeaveCandidates {
                    pub collator: execute_leave_candidates::Collator,
                }
                pub mod execute_leave_candidates {
                    use super::runtime_types;
                    pub type Collator = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelLeaveCandidates;
                impl ::subxt::blocks::StaticExtrinsic for CancelLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateStakeMore {
                    pub more: candidate_stake_more::More,
                }
                pub mod candidate_stake_more {
                    use super::runtime_types;
                    pub type More = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for CandidateStakeMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "candidate_stake_more";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateStakeLess {
                    pub less: candidate_stake_less::Less,
                }
                pub mod candidate_stake_less {
                    use super::runtime_types;
                    pub type Less = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for CandidateStakeLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "candidate_stake_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct JoinDelegators {
                    pub collator: join_delegators::Collator,
                    pub amount: join_delegators::Amount,
                }
                pub mod join_delegators {
                    use super::runtime_types;
                    pub type Collator = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for JoinDelegators {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "join_delegators";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegateAnotherCandidate {
                    pub collator: delegate_another_candidate::Collator,
                    pub amount: delegate_another_candidate::Amount,
                }
                pub mod delegate_another_candidate {
                    use super::runtime_types;
                    pub type Collator = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for DelegateAnotherCandidate {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegate_another_candidate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LeaveDelegators;
                impl ::subxt::blocks::StaticExtrinsic for LeaveDelegators {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "leave_delegators";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RevokeDelegation {
                    pub collator: revoke_delegation::Collator,
                }
                pub mod revoke_delegation {
                    use super::runtime_types;
                    pub type Collator = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for RevokeDelegation {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "revoke_delegation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegatorStakeMore {
                    pub candidate: delegator_stake_more::Candidate,
                    pub more: delegator_stake_more::More,
                }
                pub mod delegator_stake_more {
                    use super::runtime_types;
                    pub type Candidate = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type More = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for DelegatorStakeMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegator_stake_more";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegatorStakeLess {
                    pub candidate: delegator_stake_less::Candidate,
                    pub less: delegator_stake_less::Less,
                }
                pub mod delegator_stake_less {
                    use super::runtime_types;
                    pub type Candidate = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Less = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for DelegatorStakeLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegator_stake_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnlockUnstaked {
                    pub target: unlock_unstaked::Target,
                }
                pub mod unlock_unstaked {
                    use super::runtime_types;
                    pub type Target = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for UnlockUnstaked {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "unlock_unstaked";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn force_new_round(&self) -> ::subxt::tx::Payload<types::ForceNewRound> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "force_new_round",
                        types::ForceNewRound {},
                        [
                            176u8, 99u8, 44u8, 238u8, 109u8, 55u8, 202u8, 227u8, 134u8, 193u8,
                            188u8, 117u8, 27u8, 234u8, 80u8, 170u8, 147u8, 176u8, 16u8, 243u8, 2u8,
                            38u8, 137u8, 225u8, 195u8, 146u8, 197u8, 165u8, 68u8, 143u8, 246u8,
                            70u8,
                        ],
                    )
                }
                pub fn set_max_selected_candidates(
                    &self,
                    new: types::set_max_selected_candidates::New,
                ) -> ::subxt::tx::Payload<types::SetMaxSelectedCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_max_selected_candidates",
                        types::SetMaxSelectedCandidates { new },
                        [
                            201u8, 178u8, 239u8, 195u8, 198u8, 3u8, 205u8, 21u8, 121u8, 200u8,
                            108u8, 121u8, 174u8, 172u8, 17u8, 122u8, 243u8, 148u8, 217u8, 230u8,
                            175u8, 52u8, 15u8, 33u8, 250u8, 233u8, 216u8, 135u8, 37u8, 74u8, 156u8,
                            159u8,
                        ],
                    )
                }
                pub fn set_blocks_per_round(
                    &self,
                    new: types::set_blocks_per_round::New,
                ) -> ::subxt::tx::Payload<types::SetBlocksPerRound> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_blocks_per_round",
                        types::SetBlocksPerRound { new },
                        [
                            15u8, 238u8, 7u8, 157u8, 190u8, 212u8, 210u8, 16u8, 192u8, 27u8, 74u8,
                            162u8, 239u8, 90u8, 149u8, 176u8, 227u8, 29u8, 155u8, 209u8, 94u8,
                            157u8, 63u8, 253u8, 21u8, 54u8, 116u8, 154u8, 234u8, 48u8, 70u8, 66u8,
                        ],
                    )
                }
                pub fn set_max_candidate_stake(
                    &self,
                    new: types::set_max_candidate_stake::New,
                ) -> ::subxt::tx::Payload<types::SetMaxCandidateStake> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_max_candidate_stake",
                        types::SetMaxCandidateStake { new },
                        [
                            176u8, 35u8, 14u8, 233u8, 219u8, 8u8, 9u8, 10u8, 21u8, 18u8, 94u8,
                            190u8, 187u8, 105u8, 163u8, 40u8, 191u8, 249u8, 252u8, 237u8, 208u8,
                            185u8, 85u8, 236u8, 42u8, 143u8, 48u8, 20u8, 82u8, 176u8, 176u8, 171u8,
                        ],
                    )
                }
                pub fn force_remove_candidate(
                    &self,
                    collator: types::force_remove_candidate::Collator,
                ) -> ::subxt::tx::Payload<types::ForceRemoveCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "force_remove_candidate",
                        types::ForceRemoveCandidate { collator },
                        [
                            47u8, 210u8, 33u8, 127u8, 202u8, 166u8, 40u8, 49u8, 103u8, 139u8,
                            123u8, 224u8, 241u8, 193u8, 54u8, 220u8, 54u8, 7u8, 120u8, 151u8, 18u8,
                            129u8, 57u8, 174u8, 114u8, 169u8, 130u8, 101u8, 165u8, 184u8, 169u8,
                            72u8,
                        ],
                    )
                }
                pub fn join_candidates(
                    &self,
                    stake: types::join_candidates::Stake,
                ) -> ::subxt::tx::Payload<types::JoinCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "join_candidates",
                        types::JoinCandidates { stake },
                        [
                            255u8, 245u8, 252u8, 251u8, 202u8, 61u8, 105u8, 126u8, 86u8, 204u8,
                            76u8, 126u8, 139u8, 163u8, 72u8, 0u8, 129u8, 55u8, 208u8, 231u8, 161u8,
                            99u8, 39u8, 49u8, 137u8, 95u8, 139u8, 149u8, 122u8, 155u8, 226u8, 98u8,
                        ],
                    )
                }
                pub fn init_leave_candidates(
                    &self,
                ) -> ::subxt::tx::Payload<types::InitLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "init_leave_candidates",
                        types::InitLeaveCandidates {},
                        [
                            89u8, 134u8, 126u8, 101u8, 18u8, 30u8, 194u8, 35u8, 203u8, 133u8, 63u8,
                            91u8, 47u8, 192u8, 136u8, 106u8, 192u8, 144u8, 2u8, 156u8, 0u8, 44u8,
                            173u8, 173u8, 60u8, 141u8, 252u8, 30u8, 98u8, 180u8, 139u8, 250u8,
                        ],
                    )
                }
                pub fn execute_leave_candidates(
                    &self,
                    collator: types::execute_leave_candidates::Collator,
                ) -> ::subxt::tx::Payload<types::ExecuteLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "execute_leave_candidates",
                        types::ExecuteLeaveCandidates { collator },
                        [
                            15u8, 173u8, 111u8, 70u8, 195u8, 203u8, 52u8, 186u8, 228u8, 13u8, 15u8,
                            170u8, 143u8, 184u8, 154u8, 149u8, 155u8, 219u8, 76u8, 23u8, 205u8,
                            186u8, 8u8, 94u8, 45u8, 62u8, 99u8, 11u8, 54u8, 10u8, 203u8, 229u8,
                        ],
                    )
                }
                pub fn cancel_leave_candidates(
                    &self,
                ) -> ::subxt::tx::Payload<types::CancelLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "cancel_leave_candidates",
                        types::CancelLeaveCandidates {},
                        [
                            152u8, 179u8, 158u8, 230u8, 55u8, 170u8, 157u8, 14u8, 180u8, 208u8,
                            96u8, 170u8, 124u8, 91u8, 52u8, 15u8, 5u8, 98u8, 239u8, 235u8, 254u8,
                            105u8, 201u8, 81u8, 12u8, 86u8, 10u8, 210u8, 199u8, 106u8, 205u8,
                            108u8,
                        ],
                    )
                }
                pub fn candidate_stake_more(
                    &self,
                    more: types::candidate_stake_more::More,
                ) -> ::subxt::tx::Payload<types::CandidateStakeMore> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "candidate_stake_more",
                        types::CandidateStakeMore { more },
                        [
                            232u8, 203u8, 84u8, 70u8, 237u8, 24u8, 244u8, 159u8, 149u8, 97u8, 55u8,
                            247u8, 254u8, 101u8, 175u8, 34u8, 233u8, 13u8, 26u8, 158u8, 20u8,
                            129u8, 114u8, 222u8, 120u8, 206u8, 210u8, 79u8, 35u8, 65u8, 160u8,
                            114u8,
                        ],
                    )
                }
                pub fn candidate_stake_less(
                    &self,
                    less: types::candidate_stake_less::Less,
                ) -> ::subxt::tx::Payload<types::CandidateStakeLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "candidate_stake_less",
                        types::CandidateStakeLess { less },
                        [
                            137u8, 162u8, 26u8, 202u8, 167u8, 14u8, 9u8, 156u8, 213u8, 149u8, 26u8,
                            18u8, 3u8, 1u8, 189u8, 79u8, 215u8, 198u8, 55u8, 195u8, 254u8, 204u8,
                            74u8, 126u8, 189u8, 246u8, 184u8, 62u8, 238u8, 234u8, 66u8, 50u8,
                        ],
                    )
                }
                pub fn join_delegators(
                    &self,
                    collator: types::join_delegators::Collator,
                    amount: types::join_delegators::Amount,
                ) -> ::subxt::tx::Payload<types::JoinDelegators> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "join_delegators",
                        types::JoinDelegators { collator, amount },
                        [
                            145u8, 54u8, 121u8, 90u8, 98u8, 91u8, 195u8, 221u8, 54u8, 100u8, 18u8,
                            160u8, 154u8, 105u8, 32u8, 220u8, 99u8, 33u8, 216u8, 204u8, 202u8,
                            162u8, 180u8, 195u8, 109u8, 47u8, 214u8, 88u8, 85u8, 81u8, 187u8,
                            107u8,
                        ],
                    )
                }
                pub fn delegate_another_candidate(
                    &self,
                    collator: types::delegate_another_candidate::Collator,
                    amount: types::delegate_another_candidate::Amount,
                ) -> ::subxt::tx::Payload<types::DelegateAnotherCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegate_another_candidate",
                        types::DelegateAnotherCandidate { collator, amount },
                        [
                            158u8, 220u8, 96u8, 9u8, 229u8, 142u8, 229u8, 107u8, 128u8, 202u8,
                            43u8, 20u8, 173u8, 161u8, 103u8, 205u8, 84u8, 125u8, 17u8, 23u8, 223u8,
                            35u8, 213u8, 56u8, 88u8, 220u8, 146u8, 92u8, 227u8, 166u8, 56u8, 120u8,
                        ],
                    )
                }
                pub fn leave_delegators(&self) -> ::subxt::tx::Payload<types::LeaveDelegators> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "leave_delegators",
                        types::LeaveDelegators {},
                        [
                            199u8, 97u8, 242u8, 160u8, 151u8, 173u8, 49u8, 95u8, 162u8, 192u8,
                            38u8, 75u8, 131u8, 51u8, 35u8, 179u8, 223u8, 180u8, 228u8, 247u8,
                            204u8, 203u8, 117u8, 58u8, 48u8, 211u8, 31u8, 54u8, 199u8, 160u8, 87u8,
                            218u8,
                        ],
                    )
                }
                pub fn revoke_delegation(
                    &self,
                    collator: types::revoke_delegation::Collator,
                ) -> ::subxt::tx::Payload<types::RevokeDelegation> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "revoke_delegation",
                        types::RevokeDelegation { collator },
                        [
                            192u8, 23u8, 244u8, 126u8, 255u8, 4u8, 73u8, 32u8, 186u8, 25u8, 55u8,
                            98u8, 235u8, 243u8, 17u8, 249u8, 74u8, 98u8, 210u8, 8u8, 137u8, 9u8,
                            202u8, 235u8, 39u8, 227u8, 93u8, 102u8, 88u8, 126u8, 145u8, 123u8,
                        ],
                    )
                }
                pub fn delegator_stake_more(
                    &self,
                    candidate: types::delegator_stake_more::Candidate,
                    more: types::delegator_stake_more::More,
                ) -> ::subxt::tx::Payload<types::DelegatorStakeMore> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegator_stake_more",
                        types::DelegatorStakeMore { candidate, more },
                        [
                            190u8, 66u8, 116u8, 110u8, 107u8, 7u8, 100u8, 176u8, 41u8, 141u8, 94u8,
                            211u8, 80u8, 17u8, 136u8, 233u8, 17u8, 166u8, 189u8, 61u8, 197u8, 68u8,
                            1u8, 220u8, 26u8, 93u8, 132u8, 134u8, 20u8, 80u8, 243u8, 16u8,
                        ],
                    )
                }
                pub fn delegator_stake_less(
                    &self,
                    candidate: types::delegator_stake_less::Candidate,
                    less: types::delegator_stake_less::Less,
                ) -> ::subxt::tx::Payload<types::DelegatorStakeLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegator_stake_less",
                        types::DelegatorStakeLess { candidate, less },
                        [
                            73u8, 212u8, 195u8, 132u8, 51u8, 119u8, 168u8, 179u8, 220u8, 186u8,
                            101u8, 173u8, 26u8, 119u8, 100u8, 96u8, 88u8, 26u8, 142u8, 49u8, 97u8,
                            172u8, 241u8, 61u8, 3u8, 134u8, 223u8, 249u8, 243u8, 128u8, 98u8,
                            126u8,
                        ],
                    )
                }
                pub fn unlock_unstaked(
                    &self,
                    target: types::unlock_unstaked::Target,
                ) -> ::subxt::tx::Payload<types::UnlockUnstaked> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "unlock_unstaked",
                        types::UnlockUnstaked { target },
                        [
                            189u8, 225u8, 234u8, 150u8, 245u8, 151u8, 215u8, 213u8, 107u8, 72u8,
                            58u8, 197u8, 5u8, 13u8, 43u8, 167u8, 241u8, 78u8, 165u8, 121u8, 120u8,
                            47u8, 55u8, 134u8, 141u8, 45u8, 8u8, 0u8, 31u8, 248u8, 166u8, 169u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::parachain_staking::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewRound(pub new_round::Field0, pub new_round::Field1);
            pub mod new_round {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for NewRound {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "NewRound";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EnteredTopCandidates(pub entered_top_candidates::Field0);
            pub mod entered_top_candidates {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for EnteredTopCandidates {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "EnteredTopCandidates";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LeftTopCandidates(pub left_top_candidates::Field0);
            pub mod left_top_candidates {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for LeftTopCandidates {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "LeftTopCandidates";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct JoinedCollatorCandidates(
                pub joined_collator_candidates::Field0,
                pub joined_collator_candidates::Field1,
            );
            pub mod joined_collator_candidates {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for JoinedCollatorCandidates {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "JoinedCollatorCandidates";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollatorStakedMore(
                pub collator_staked_more::Field0,
                pub collator_staked_more::Field1,
                pub collator_staked_more::Field2,
            );
            pub mod collator_staked_more {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CollatorStakedMore {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorStakedMore";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollatorStakedLess(
                pub collator_staked_less::Field0,
                pub collator_staked_less::Field1,
                pub collator_staked_less::Field2,
            );
            pub mod collator_staked_less {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CollatorStakedLess {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorStakedLess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollatorScheduledExit(
                pub collator_scheduled_exit::Field0,
                pub collator_scheduled_exit::Field1,
                pub collator_scheduled_exit::Field2,
            );
            pub mod collator_scheduled_exit {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for CollatorScheduledExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorScheduledExit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollatorCanceledExit(pub collator_canceled_exit::Field0);
            pub mod collator_canceled_exit {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for CollatorCanceledExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorCanceledExit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CandidateLeft(pub candidate_left::Field0, pub candidate_left::Field1);
            pub mod candidate_left {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CandidateLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateLeft";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollatorRemoved(pub collator_removed::Field0, pub collator_removed::Field1);
            pub mod collator_removed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CollatorRemoved {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxCandidateStakeChanged(pub max_candidate_stake_changed::Field0);
            pub mod max_candidate_stake_changed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for MaxCandidateStakeChanged {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "MaxCandidateStakeChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegatorStakedMore(
                pub delegator_staked_more::Field0,
                pub delegator_staked_more::Field1,
                pub delegator_staked_more::Field2,
                pub delegator_staked_more::Field3,
            );
            pub mod delegator_staked_more {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DelegatorStakedMore {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorStakedMore";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegatorStakedLess(
                pub delegator_staked_less::Field0,
                pub delegator_staked_less::Field1,
                pub delegator_staked_less::Field2,
                pub delegator_staked_less::Field3,
            );
            pub mod delegator_staked_less {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DelegatorStakedLess {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorStakedLess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegatorLeft(pub delegator_left::Field0, pub delegator_left::Field1);
            pub mod delegator_left {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DelegatorLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeft";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Delegation(
                pub delegation::Field0,
                pub delegation::Field1,
                pub delegation::Field2,
                pub delegation::Field3,
            );
            pub mod delegation {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Delegation {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Delegation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegationReplaced(
                pub delegation_replaced::Field0,
                pub delegation_replaced::Field1,
                pub delegation_replaced::Field2,
                pub delegation_replaced::Field3,
                pub delegation_replaced::Field4,
                pub delegation_replaced::Field5,
            );
            pub mod delegation_replaced {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = ::core::primitive::u128;
                pub type Field4 = ::subxt::utils::AccountId32;
                pub type Field5 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DelegationReplaced {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationReplaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegatorLeftCollator(
                pub delegator_left_collator::Field0,
                pub delegator_left_collator::Field1,
                pub delegator_left_collator::Field2,
                pub delegator_left_collator::Field3,
            );
            pub mod delegator_left_collator {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DelegatorLeftCollator {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeftCollator";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Rewarded(pub rewarded::Field0, pub rewarded::Field1);
            pub mod rewarded {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxSelectedCandidatesSet(
                pub max_selected_candidates_set::Field0,
                pub max_selected_candidates_set::Field1,
            );
            pub mod max_selected_candidates_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for MaxSelectedCandidatesSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "MaxSelectedCandidatesSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BlocksPerRoundSet(
                pub blocks_per_round_set::Field0,
                pub blocks_per_round_set::Field1,
                pub blocks_per_round_set::Field2,
                pub blocks_per_round_set::Field3,
            );
            pub mod blocks_per_round_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for BlocksPerRoundSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "BlocksPerRoundSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod max_selected_candidates {
                    use super::runtime_types;
                    pub type MaxSelectedCandidates = ::core::primitive::u32;
                }
                pub mod round {
                    use super::runtime_types;
                    pub type Round =
                        runtime_types::parachain_staking::types::RoundInfo<::core::primitive::u32>;
                }
                pub mod last_delegation {
                    use super::runtime_types;
                    pub type LastDelegation =
                        runtime_types::parachain_staking::types::DelegationCounter;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod delegator_state {
                    use super::runtime_types;
                    pub type DelegatorState = runtime_types::parachain_staking::types::Delegator<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod candidate_pool {
                    use super::runtime_types;
                    pub type CandidatePool = runtime_types::parachain_staking::types::Candidate<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod counter_for_candidate_pool {
                    use super::runtime_types;
                    pub type CounterForCandidatePool = ::core::primitive::u32;
                }
                pub mod total_collator_stake {
                    use super::runtime_types;
                    pub type TotalCollatorStake =
                        runtime_types::parachain_staking::types::TotalStake<
                            ::core::primitive::u128,
                        >;
                }
                pub mod top_candidates {
                    use super::runtime_types;
                    pub type TopCandidates = runtime_types::parachain_staking::set::OrderedSet<
                        runtime_types::parachain_staking::types::Stake<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >;
                }
                pub mod unstaking {
                    use super::runtime_types;
                    pub type Unstaking =
                        runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod max_collator_candidate_stake {
                    use super::runtime_types;
                    pub type MaxCollatorCandidateStake = ::core::primitive::u128;
                }
                pub mod force_new_round {
                    use super::runtime_types;
                    pub type ForceNewRound = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn max_selected_candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_selected_candidates::MaxSelectedCandidates,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "MaxSelectedCandidates",
                        vec![],
                        [
                            95u8, 195u8, 234u8, 104u8, 132u8, 179u8, 243u8, 238u8, 94u8, 176u8,
                            244u8, 155u8, 135u8, 174u8, 186u8, 78u8, 32u8, 166u8, 217u8, 62u8,
                            27u8, 116u8, 7u8, 47u8, 97u8, 49u8, 8u8, 23u8, 141u8, 69u8, 11u8,
                            197u8,
                        ],
                    )
                }
                pub fn round(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::round::Round,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Round",
                        vec![],
                        [
                            53u8, 212u8, 149u8, 87u8, 210u8, 115u8, 100u8, 246u8, 132u8, 216u8,
                            157u8, 162u8, 66u8, 122u8, 36u8, 36u8, 45u8, 228u8, 147u8, 35u8, 63u8,
                            44u8, 248u8, 183u8, 248u8, 67u8, 81u8, 202u8, 237u8, 250u8, 87u8, 38u8,
                        ],
                    )
                }
                pub fn last_delegation_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_delegation::LastDelegation,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "LastDelegation",
                        vec![],
                        [
                            70u8, 85u8, 18u8, 125u8, 37u8, 224u8, 63u8, 145u8, 205u8, 90u8, 213u8,
                            206u8, 31u8, 205u8, 130u8, 53u8, 174u8, 119u8, 48u8, 55u8, 72u8, 81u8,
                            76u8, 32u8, 83u8, 102u8, 53u8, 237u8, 112u8, 128u8, 118u8, 233u8,
                        ],
                    )
                }
                pub fn last_delegation(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_delegation::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_delegation::LastDelegation,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "LastDelegation",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            70u8, 85u8, 18u8, 125u8, 37u8, 224u8, 63u8, 145u8, 205u8, 90u8, 213u8,
                            206u8, 31u8, 205u8, 130u8, 53u8, 174u8, 119u8, 48u8, 55u8, 72u8, 81u8,
                            76u8, 32u8, 83u8, 102u8, 53u8, 237u8, 112u8, 128u8, 118u8, 233u8,
                        ],
                    )
                }
                pub fn delegator_state_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delegator_state::DelegatorState,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        vec![],
                        [
                            190u8, 97u8, 202u8, 186u8, 204u8, 84u8, 247u8, 250u8, 155u8, 193u8,
                            146u8, 97u8, 58u8, 234u8, 177u8, 96u8, 111u8, 9u8, 161u8, 208u8, 152u8,
                            224u8, 1u8, 36u8, 4u8, 162u8, 226u8, 91u8, 73u8, 211u8, 91u8, 180u8,
                        ],
                    )
                }
                pub fn delegator_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::delegator_state::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delegator_state::DelegatorState,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            190u8, 97u8, 202u8, 186u8, 204u8, 84u8, 247u8, 250u8, 155u8, 193u8,
                            146u8, 97u8, 58u8, 234u8, 177u8, 96u8, 111u8, 9u8, 161u8, 208u8, 152u8,
                            224u8, 1u8, 36u8, 4u8, 162u8, 226u8, 91u8, 73u8, 211u8, 91u8, 180u8,
                        ],
                    )
                }
                pub fn candidate_pool_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::candidate_pool::CandidatePool,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CandidatePool",
                        vec![],
                        [
                            248u8, 130u8, 6u8, 77u8, 193u8, 28u8, 239u8, 10u8, 55u8, 77u8, 175u8,
                            157u8, 198u8, 137u8, 243u8, 134u8, 36u8, 171u8, 115u8, 111u8, 228u8,
                            76u8, 183u8, 153u8, 169u8, 88u8, 168u8, 141u8, 36u8, 204u8, 49u8, 39u8,
                        ],
                    )
                }
                pub fn candidate_pool(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::candidate_pool::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::candidate_pool::CandidatePool,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CandidatePool",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            248u8, 130u8, 6u8, 77u8, 193u8, 28u8, 239u8, 10u8, 55u8, 77u8, 175u8,
                            157u8, 198u8, 137u8, 243u8, 134u8, 36u8, 171u8, 115u8, 111u8, 228u8,
                            76u8, 183u8, 153u8, 169u8, 88u8, 168u8, 141u8, 36u8, 204u8, 49u8, 39u8,
                        ],
                    )
                }
                pub fn counter_for_candidate_pool(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::counter_for_candidate_pool::CounterForCandidatePool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CounterForCandidatePool",
                        vec![],
                        [
                            148u8, 25u8, 162u8, 83u8, 83u8, 230u8, 61u8, 51u8, 15u8, 251u8, 219u8,
                            3u8, 198u8, 112u8, 94u8, 152u8, 102u8, 26u8, 186u8, 36u8, 163u8, 106u8,
                            248u8, 74u8, 214u8, 181u8, 21u8, 245u8, 140u8, 20u8, 171u8, 176u8,
                        ],
                    )
                }
                pub fn total_collator_stake(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_collator_stake::TotalCollatorStake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "TotalCollatorStake",
                        vec![],
                        [
                            68u8, 115u8, 15u8, 238u8, 248u8, 228u8, 57u8, 113u8, 152u8, 173u8,
                            74u8, 65u8, 125u8, 183u8, 58u8, 114u8, 106u8, 144u8, 109u8, 80u8,
                            108u8, 222u8, 104u8, 94u8, 19u8, 225u8, 189u8, 156u8, 179u8, 152u8,
                            67u8, 33u8,
                        ],
                    )
                }
                pub fn top_candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::top_candidates::TopCandidates,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "TopCandidates",
                        vec![],
                        [
                            196u8, 221u8, 155u8, 169u8, 214u8, 233u8, 181u8, 253u8, 253u8, 85u8,
                            255u8, 220u8, 13u8, 203u8, 201u8, 80u8, 163u8, 113u8, 193u8, 84u8,
                            44u8, 240u8, 74u8, 189u8, 0u8, 233u8, 94u8, 5u8, 13u8, 236u8, 119u8,
                            139u8,
                        ],
                    )
                }
                pub fn unstaking_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::unstaking::Unstaking,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Unstaking",
                        vec![],
                        [
                            160u8, 176u8, 67u8, 30u8, 30u8, 175u8, 173u8, 91u8, 234u8, 202u8,
                            114u8, 143u8, 6u8, 238u8, 212u8, 235u8, 106u8, 194u8, 188u8, 124u8,
                            18u8, 244u8, 249u8, 67u8, 144u8, 107u8, 69u8, 89u8, 74u8, 15u8, 170u8,
                            162u8,
                        ],
                    )
                }
                pub fn unstaking(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::unstaking::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::unstaking::Unstaking,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Unstaking",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 176u8, 67u8, 30u8, 30u8, 175u8, 173u8, 91u8, 234u8, 202u8,
                            114u8, 143u8, 6u8, 238u8, 212u8, 235u8, 106u8, 194u8, 188u8, 124u8,
                            18u8, 244u8, 249u8, 67u8, 144u8, 107u8, 69u8, 89u8, 74u8, 15u8, 170u8,
                            162u8,
                        ],
                    )
                }
                pub fn max_collator_candidate_stake(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_collator_candidate_stake::MaxCollatorCandidateStake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "MaxCollatorCandidateStake",
                        vec![],
                        [
                            226u8, 123u8, 237u8, 155u8, 175u8, 34u8, 7u8, 255u8, 217u8, 112u8,
                            158u8, 228u8, 22u8, 34u8, 131u8, 22u8, 154u8, 46u8, 14u8, 215u8, 166u8,
                            246u8, 21u8, 121u8, 87u8, 100u8, 141u8, 8u8, 128u8, 238u8, 239u8,
                            219u8,
                        ],
                    )
                }
                pub fn force_new_round(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::force_new_round::ForceNewRound,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "ForceNewRound",
                        vec![],
                        [
                            157u8, 221u8, 244u8, 13u8, 185u8, 129u8, 176u8, 34u8, 198u8, 70u8,
                            78u8, 16u8, 126u8, 98u8, 159u8, 104u8, 100u8, 142u8, 78u8, 137u8, 41u8,
                            67u8, 239u8, 35u8, 229u8, 33u8, 193u8, 222u8, 143u8, 180u8, 16u8, 1u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn min_blocks_per_round(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinBlocksPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn default_blocks_per_round(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "DefaultBlocksPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn stake_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "StakeDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn exit_queue_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "ExitQueueDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn min_collators(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinCollators",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn min_required_collators(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinRequiredCollators",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_delegations_per_round(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxDelegationsPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_delegators_per_collator(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxDelegatorsPerCollator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_collators_per_delegator(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxCollatorsPerDelegator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_top_candidates(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxTopCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn min_collator_stake(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinCollatorStake",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn min_collator_candidate_stake(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinCollatorCandidateStake",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn min_delegation(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinDelegation",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn min_delegator_stake(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinDelegatorStake",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_unstake_requests(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxUnstakeRequests",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn pot_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "PotId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_system {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
        pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetValidationData {
                    pub data: set_validation_data::Data,
                }
                pub mod set_validation_data {
                    use super::runtime_types;
                    pub type Data =
                        runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetValidationData {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "set_validation_data";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSendUpwardMessage {
                    pub message: sudo_send_upward_message::Message,
                }
                pub mod sudo_send_upward_message {
                    use super::runtime_types;
                    pub type Message = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSendUpwardMessage {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "sudo_send_upward_message";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AuthorizeUpgrade {
                    pub code_hash: authorize_upgrade::CodeHash,
                    pub check_version: authorize_upgrade::CheckVersion,
                }
                pub mod authorize_upgrade {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::utils::H256;
                    pub type CheckVersion = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EnactAuthorizedUpgrade {
                    pub code: enact_authorized_upgrade::Code,
                }
                pub mod enact_authorized_upgrade {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for EnactAuthorizedUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "enact_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_validation_data(
                    &self,
                    data: types::set_validation_data::Data,
                ) -> ::subxt::tx::Payload<types::SetValidationData> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "set_validation_data",
                        types::SetValidationData { data },
                        [
                            167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
                            136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
                            114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
                            249u8,
                        ],
                    )
                }
                pub fn sudo_send_upward_message(
                    &self,
                    message: types::sudo_send_upward_message::Message,
                ) -> ::subxt::tx::Payload<types::SudoSendUpwardMessage> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "sudo_send_upward_message",
                        types::SudoSendUpwardMessage { message },
                        [
                            1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
                            47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
                            218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
                        ],
                    )
                }
                pub fn authorize_upgrade(
                    &self,
                    code_hash: types::authorize_upgrade::CodeHash,
                    check_version: types::authorize_upgrade::CheckVersion,
                ) -> ::subxt::tx::Payload<types::AuthorizeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade {
                            code_hash,
                            check_version,
                        },
                        [
                            213u8, 114u8, 107u8, 169u8, 223u8, 147u8, 205u8, 204u8, 3u8, 81u8,
                            228u8, 0u8, 82u8, 57u8, 43u8, 95u8, 12u8, 59u8, 241u8, 176u8, 143u8,
                            131u8, 253u8, 166u8, 98u8, 187u8, 94u8, 235u8, 177u8, 110u8, 162u8,
                            218u8,
                        ],
                    )
                }
                pub fn enact_authorized_upgrade(
                    &self,
                    code: types::enact_authorized_upgrade::Code,
                ) -> ::subxt::tx::Payload<types::EnactAuthorizedUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "enact_authorized_upgrade",
                        types::EnactAuthorizedUpgrade { code },
                        [
                            232u8, 135u8, 114u8, 87u8, 196u8, 146u8, 244u8, 19u8, 106u8, 73u8,
                            88u8, 193u8, 48u8, 14u8, 72u8, 133u8, 247u8, 147u8, 50u8, 95u8, 252u8,
                            213u8, 192u8, 47u8, 244u8, 102u8, 195u8, 120u8, 179u8, 87u8, 94u8, 8u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ValidationFunctionStored;
            impl ::subxt::events::StaticEvent for ValidationFunctionStored {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ValidationFunctionApplied {
                pub relay_chain_block_num: validation_function_applied::RelayChainBlockNum,
            }
            pub mod validation_function_applied {
                use super::runtime_types;
                pub type RelayChainBlockNum = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for ValidationFunctionApplied {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionApplied";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ValidationFunctionDiscarded;
            impl ::subxt::events::StaticEvent for ValidationFunctionDiscarded {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionDiscarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UpgradeAuthorized {
                pub code_hash: upgrade_authorized::CodeHash,
            }
            pub mod upgrade_authorized {
                use super::runtime_types;
                pub type CodeHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DownwardMessagesReceived {
                pub count: downward_messages_received::Count,
            }
            pub mod downward_messages_received {
                use super::runtime_types;
                pub type Count = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesReceived {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DownwardMessagesProcessed {
                pub weight_used: downward_messages_processed::WeightUsed,
                pub dmq_head: downward_messages_processed::DmqHead,
            }
            pub mod downward_messages_processed {
                use super::runtime_types;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
                pub type DmqHead = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesProcessed {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesProcessed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UpwardMessageSent {
                pub message_hash: upward_message_sent::MessageHash,
            }
            pub mod upward_message_sent {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for UpwardMessageSent {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpwardMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pending_validation_code {
                    use super::runtime_types;
                    pub type PendingValidationCode = ::std::vec::Vec<::core::primitive::u8>;
                }
                pub mod new_validation_code {
                    use super::runtime_types;
                    pub type NewValidationCode = ::std::vec::Vec<::core::primitive::u8>;
                }
                pub mod validation_data {
                    use super::runtime_types;
                    pub type ValidationData =
                        runtime_types::polkadot_primitives::v4::PersistedValidationData<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                }
                pub mod did_set_validation_code {
                    use super::runtime_types;
                    pub type DidSetValidationCode = ::core::primitive::bool;
                }
                pub mod last_relay_chain_block_number {
                    use super::runtime_types;
                    pub type LastRelayChainBlockNumber = ::core::primitive::u32;
                }
                pub mod upgrade_restriction_signal {
                    use super::runtime_types;
                    pub type UpgradeRestrictionSignal = ::core::option::Option<
                        runtime_types::polkadot_primitives::v4::UpgradeRestriction,
                    >;
                }
                pub mod relay_state_proof {
                    use super::runtime_types;
                    pub type RelayStateProof = runtime_types::sp_trie::storage_proof::StorageProof;
                }
                pub mod relevant_messaging_state {
                    use super::runtime_types;
                    pub type RelevantMessagingState = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
                }
                pub mod host_configuration {
                    use super::runtime_types;
                    pub type HostConfiguration =
                        runtime_types::polkadot_primitives::v4::AbridgedHostConfiguration;
                }
                pub mod last_dmq_mqc_head {
                    use super::runtime_types;
                    pub type LastDmqMqcHead =
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
                }
                pub mod last_hrmp_mqc_heads {
                    use super::runtime_types;
                    pub type LastHrmpMqcHeads = ::subxt::utils::KeyedVec<
                        runtime_types::polkadot_parachain::primitives::Id,
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    >;
                }
                pub mod processed_downward_messages {
                    use super::runtime_types;
                    pub type ProcessedDownwardMessages = ::core::primitive::u32;
                }
                pub mod hrmp_watermark {
                    use super::runtime_types;
                    pub type HrmpWatermark = ::core::primitive::u32;
                }
                pub mod hrmp_outbound_messages {
                    use super::runtime_types;
                    pub type HrmpOutboundMessages = ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                            runtime_types::polkadot_parachain::primitives::Id,
                        >,
                    >;
                }
                pub mod upward_messages {
                    use super::runtime_types;
                    pub type UpwardMessages =
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                pub mod pending_upward_messages {
                    use super::runtime_types;
                    pub type PendingUpwardMessages =
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                pub mod announced_hrmp_messages_per_candidate {
                    use super::runtime_types;
                    pub type AnnouncedHrmpMessagesPerCandidate = ::core::primitive::u32;
                }
                pub mod reserved_xcmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedXcmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod reserved_dmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedDmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod authorized_upgrade {
                    use super::runtime_types;
                    pub type AuthorizedUpgrade =
                        runtime_types::cumulus_pallet_parachain_system::CodeUpgradeAuthorization;
                }
                pub mod custom_validation_head_data {
                    use super::runtime_types;
                    pub type CustomValidationHeadData = ::std::vec::Vec<::core::primitive::u8>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn pending_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_validation_code::PendingValidationCode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingValidationCode",
                        vec![],
                        [
                            78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
                            233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
                            254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
                        ],
                    )
                }
                pub fn new_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::new_validation_code::NewValidationCode,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "NewValidationCode",
                        vec![],
                        [
                            185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
                            59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
                            163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
                        ],
                    )
                }
                pub fn validation_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validation_data::ValidationData,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ValidationData",
                        vec![],
                        [
                            193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
                            25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
                            62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
                        ],
                    )
                }
                pub fn did_set_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::did_set_validation_code::DidSetValidationCode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "DidSetValidationCode",
                        vec![],
                        [
                            233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
                            196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
                            173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
                        ],
                    )
                }
                pub fn last_relay_chain_block_number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_relay_chain_block_number::LastRelayChainBlockNumber,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastRelayChainBlockNumber",
                        vec![],
                        [
                            17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
                            75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
                            255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
                            186u8,
                        ],
                    )
                }
                pub fn upgrade_restriction_signal(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgrade_restriction_signal::UpgradeRestrictionSignal,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpgradeRestrictionSignal",
                        vec![],
                        [
                            235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
                            124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
                            181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
                        ],
                    )
                }
                pub fn relay_state_proof(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relay_state_proof::RelayStateProof,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelayStateProof",
                        vec![],
                        [
                            46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
                            94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
                            36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
                            182u8, 238u8,
                        ],
                    )
                }
                pub fn relevant_messaging_state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relevant_messaging_state::RelevantMessagingState,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelevantMessagingState",
                        vec![],
                        [
                            122u8, 98u8, 235u8, 251u8, 121u8, 64u8, 21u8, 37u8, 101u8, 8u8, 217u8,
                            99u8, 53u8, 5u8, 101u8, 48u8, 248u8, 181u8, 61u8, 235u8, 119u8, 203u8,
                            252u8, 210u8, 183u8, 171u8, 146u8, 31u8, 22u8, 211u8, 88u8, 96u8,
                        ],
                    )
                }
                pub fn host_configuration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::host_configuration::HostConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HostConfiguration",
                        vec![],
                        [
                            224u8, 81u8, 104u8, 216u8, 84u8, 180u8, 220u8, 34u8, 251u8, 192u8,
                            110u8, 151u8, 172u8, 254u8, 133u8, 68u8, 16u8, 230u8, 99u8, 164u8,
                            162u8, 159u8, 189u8, 125u8, 249u8, 187u8, 148u8, 253u8, 71u8, 64u8,
                            89u8, 88u8,
                        ],
                    )
                }
                pub fn last_dmq_mqc_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_dmq_mqc_head::LastDmqMqcHead,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastDmqMqcHead",
                        vec![],
                        [
                            1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
                            31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
                            138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
                        ],
                    )
                }
                pub fn last_hrmp_mqc_heads(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_hrmp_mqc_heads::LastHrmpMqcHeads,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastHrmpMqcHeads",
                        vec![],
                        [
                            131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
                            98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
                            54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
                        ],
                    )
                }
                pub fn processed_downward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::processed_downward_messages::ProcessedDownwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ProcessedDownwardMessages",
                        vec![],
                        [
                            151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
                            132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
                            16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
                        ],
                    )
                }
                pub fn hrmp_watermark(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::hrmp_watermark::HrmpWatermark,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpWatermark",
                        vec![],
                        [
                            77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
                            99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
                            123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
                        ],
                    )
                }
                pub fn hrmp_outbound_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::hrmp_outbound_messages::HrmpOutboundMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpOutboundMessages",
                        vec![],
                        [
                            42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
                            186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
                            245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
                            145u8,
                        ],
                    )
                }
                pub fn upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upward_messages::UpwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpwardMessages",
                        vec![],
                        [
                            179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
                            75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
                            23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
                        ],
                    )
                }
                pub fn pending_upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_upward_messages::PendingUpwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingUpwardMessages",
                        vec![],
                        [
                            239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
                            246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
                            153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
                            133u8, 216u8,
                        ],
                    )
                }
                pub fn announced_hrmp_messages_per_candidate(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::announced_hrmp_messages_per_candidate::AnnouncedHrmpMessagesPerCandidate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AnnouncedHrmpMessagesPerCandidate",
                        vec![],
                        [
                            93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
                            107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
                            126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
                        ],
                    )
                }
                pub fn reserved_xcmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserved_xcmp_weight_override::ReservedXcmpWeightOverride,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedXcmpWeightOverride",
                        vec![],
                        [
                            176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
                            77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
                            1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
                        ],
                    )
                }
                pub fn reserved_dmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserved_dmp_weight_override::ReservedDmpWeightOverride,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedDmpWeightOverride",
                        vec![],
                        [
                            205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
                            254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
                            100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
                            112u8,
                        ],
                    )
                }
                pub fn authorized_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorized_upgrade::AuthorizedUpgrade,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AuthorizedUpgrade",
                        vec![],
                        [
                            165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
                            169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
                            214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
                        ],
                    )
                }
                pub fn custom_validation_head_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::custom_validation_head_data::CustomValidationHeadData,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "CustomValidationHeadData",
                        vec![],
                        [
                            52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
                            66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
                            165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_info {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod parachain_id {
                    use super::runtime_types;
                    pub type ParachainId = runtime_types::polkadot_parachain::primitives::Id;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn parachain_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::parachain_id::ParachainId,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainInfo",
                        "ParachainId",
                        vec![],
                        [
                            160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
                            245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
                            83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
                            202u8, 91u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod block_reward {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_block_reward::pallet::Error;
        pub type Call = runtime_types::pallet_block_reward::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetConfiguration {
                    pub reward_distro_params: set_configuration::RewardDistroParams,
                }
                pub mod set_configuration {
                    use super::runtime_types;
                    pub type RewardDistroParams =
                        runtime_types::pallet_block_reward::types::RewardDistributionConfig;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetConfiguration {
                    const PALLET: &'static str = "BlockReward";
                    const CALL: &'static str = "set_configuration";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBlockIssueReward {
                    pub block_reward: set_block_issue_reward::BlockReward,
                }
                pub mod set_block_issue_reward {
                    use super::runtime_types;
                    pub type BlockReward = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBlockIssueReward {
                    const PALLET: &'static str = "BlockReward";
                    const CALL: &'static str = "set_block_issue_reward";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMaxCurrencySupply {
                    pub limit: set_max_currency_supply::Limit,
                }
                pub mod set_max_currency_supply {
                    use super::runtime_types;
                    pub type Limit = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMaxCurrencySupply {
                    const PALLET: &'static str = "BlockReward";
                    const CALL: &'static str = "set_max_currency_supply";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_configuration(
                    &self,
                    reward_distro_params: types::set_configuration::RewardDistroParams,
                ) -> ::subxt::tx::Payload<types::SetConfiguration> {
                    ::subxt::tx::Payload::new_static(
                        "BlockReward",
                        "set_configuration",
                        types::SetConfiguration {
                            reward_distro_params,
                        },
                        [
                            44u8, 94u8, 121u8, 86u8, 214u8, 189u8, 196u8, 242u8, 121u8, 35u8,
                            162u8, 18u8, 164u8, 45u8, 203u8, 61u8, 127u8, 125u8, 153u8, 199u8,
                            119u8, 193u8, 229u8, 147u8, 86u8, 31u8, 172u8, 30u8, 109u8, 94u8,
                            188u8, 1u8,
                        ],
                    )
                }
                pub fn set_block_issue_reward(
                    &self,
                    block_reward: types::set_block_issue_reward::BlockReward,
                ) -> ::subxt::tx::Payload<types::SetBlockIssueReward> {
                    ::subxt::tx::Payload::new_static(
                        "BlockReward",
                        "set_block_issue_reward",
                        types::SetBlockIssueReward { block_reward },
                        [
                            98u8, 225u8, 230u8, 253u8, 235u8, 62u8, 203u8, 27u8, 22u8, 221u8,
                            245u8, 185u8, 147u8, 73u8, 52u8, 44u8, 252u8, 13u8, 161u8, 26u8, 67u8,
                            219u8, 155u8, 213u8, 87u8, 17u8, 61u8, 67u8, 8u8, 128u8, 62u8, 250u8,
                        ],
                    )
                }
                pub fn set_max_currency_supply(
                    &self,
                    limit: types::set_max_currency_supply::Limit,
                ) -> ::subxt::tx::Payload<types::SetMaxCurrencySupply> {
                    ::subxt::tx::Payload::new_static(
                        "BlockReward",
                        "set_max_currency_supply",
                        types::SetMaxCurrencySupply { limit },
                        [
                            62u8, 178u8, 211u8, 218u8, 72u8, 251u8, 57u8, 167u8, 205u8, 71u8,
                            112u8, 246u8, 174u8, 114u8, 103u8, 7u8, 193u8, 101u8, 116u8, 207u8,
                            168u8, 39u8, 39u8, 233u8, 93u8, 164u8, 246u8, 211u8, 47u8, 160u8,
                            226u8, 82u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_block_reward::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DistributionConfigurationChanged(
                pub distribution_configuration_changed::Field0,
            );
            pub mod distribution_configuration_changed {
                use super::runtime_types;
                pub type Field0 =
                    runtime_types::pallet_block_reward::types::RewardDistributionConfig;
            }
            impl ::subxt::events::StaticEvent for DistributionConfigurationChanged {
                const PALLET: &'static str = "BlockReward";
                const EVENT: &'static str = "DistributionConfigurationChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BlockIssueRewardChanged(pub block_issue_reward_changed::Field0);
            pub mod block_issue_reward_changed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BlockIssueRewardChanged {
                const PALLET: &'static str = "BlockReward";
                const EVENT: &'static str = "BlockIssueRewardChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxCurrencySupplyChanged(pub max_currency_supply_changed::Field0);
            pub mod max_currency_supply_changed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for MaxCurrencySupplyChanged {
                const PALLET: &'static str = "BlockReward";
                const EVENT: &'static str = "MaxCurrencySupplyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BlockRewardsDistributed(pub block_rewards_distributed::Field0);
            pub mod block_rewards_distributed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BlockRewardsDistributed {
                const PALLET: &'static str = "BlockReward";
                const EVENT: &'static str = "BlockRewardsDistributed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionFeesDistributed(pub transaction_fees_distributed::Field0);
            pub mod transaction_fees_distributed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TransactionFeesDistributed {
                const PALLET: &'static str = "BlockReward";
                const EVENT: &'static str = "TransactionFeesDistributed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod reward_distribution_config_storage {
                    use super::runtime_types;
                    pub type RewardDistributionConfigStorage =
                        runtime_types::pallet_block_reward::types::RewardDistributionConfig;
                }
                pub mod block_issue_reward {
                    use super::runtime_types;
                    pub type BlockIssueReward = ::core::primitive::u128;
                }
                pub mod max_currency_supply {
                    use super::runtime_types;
                    pub type MaxCurrencySupply = ::core::primitive::u128;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn reward_distribution_config_storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reward_distribution_config_storage::RewardDistributionConfigStorage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BlockReward",
                        "RewardDistributionConfigStorage",
                        vec![],
                        [
                            217u8, 110u8, 142u8, 93u8, 18u8, 4u8, 69u8, 124u8, 71u8, 148u8, 160u8,
                            176u8, 209u8, 136u8, 42u8, 97u8, 253u8, 93u8, 226u8, 187u8, 130u8,
                            67u8, 245u8, 44u8, 131u8, 221u8, 136u8, 33u8, 196u8, 7u8, 155u8, 98u8,
                        ],
                    )
                }
                pub fn block_issue_reward(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_issue_reward::BlockIssueReward,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BlockReward",
                        "BlockIssueReward",
                        vec![],
                        [
                            44u8, 164u8, 69u8, 67u8, 38u8, 218u8, 237u8, 142u8, 12u8, 70u8, 217u8,
                            235u8, 161u8, 245u8, 5u8, 204u8, 201u8, 167u8, 3u8, 123u8, 254u8,
                            193u8, 210u8, 34u8, 238u8, 64u8, 219u8, 183u8, 191u8, 40u8, 185u8,
                            93u8,
                        ],
                    )
                }
                pub fn max_currency_supply(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_currency_supply::MaxCurrencySupply,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BlockReward",
                        "MaxCurrencySupply",
                        vec![],
                        [
                            181u8, 101u8, 21u8, 19u8, 129u8, 102u8, 111u8, 222u8, 108u8, 51u8,
                            19u8, 4u8, 80u8, 118u8, 35u8, 233u8, 14u8, 130u8, 155u8, 106u8, 81u8,
                            208u8, 221u8, 228u8, 179u8, 175u8, 195u8, 93u8, 214u8, 17u8, 71u8,
                            24u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod staking_coefficient_reward_calculator {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::staking_coefficient_reward::pallet::Error;
        pub type Call = runtime_types::staking_coefficient_reward::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCoefficient {
                    pub coefficient: set_coefficient::Coefficient,
                }
                pub mod set_coefficient {
                    use super::runtime_types;
                    pub type Coefficient = ::core::primitive::u8;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCoefficient {
                    const PALLET: &'static str = "StakingCoefficientRewardCalculator";
                    const CALL: &'static str = "set_coefficient";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_coefficient(
                    &self,
                    coefficient: types::set_coefficient::Coefficient,
                ) -> ::subxt::tx::Payload<types::SetCoefficient> {
                    ::subxt::tx::Payload::new_static(
                        "StakingCoefficientRewardCalculator",
                        "set_coefficient",
                        types::SetCoefficient { coefficient },
                        [
                            109u8, 57u8, 222u8, 245u8, 75u8, 1u8, 152u8, 229u8, 253u8, 80u8, 255u8,
                            98u8, 75u8, 135u8, 165u8, 13u8, 17u8, 179u8, 163u8, 52u8, 171u8, 214u8,
                            48u8, 76u8, 139u8, 210u8, 33u8, 154u8, 29u8, 184u8, 168u8, 165u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::staking_coefficient_reward::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CoefficientSet(pub coefficient_set::Field0);
            pub mod coefficient_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for CoefficientSet {
                const PALLET: &'static str = "StakingCoefficientRewardCalculator";
                const EVENT: &'static str = "CoefficientSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod coefficient_config {
                    use super::runtime_types;
                    pub type CoefficientConfig = ::core::primitive::u8;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn coefficient_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::coefficient_config::CoefficientConfig,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StakingCoefficientRewardCalculator",
                        "CoefficientConfig",
                        vec![],
                        [
                            77u8, 231u8, 236u8, 8u8, 122u8, 4u8, 82u8, 231u8, 116u8, 40u8, 84u8,
                            238u8, 248u8, 163u8, 232u8, 92u8, 214u8, 165u8, 156u8, 130u8, 253u8,
                            198u8, 254u8, 200u8, 6u8, 44u8, 10u8, 72u8, 62u8, 188u8, 180u8, 157u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcmp_queue {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
        pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceOverweight {
                    pub index: service_overweight::Index,
                    pub weight_limit: service_overweight::WeightLimit,
                }
                pub mod service_overweight {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u64;
                    pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "service_overweight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SuspendXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for SuspendXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "suspend_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResumeXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for ResumeXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "resume_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateSuspendThreshold {
                    pub new: update_suspend_threshold::New,
                }
                pub mod update_suspend_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateSuspendThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_suspend_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateDropThreshold {
                    pub new: update_drop_threshold::New,
                }
                pub mod update_drop_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateDropThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_drop_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateResumeThreshold {
                    pub new: update_resume_threshold::New,
                }
                pub mod update_resume_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateResumeThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_resume_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateThresholdWeight {
                    pub new: update_threshold_weight::New,
                }
                pub mod update_threshold_weight {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateThresholdWeight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_threshold_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateWeightRestrictDecay {
                    pub new: update_weight_restrict_decay::New,
                }
                pub mod update_weight_restrict_decay {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateWeightRestrictDecay {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_weight_restrict_decay";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateXcmpMaxIndividualWeight {
                    pub new: update_xcmp_max_individual_weight::New,
                }
                pub mod update_xcmp_max_individual_weight {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateXcmpMaxIndividualWeight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_xcmp_max_individual_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn service_overweight(
                    &self,
                    index: types::service_overweight::Index,
                    weight_limit: types::service_overweight::WeightLimit,
                ) -> ::subxt::tx::Payload<types::ServiceOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "service_overweight",
                        types::ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
                            50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
                            247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
                            7u8,
                        ],
                    )
                }
                pub fn suspend_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::SuspendXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "suspend_xcm_execution",
                        types::SuspendXcmExecution {},
                        [
                            54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
                            198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
                            22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
                        ],
                    )
                }
                pub fn resume_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::ResumeXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "resume_xcm_execution",
                        types::ResumeXcmExecution {},
                        [
                            173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
                            95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
                            71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
                        ],
                    )
                }
                pub fn update_suspend_threshold(
                    &self,
                    new: types::update_suspend_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateSuspendThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_suspend_threshold",
                        types::UpdateSuspendThreshold { new },
                        [
                            64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
                            39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
                            146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
                        ],
                    )
                }
                pub fn update_drop_threshold(
                    &self,
                    new: types::update_drop_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateDropThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_drop_threshold",
                        types::UpdateDropThreshold { new },
                        [
                            123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
                            186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
                            168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
                        ],
                    )
                }
                pub fn update_resume_threshold(
                    &self,
                    new: types::update_resume_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateResumeThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_resume_threshold",
                        types::UpdateResumeThreshold { new },
                        [
                            172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
                            182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
                            188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
                        ],
                    )
                }
                pub fn update_threshold_weight(
                    &self,
                    new: types::update_threshold_weight::New,
                ) -> ::subxt::tx::Payload<types::UpdateThresholdWeight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_threshold_weight",
                        types::UpdateThresholdWeight { new },
                        [
                            79u8, 1u8, 102u8, 119u8, 93u8, 104u8, 197u8, 189u8, 248u8, 215u8, 30u8,
                            227u8, 83u8, 26u8, 149u8, 99u8, 174u8, 191u8, 97u8, 82u8, 168u8, 128u8,
                            130u8, 136u8, 185u8, 54u8, 104u8, 186u8, 231u8, 11u8, 66u8, 184u8,
                        ],
                    )
                }
                pub fn update_weight_restrict_decay(
                    &self,
                    new: types::update_weight_restrict_decay::New,
                ) -> ::subxt::tx::Payload<types::UpdateWeightRestrictDecay> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_weight_restrict_decay",
                        types::UpdateWeightRestrictDecay { new },
                        [
                            37u8, 210u8, 52u8, 253u8, 67u8, 66u8, 63u8, 238u8, 117u8, 80u8, 77u8,
                            102u8, 166u8, 103u8, 173u8, 135u8, 54u8, 139u8, 100u8, 225u8, 115u8,
                            214u8, 160u8, 228u8, 195u8, 221u8, 160u8, 62u8, 192u8, 105u8, 188u8,
                            139u8,
                        ],
                    )
                }
                pub fn update_xcmp_max_individual_weight(
                    &self,
                    new: types::update_xcmp_max_individual_weight::New,
                ) -> ::subxt::tx::Payload<types::UpdateXcmpMaxIndividualWeight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_xcmp_max_individual_weight",
                        types::UpdateXcmpMaxIndividualWeight { new },
                        [
                            185u8, 199u8, 32u8, 102u8, 179u8, 139u8, 101u8, 14u8, 48u8, 173u8,
                            123u8, 158u8, 161u8, 153u8, 81u8, 109u8, 196u8, 217u8, 235u8, 150u8,
                            176u8, 55u8, 168u8, 31u8, 34u8, 251u8, 128u8, 53u8, 160u8, 220u8,
                            140u8, 174u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Success {
                pub message_hash: success::MessageHash,
                pub weight: success::Weight,
            }
            pub mod success {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for Success {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Success";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Fail {
                pub message_hash: fail::MessageHash,
                pub error: fail::Error,
                pub weight: fail::Weight,
            }
            pub mod fail {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                pub type Error = runtime_types::xcm::v3::traits::Error;
                pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for Fail {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Fail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BadVersion {
                pub message_hash: bad_version::MessageHash,
            }
            pub mod bad_version {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for BadVersion {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BadFormat {
                pub message_hash: bad_format::MessageHash,
            }
            pub mod bad_format {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for BadFormat {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct XcmpMessageSent {
                pub message_hash: xcmp_message_sent::MessageHash,
            }
            pub mod xcmp_message_sent {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for XcmpMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "XcmpMessageSent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OverweightEnqueued {
                pub sender: overweight_enqueued::Sender,
                pub sent_at: overweight_enqueued::SentAt,
                pub index: overweight_enqueued::Index,
                pub required: overweight_enqueued::Required,
            }
            pub mod overweight_enqueued {
                use super::runtime_types;
                pub type Sender = runtime_types::polkadot_parachain::primitives::Id;
                pub type SentAt = ::core::primitive::u32;
                pub type Index = ::core::primitive::u64;
                pub type Required = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OverweightServiced {
                pub index: overweight_serviced::Index,
                pub used: overweight_serviced::Used,
            }
            pub mod overweight_serviced {
                use super::runtime_types;
                pub type Index = ::core::primitive::u64;
                pub type Used = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod inbound_xcmp_status {
                    use super::runtime_types;
                    pub type InboundXcmpStatus = ::std::vec::Vec<
                        runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
                    >;
                }
                pub mod inbound_xcmp_messages {
                    use super::runtime_types;
                    pub type InboundXcmpMessages = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod outbound_xcmp_status {
                    use super::runtime_types;
                    pub type OutboundXcmpStatus = ::std::vec::Vec<
                        runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
                    >;
                }
                pub mod outbound_xcmp_messages {
                    use super::runtime_types;
                    pub type OutboundXcmpMessages = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod signal_messages {
                    use super::runtime_types;
                    pub type SignalMessages = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = runtime_types::polkadot_parachain::primitives::Id;
                }
                pub mod queue_config {
                    use super::runtime_types;
                    pub type QueueConfig =
                        runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
                }
                pub mod overweight {
                    use super::runtime_types;
                    pub type Overweight = (
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    );
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod counter_for_overweight {
                    use super::runtime_types;
                    pub type CounterForOverweight = ::core::primitive::u32;
                }
                pub mod overweight_count {
                    use super::runtime_types;
                    pub type OverweightCount = ::core::primitive::u64;
                }
                pub mod queue_suspended {
                    use super::runtime_types;
                    pub type QueueSuspended = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn inbound_xcmp_status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_xcmp_status::InboundXcmpStatus,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpStatus",
                        vec![],
                        [
                            216u8, 138u8, 138u8, 71u8, 210u8, 155u8, 255u8, 91u8, 44u8, 147u8,
                            80u8, 187u8, 203u8, 88u8, 34u8, 54u8, 80u8, 232u8, 249u8, 20u8, 169u8,
                            138u8, 123u8, 139u8, 182u8, 184u8, 0u8, 205u8, 101u8, 9u8, 194u8,
                            122u8,
                        ],
                    )
                }
                pub fn inbound_xcmp_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_xcmp_messages::InboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        vec![],
                        [
                            60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
                            213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
                            85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
                        ],
                    )
                }
                pub fn inbound_xcmp_messages_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_xcmp_messages::InboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
                            213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
                            85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
                        ],
                    )
                }
                pub fn inbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param0>,
                    _1: impl ::std::borrow::Borrow<types::inbound_xcmp_messages::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_xcmp_messages::InboundXcmpMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
                            213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
                            85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
                        ],
                    )
                }
                pub fn outbound_xcmp_status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_status::OutboundXcmpStatus,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpStatus",
                        vec![],
                        [
                            181u8, 5u8, 216u8, 176u8, 154u8, 233u8, 116u8, 14u8, 151u8, 1u8, 114u8,
                            16u8, 42u8, 20u8, 63u8, 233u8, 79u8, 122u8, 87u8, 255u8, 75u8, 149u8,
                            176u8, 106u8, 23u8, 101u8, 228u8, 120u8, 217u8, 167u8, 127u8, 117u8,
                        ],
                    )
                }
                pub fn outbound_xcmp_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                pub fn outbound_xcmp_messages_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                pub fn outbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                    _1: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                pub fn signal_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::signal_messages::SignalMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![],
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                pub fn signal_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::signal_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::signal_messages::SignalMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                pub fn queue_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queue_config::QueueConfig,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueConfig",
                        vec![],
                        [
                            112u8, 136u8, 198u8, 133u8, 5u8, 66u8, 33u8, 29u8, 99u8, 72u8, 70u8,
                            56u8, 182u8, 57u8, 48u8, 10u8, 135u8, 63u8, 103u8, 13u8, 143u8, 121u8,
                            12u8, 126u8, 207u8, 56u8, 244u8, 63u8, 126u8, 51u8, 100u8, 69u8,
                        ],
                    )
                }
                pub fn overweight_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::overweight::Overweight,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "Overweight",
                        vec![],
                        [
                            4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
                            234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
                            27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
                            81u8,
                        ],
                    )
                }
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::overweight::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::overweight::Overweight,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "Overweight",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
                            234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
                            27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
                            81u8,
                        ],
                    )
                }
                pub fn counter_for_overweight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::counter_for_overweight::CounterForOverweight,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "CounterForOverweight",
                        vec![],
                        [
                            44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
                            28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
                            143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
                            247u8, 0u8,
                        ],
                    )
                }
                pub fn overweight_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::overweight_count::OverweightCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OverweightCount",
                        vec![],
                        [
                            28u8, 72u8, 218u8, 167u8, 253u8, 30u8, 10u8, 51u8, 49u8, 101u8, 86u8,
                            26u8, 146u8, 2u8, 153u8, 232u8, 129u8, 38u8, 111u8, 105u8, 246u8, 84u8,
                            192u8, 157u8, 193u8, 57u8, 222u8, 122u8, 38u8, 160u8, 56u8, 39u8,
                        ],
                    )
                }
                pub fn queue_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queue_suspended::QueueSuspended,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueSuspended",
                        vec![],
                        [
                            165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
                            143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
                            129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod polkadot_xcm {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_xcm::pallet::Error;
        pub type Call = runtime_types::pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Send {
                    pub dest: ::std::boxed::Box<send::Dest>,
                    pub message: ::std::boxed::Box<send::Message>,
                }
                pub mod send {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type Message = runtime_types::xcm::VersionedXcm;
                }
                impl ::subxt::blocks::StaticExtrinsic for Send {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "send";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TeleportAssets {
                    pub dest: ::std::boxed::Box<teleport_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<teleport_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<teleport_assets::Assets>,
                    pub fee_asset_item: teleport_assets::FeeAssetItem,
                }
                pub mod teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
                    pub type Assets = runtime_types::xcm::VersionedMultiAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for TeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveTransferAssets {
                    pub dest: ::std::boxed::Box<reserve_transfer_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<reserve_transfer_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<reserve_transfer_assets::Assets>,
                    pub fee_asset_item: reserve_transfer_assets::FeeAssetItem,
                }
                pub mod reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
                    pub type Assets = runtime_types::xcm::VersionedMultiAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub message: ::std::boxed::Box<execute::Message>,
                    pub max_weight: execute::MaxWeight,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Message = runtime_types::xcm::VersionedXcm2;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceXcmVersion {
                    pub location: ::std::boxed::Box<force_xcm_version::Location>,
                    pub xcm_version: force_xcm_version::XcmVersion,
                }
                pub mod force_xcm_version {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::v3::multilocation::MultiLocation;
                    pub type XcmVersion = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceDefaultXcmVersion {
                    pub maybe_xcm_version: force_default_xcm_version::MaybeXcmVersion,
                }
                pub mod force_default_xcm_version {
                    use super::runtime_types;
                    pub type MaybeXcmVersion = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_default_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSubscribeVersionNotify {
                    pub location: ::std::boxed::Box<force_subscribe_version_notify::Location>,
                }
                pub mod force_subscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedMultiLocation;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_subscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnsubscribeVersionNotify {
                    pub location: ::std::boxed::Box<force_unsubscribe_version_notify::Location>,
                }
                pub mod force_unsubscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedMultiLocation;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_unsubscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LimitedReserveTransferAssets {
                    pub dest: ::std::boxed::Box<limited_reserve_transfer_assets::Dest>,
                    pub beneficiary:
                        ::std::boxed::Box<limited_reserve_transfer_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<limited_reserve_transfer_assets::Assets>,
                    pub fee_asset_item: limited_reserve_transfer_assets::FeeAssetItem,
                    pub weight_limit: limited_reserve_transfer_assets::WeightLimit,
                }
                pub mod limited_reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
                    pub type Assets = runtime_types::xcm::VersionedMultiAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LimitedTeleportAssets {
                    pub dest: ::std::boxed::Box<limited_teleport_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<limited_teleport_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<limited_teleport_assets::Assets>,
                    pub fee_asset_item: limited_teleport_assets::FeeAssetItem,
                    pub weight_limit: limited_teleport_assets::WeightLimit,
                }
                pub mod limited_teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedMultiLocation;
                    pub type Assets = runtime_types::xcm::VersionedMultiAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedTeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSuspension {
                    pub suspended: force_suspension::Suspended,
                }
                pub mod force_suspension {
                    use super::runtime_types;
                    pub type Suspended = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSuspension {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_suspension";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send(
                    &self,
                    dest: types::send::Dest,
                    message: types::send::Message,
                ) -> ::subxt::tx::Payload<types::Send> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "send",
                        types::Send {
                            dest: ::std::boxed::Box::new(dest),
                            message: ::std::boxed::Box::new(message),
                        },
                        [
                            147u8, 255u8, 86u8, 82u8, 17u8, 159u8, 225u8, 145u8, 220u8, 89u8, 71u8,
                            23u8, 193u8, 249u8, 12u8, 70u8, 19u8, 140u8, 232u8, 97u8, 12u8, 220u8,
                            113u8, 65u8, 4u8, 255u8, 138u8, 10u8, 231u8, 122u8, 67u8, 105u8,
                        ],
                    )
                }
                pub fn teleport_assets(
                    &self,
                    dest: types::teleport_assets::Dest,
                    beneficiary: types::teleport_assets::Beneficiary,
                    assets: types::teleport_assets::Assets,
                    fee_asset_item: types::teleport_assets::FeeAssetItem,
                ) -> ::subxt::tx::Payload<types::TeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "teleport_assets",
                        types::TeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            56u8, 144u8, 237u8, 60u8, 157u8, 5u8, 7u8, 129u8, 41u8, 149u8, 160u8,
                            100u8, 233u8, 102u8, 181u8, 140u8, 115u8, 213u8, 29u8, 132u8, 16u8,
                            30u8, 23u8, 82u8, 140u8, 134u8, 37u8, 87u8, 3u8, 99u8, 172u8, 42u8,
                        ],
                    )
                }
                pub fn reserve_transfer_assets(
                    &self,
                    dest: types::reserve_transfer_assets::Dest,
                    beneficiary: types::reserve_transfer_assets::Beneficiary,
                    assets: types::reserve_transfer_assets::Assets,
                    fee_asset_item: types::reserve_transfer_assets::FeeAssetItem,
                ) -> ::subxt::tx::Payload<types::ReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "reserve_transfer_assets",
                        types::ReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            21u8, 167u8, 44u8, 22u8, 210u8, 73u8, 148u8, 7u8, 91u8, 108u8, 148u8,
                            205u8, 170u8, 243u8, 142u8, 224u8, 205u8, 119u8, 252u8, 22u8, 203u8,
                            32u8, 73u8, 200u8, 178u8, 14u8, 167u8, 147u8, 166u8, 55u8, 14u8, 231u8,
                        ],
                    )
                }
                pub fn execute(
                    &self,
                    message: types::execute::Message,
                    max_weight: types::execute::MaxWeight,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "execute",
                        types::Execute {
                            message: ::std::boxed::Box::new(message),
                            max_weight,
                        },
                        [
                            15u8, 97u8, 86u8, 111u8, 105u8, 116u8, 109u8, 206u8, 70u8, 8u8, 57u8,
                            232u8, 133u8, 132u8, 30u8, 219u8, 34u8, 69u8, 0u8, 213u8, 98u8, 241u8,
                            186u8, 93u8, 216u8, 39u8, 73u8, 24u8, 193u8, 87u8, 92u8, 31u8,
                        ],
                    )
                }
                pub fn force_xcm_version(
                    &self,
                    location: types::force_xcm_version::Location,
                    xcm_version: types::force_xcm_version::XcmVersion,
                ) -> ::subxt::tx::Payload<types::ForceXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_xcm_version",
                        types::ForceXcmVersion {
                            location: ::std::boxed::Box::new(location),
                            xcm_version,
                        },
                        [
                            84u8, 212u8, 64u8, 161u8, 17u8, 129u8, 213u8, 129u8, 79u8, 86u8, 117u8,
                            246u8, 93u8, 1u8, 161u8, 23u8, 35u8, 171u8, 163u8, 200u8, 69u8, 157u8,
                            71u8, 8u8, 225u8, 149u8, 254u8, 124u8, 38u8, 250u8, 164u8, 218u8,
                        ],
                    )
                }
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: types::force_default_xcm_version::MaybeXcmVersion,
                ) -> ::subxt::tx::Payload<types::ForceDefaultXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_default_xcm_version",
                        types::ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
                            94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
                            237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
                            213u8,
                        ],
                    )
                }
                pub fn force_subscribe_version_notify(
                    &self,
                    location: types::force_subscribe_version_notify::Location,
                ) -> ::subxt::tx::Payload<types::ForceSubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_subscribe_version_notify",
                        types::ForceSubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            112u8, 254u8, 138u8, 12u8, 203u8, 176u8, 251u8, 167u8, 223u8, 0u8,
                            71u8, 148u8, 19u8, 179u8, 47u8, 96u8, 188u8, 189u8, 14u8, 172u8, 1u8,
                            1u8, 192u8, 107u8, 137u8, 158u8, 22u8, 9u8, 138u8, 241u8, 32u8, 47u8,
                        ],
                    )
                }
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: types::force_unsubscribe_version_notify::Location,
                ) -> ::subxt::tx::Payload<types::ForceUnsubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_unsubscribe_version_notify",
                        types::ForceUnsubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            205u8, 143u8, 230u8, 143u8, 166u8, 184u8, 53u8, 252u8, 118u8, 184u8,
                            209u8, 227u8, 225u8, 184u8, 254u8, 244u8, 101u8, 56u8, 27u8, 128u8,
                            40u8, 159u8, 178u8, 62u8, 63u8, 164u8, 59u8, 236u8, 1u8, 168u8, 202u8,
                            42u8,
                        ],
                    )
                }
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: types::limited_reserve_transfer_assets::Dest,
                    beneficiary: types::limited_reserve_transfer_assets::Beneficiary,
                    assets: types::limited_reserve_transfer_assets::Assets,
                    fee_asset_item: types::limited_reserve_transfer_assets::FeeAssetItem,
                    weight_limit: types::limited_reserve_transfer_assets::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_reserve_transfer_assets",
                        types::LimitedReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            10u8, 139u8, 165u8, 239u8, 92u8, 178u8, 169u8, 62u8, 166u8, 236u8,
                            50u8, 12u8, 196u8, 3u8, 233u8, 209u8, 3u8, 159u8, 184u8, 234u8, 171u8,
                            46u8, 145u8, 134u8, 241u8, 155u8, 221u8, 173u8, 166u8, 94u8, 147u8,
                            88u8,
                        ],
                    )
                }
                pub fn limited_teleport_assets(
                    &self,
                    dest: types::limited_teleport_assets::Dest,
                    beneficiary: types::limited_teleport_assets::Beneficiary,
                    assets: types::limited_teleport_assets::Assets,
                    fee_asset_item: types::limited_teleport_assets::FeeAssetItem,
                    weight_limit: types::limited_teleport_assets::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedTeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_teleport_assets",
                        types::LimitedTeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            156u8, 205u8, 105u8, 18u8, 120u8, 130u8, 144u8, 67u8, 152u8, 188u8,
                            109u8, 121u8, 4u8, 240u8, 123u8, 112u8, 72u8, 153u8, 2u8, 111u8, 183u8,
                            170u8, 199u8, 82u8, 33u8, 117u8, 43u8, 133u8, 208u8, 44u8, 118u8,
                            107u8,
                        ],
                    )
                }
                pub fn force_suspension(
                    &self,
                    suspended: types::force_suspension::Suspended,
                ) -> ::subxt::tx::Payload<types::ForceSuspension> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_suspension",
                        types::ForceSuspension { suspended },
                        [
                            78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
                            202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
                            154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Attempted(pub attempted::Field0);
            pub mod attempted {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::traits::Outcome;
            }
            impl ::subxt::events::StaticEvent for Attempted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Sent(pub sent::Field0, pub sent::Field1, pub sent::Field2);
            pub mod sent {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field2 = runtime_types::xcm::v3::Xcm;
            }
            impl ::subxt::events::StaticEvent for Sent {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Sent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnexpectedResponse(
                pub unexpected_response::Field0,
                pub unexpected_response::Field1,
            );
            pub mod unexpected_response {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ResponseReady(pub response_ready::Field0, pub response_ready::Field1);
            pub mod response_ready {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
                pub type Field1 = runtime_types::xcm::v3::Response;
            }
            impl ::subxt::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Notified(pub notified::Field0, pub notified::Field1, pub notified::Field2);
            pub mod notified {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
                pub type Field1 = ::core::primitive::u8;
                pub type Field2 = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for Notified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Notified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotifyOverweight(
                pub notify_overweight::Field0,
                pub notify_overweight::Field1,
                pub notify_overweight::Field2,
                pub notify_overweight::Field3,
                pub notify_overweight::Field4,
            );
            pub mod notify_overweight {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
                pub type Field1 = ::core::primitive::u8;
                pub type Field2 = ::core::primitive::u8;
                pub type Field3 = runtime_types::sp_weights::weight_v2::Weight;
                pub type Field4 = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotifyDispatchError(
                pub notify_dispatch_error::Field0,
                pub notify_dispatch_error::Field1,
                pub notify_dispatch_error::Field2,
            );
            pub mod notify_dispatch_error {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
                pub type Field1 = ::core::primitive::u8;
                pub type Field2 = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotifyDecodeFailed(
                pub notify_decode_failed::Field0,
                pub notify_decode_failed::Field1,
                pub notify_decode_failed::Field2,
            );
            pub mod notify_decode_failed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
                pub type Field1 = ::core::primitive::u8;
                pub type Field2 = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidResponder(
                pub invalid_responder::Field0,
                pub invalid_responder::Field1,
                pub invalid_responder::Field2,
            );
            pub mod invalid_responder {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
                pub type Field2 =
                    ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>;
            }
            impl ::subxt::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidResponderVersion(
                pub invalid_responder_version::Field0,
                pub invalid_responder_version::Field1,
            );
            pub mod invalid_responder_version {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ResponseTaken(pub response_taken::Field0);
            pub mod response_taken {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetsTrapped(
                pub assets_trapped::Field0,
                pub assets_trapped::Field1,
                pub assets_trapped::Field2,
            );
            pub mod assets_trapped {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::H256;
                pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field2 = runtime_types::xcm::VersionedMultiAssets;
            }
            impl ::subxt::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VersionChangeNotified(
                pub version_change_notified::Field0,
                pub version_change_notified::Field1,
                pub version_change_notified::Field2,
            );
            pub mod version_change_notified {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = runtime_types::xcm::v3::multiasset::MultiAssets;
            }
            impl ::subxt::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SupportedVersionChanged(
                pub supported_version_changed::Field0,
                pub supported_version_changed::Field1,
            );
            pub mod supported_version_changed {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotifyTargetSendFail(
                pub notify_target_send_fail::Field0,
                pub notify_target_send_fail::Field1,
                pub notify_target_send_fail::Field2,
            );
            pub mod notify_target_send_fail {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
                pub type Field2 = runtime_types::xcm::v3::traits::Error;
            }
            impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NotifyTargetMigrationFail(
                pub notify_target_migration_fail::Field0,
                pub notify_target_migration_fail::Field1,
            );
            pub mod notify_target_migration_fail {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::VersionedMultiLocation;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidQuerierVersion(
                pub invalid_querier_version::Field0,
                pub invalid_querier_version::Field1,
            );
            pub mod invalid_querier_version {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for InvalidQuerierVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerierVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidQuerier(
                pub invalid_querier::Field0,
                pub invalid_querier::Field1,
                pub invalid_querier::Field2,
                pub invalid_querier::Field3,
            );
            pub mod invalid_querier {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = ::core::primitive::u64;
                pub type Field2 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field3 =
                    ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>;
            }
            impl ::subxt::events::StaticEvent for InvalidQuerier {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerier";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VersionNotifyStarted(
                pub version_notify_started::Field0,
                pub version_notify_started::Field1,
            );
            pub mod version_notify_started {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
            }
            impl ::subxt::events::StaticEvent for VersionNotifyStarted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VersionNotifyRequested(
                pub version_notify_requested::Field0,
                pub version_notify_requested::Field1,
            );
            pub mod version_notify_requested {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
            }
            impl ::subxt::events::StaticEvent for VersionNotifyRequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VersionNotifyUnrequested(
                pub version_notify_unrequested::Field0,
                pub version_notify_unrequested::Field1,
            );
            pub mod version_notify_unrequested {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
            }
            impl ::subxt::events::StaticEvent for VersionNotifyUnrequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyUnrequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FeesPaid(pub fees_paid::Field0, pub fees_paid::Field1);
            pub mod fees_paid {
                use super::runtime_types;
                pub type Field0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field1 = runtime_types::xcm::v3::multiasset::MultiAssets;
            }
            impl ::subxt::events::StaticEvent for FeesPaid {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "FeesPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetsClaimed(
                pub assets_claimed::Field0,
                pub assets_claimed::Field1,
                pub assets_claimed::Field2,
            );
            pub mod assets_claimed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::H256;
                pub type Field1 = runtime_types::xcm::v3::multilocation::MultiLocation;
                pub type Field2 = runtime_types::xcm::VersionedMultiAssets;
            }
            impl ::subxt::events::StaticEvent for AssetsClaimed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsClaimed";
            }
        }
    }
    pub mod cumulus_xcm {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::cumulus_pallet_xcm::pallet::Error;
        pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidFormat(pub invalid_format::Field0);
            pub mod invalid_format {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnsupportedVersion(pub unsupported_version::Field0);
            pub mod unsupported_version {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExecutedDownward(
                pub executed_downward::Field0,
                pub executed_downward::Field1,
            );
            pub mod executed_downward {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
                pub type Field1 = runtime_types::xcm::v3::traits::Outcome;
            }
            impl ::subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "ExecutedDownward";
            }
        }
    }
    pub mod dmp_queue {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::cumulus_pallet_dmp_queue::pallet::Error;
        pub type Call = runtime_types::cumulus_pallet_dmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceOverweight {
                    pub index: service_overweight::Index,
                    pub weight_limit: service_overweight::WeightLimit,
                }
                pub mod service_overweight {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u64;
                    pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
                    const PALLET: &'static str = "DmpQueue";
                    const CALL: &'static str = "service_overweight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn service_overweight(
                    &self,
                    index: types::service_overweight::Index,
                    weight_limit: types::service_overweight::WeightLimit,
                ) -> ::subxt::tx::Payload<types::ServiceOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "DmpQueue",
                        "service_overweight",
                        types::ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
                            50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
                            247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
                            7u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InvalidFormat {
                pub message_id: invalid_format::MessageId,
            }
            pub mod invalid_format {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnsupportedVersion {
                pub message_id: unsupported_version::MessageId,
            }
            pub mod unsupported_version {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExecutedDownward {
                pub message_id: executed_downward::MessageId,
                pub outcome: executed_downward::Outcome,
            }
            pub mod executed_downward {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
                pub type Outcome = runtime_types::xcm::v3::traits::Outcome;
            }
            impl ::subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "ExecutedDownward";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WeightExhausted {
                pub message_id: weight_exhausted::MessageId,
                pub remaining_weight: weight_exhausted::RemainingWeight,
                pub required_weight: weight_exhausted::RequiredWeight,
            }
            pub mod weight_exhausted {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
                pub type RemainingWeight = runtime_types::sp_weights::weight_v2::Weight;
                pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for WeightExhausted {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "WeightExhausted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OverweightEnqueued {
                pub message_id: overweight_enqueued::MessageId,
                pub overweight_index: overweight_enqueued::OverweightIndex,
                pub required_weight: overweight_enqueued::RequiredWeight,
            }
            pub mod overweight_enqueued {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
                pub type OverweightIndex = ::core::primitive::u64;
                pub type RequiredWeight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OverweightServiced {
                pub overweight_index: overweight_serviced::OverweightIndex,
                pub weight_used: overweight_serviced::WeightUsed,
            }
            pub mod overweight_serviced {
                use super::runtime_types;
                pub type OverweightIndex = ::core::primitive::u64;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxMessagesExhausted {
                pub message_id: max_messages_exhausted::MessageId,
            }
            pub mod max_messages_exhausted {
                use super::runtime_types;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MaxMessagesExhausted {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "MaxMessagesExhausted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod configuration {
                    use super::runtime_types;
                    pub type Configuration = runtime_types::cumulus_pallet_dmp_queue::ConfigData;
                }
                pub mod page_index {
                    use super::runtime_types;
                    pub type PageIndex = runtime_types::cumulus_pallet_dmp_queue::PageIndexData;
                }
                pub mod pages {
                    use super::runtime_types;
                    pub type Pages = ::std::vec::Vec<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod overweight {
                    use super::runtime_types;
                    pub type Overweight =
                        (::core::primitive::u32, ::std::vec::Vec<::core::primitive::u8>);
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod counter_for_overweight {
                    use super::runtime_types;
                    pub type CounterForOverweight = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn configuration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::configuration::Configuration,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Configuration",
                        vec![],
                        [
                            28u8, 58u8, 57u8, 84u8, 115u8, 69u8, 158u8, 234u8, 180u8, 37u8, 138u8,
                            120u8, 182u8, 145u8, 109u8, 203u8, 62u8, 102u8, 168u8, 56u8, 236u8,
                            10u8, 236u8, 104u8, 232u8, 245u8, 107u8, 143u8, 247u8, 232u8, 135u8,
                            131u8,
                        ],
                    )
                }
                pub fn page_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::page_index::PageIndex,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "PageIndex",
                        vec![],
                        [
                            246u8, 129u8, 111u8, 255u8, 168u8, 54u8, 121u8, 21u8, 159u8, 142u8,
                            252u8, 173u8, 3u8, 191u8, 202u8, 158u8, 86u8, 26u8, 76u8, 134u8, 201u8,
                            138u8, 103u8, 75u8, 223u8, 57u8, 36u8, 45u8, 171u8, 190u8, 21u8, 60u8,
                        ],
                    )
                }
                pub fn pages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pages::Pages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Pages",
                        vec![],
                        [
                            24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
                            133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
                            30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
                        ],
                    )
                }
                pub fn pages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pages::Pages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Pages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
                            133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
                            30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
                        ],
                    )
                }
                pub fn overweight_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::overweight::Overweight,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Overweight",
                        vec![],
                        [
                            86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
                            48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
                            117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
                        ],
                    )
                }
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::overweight::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::overweight::Overweight,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Overweight",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
                            48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
                            117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
                        ],
                    )
                }
                pub fn counter_for_overweight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::counter_for_overweight::CounterForOverweight,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "CounterForOverweight",
                        vec![],
                        [
                            44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
                            28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
                            143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
                            247u8, 0u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod currencies {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::orml_currencies::module::Error;
        pub type Call = runtime_types::orml_currencies::module::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub dest: transfer::Dest,
                    pub currency_id: transfer::CurrencyId,
                    #[codec(compact)]
                    pub amount: transfer::Amount,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Currencies";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferNativeCurrency {
                    pub dest: transfer_native_currency::Dest,
                    #[codec(compact)]
                    pub amount: transfer_native_currency::Amount,
                }
                pub mod transfer_native_currency {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferNativeCurrency {
                    const PALLET: &'static str = "Currencies";
                    const CALL: &'static str = "transfer_native_currency";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateBalance {
                    pub who: update_balance::Who,
                    pub currency_id: update_balance::CurrencyId,
                    pub amount: update_balance::Amount,
                }
                pub mod update_balance {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                    pub type Amount = ::core::primitive::i128;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateBalance {
                    const PALLET: &'static str = "Currencies";
                    const CALL: &'static str = "update_balance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn transfer(
                    &self,
                    dest: types::transfer::Dest,
                    currency_id: types::transfer::CurrencyId,
                    amount: types::transfer::Amount,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Currencies",
                        "transfer",
                        types::Transfer {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            211u8, 195u8, 61u8, 109u8, 65u8, 15u8, 176u8, 125u8, 188u8, 204u8,
                            205u8, 99u8, 175u8, 232u8, 73u8, 6u8, 89u8, 135u8, 252u8, 54u8, 172u8,
                            89u8, 208u8, 73u8, 255u8, 48u8, 128u8, 182u8, 107u8, 195u8, 39u8, 24u8,
                        ],
                    )
                }
                pub fn transfer_native_currency(
                    &self,
                    dest: types::transfer_native_currency::Dest,
                    amount: types::transfer_native_currency::Amount,
                ) -> ::subxt::tx::Payload<types::TransferNativeCurrency> {
                    ::subxt::tx::Payload::new_static(
                        "Currencies",
                        "transfer_native_currency",
                        types::TransferNativeCurrency { dest, amount },
                        [
                            250u8, 143u8, 128u8, 147u8, 172u8, 107u8, 239u8, 203u8, 66u8, 157u8,
                            200u8, 132u8, 18u8, 189u8, 153u8, 91u8, 15u8, 86u8, 87u8, 84u8, 7u8,
                            148u8, 17u8, 186u8, 30u8, 131u8, 140u8, 220u8, 29u8, 145u8, 94u8, 73u8,
                        ],
                    )
                }
                pub fn update_balance(
                    &self,
                    who: types::update_balance::Who,
                    currency_id: types::update_balance::CurrencyId,
                    amount: types::update_balance::Amount,
                ) -> ::subxt::tx::Payload<types::UpdateBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Currencies",
                        "update_balance",
                        types::UpdateBalance {
                            who,
                            currency_id,
                            amount,
                        },
                        [
                            248u8, 49u8, 113u8, 154u8, 119u8, 64u8, 99u8, 126u8, 66u8, 41u8, 87u8,
                            178u8, 255u8, 208u8, 197u8, 7u8, 205u8, 155u8, 57u8, 238u8, 157u8,
                            244u8, 34u8, 230u8, 105u8, 241u8, 123u8, 8u8, 103u8, 9u8, 215u8, 79u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn get_native_currency_id(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                > {
                    ::subxt::constants::Address::new_static(
                        "Currencies",
                        "GetNativeCurrencyId",
                        [
                            123u8, 153u8, 254u8, 167u8, 168u8, 108u8, 235u8, 107u8, 13u8, 137u8,
                            112u8, 18u8, 206u8, 191u8, 37u8, 200u8, 96u8, 53u8, 56u8, 217u8, 146u8,
                            154u8, 116u8, 141u8, 40u8, 95u8, 10u8, 98u8, 166u8, 147u8, 192u8, 63u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tokens {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::orml_tokens::module::Error;
        pub type Event = runtime_types::orml_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Endowed {
                pub currency_id: endowed::CurrencyId,
                pub who: endowed::Who,
                pub amount: endowed::Amount,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DustLost {
                pub currency_id: dust_lost::CurrencyId,
                pub who: dust_lost::Who,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transfer {
                pub currency_id: transfer::CurrencyId,
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Reserved {
                pub currency_id: reserved::CurrencyId,
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unreserved {
                pub currency_id: unreserved::CurrencyId,
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveRepatriated {
                pub currency_id: reserve_repatriated::CurrencyId,
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub status: reserve_repatriated::Status,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
                pub type Status = runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BalanceSet {
                pub currency_id: balance_set::CurrencyId,
                pub who: balance_set::Who,
                pub free: balance_set::Free,
                pub reserved: balance_set::Reserved,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Free = ::core::primitive::u128;
                pub type Reserved = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TotalIssuanceSet {
                pub currency_id: total_issuance_set::CurrencyId,
                pub amount: total_issuance_set::Amount,
            }
            pub mod total_issuance_set {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TotalIssuanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "TotalIssuanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Withdrawn {
                pub currency_id: withdrawn::CurrencyId,
                pub who: withdrawn::Who,
                pub amount: withdrawn::Amount,
            }
            pub mod withdrawn {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slashed {
                pub currency_id: slashed::CurrencyId,
                pub who: slashed::Who,
                pub free_amount: slashed::FreeAmount,
                pub reserved_amount: slashed::ReservedAmount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type FreeAmount = ::core::primitive::u128;
                pub type ReservedAmount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deposited {
                pub currency_id: deposited::CurrencyId,
                pub who: deposited::Who,
                pub amount: deposited::Amount,
            }
            pub mod deposited {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LockSet {
                pub lock_id: lock_set::LockId,
                pub currency_id: lock_set::CurrencyId,
                pub who: lock_set::Who,
                pub amount: lock_set::Amount,
            }
            pub mod lock_set {
                use super::runtime_types;
                pub type LockId = [::core::primitive::u8; 8usize];
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for LockSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LockRemoved {
                pub lock_id: lock_removed::LockId,
                pub currency_id: lock_removed::CurrencyId,
                pub who: lock_removed::Who,
            }
            pub mod lock_removed {
                use super::runtime_types;
                pub type LockId = [::core::primitive::u8; 8usize];
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for LockRemoved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Locked {
                pub currency_id: locked::CurrencyId,
                pub who: locked::Who,
                pub amount: locked::Amount,
            }
            pub mod locked {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Locked {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Unlocked {
                pub currency_id: unlocked::CurrencyId,
                pub who: unlocked::Who,
                pub amount: unlocked::Amount,
            }
            pub mod unlocked {
                use super::runtime_types;
                pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unlocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u128;
                    pub type Param0 = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                }
                pub mod accounts {
                    use super::runtime_types;
                    pub type Accounts =
                        runtime_types::orml_tokens::AccountData<::core::primitive::u128>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::orml_tokens::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn total_issuance_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "TotalIssuance",
                        vec![],
                        [
                            215u8, 211u8, 145u8, 151u8, 57u8, 99u8, 14u8, 231u8, 211u8, 231u8,
                            142u8, 130u8, 144u8, 206u8, 119u8, 229u8, 16u8, 191u8, 56u8, 119u8,
                            63u8, 251u8, 16u8, 217u8, 253u8, 237u8, 223u8, 24u8, 107u8, 95u8,
                            110u8, 73u8,
                        ],
                    )
                }
                pub fn total_issuance(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::total_issuance::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "TotalIssuance",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            215u8, 211u8, 145u8, 151u8, 57u8, 99u8, 14u8, 231u8, 211u8, 231u8,
                            142u8, 130u8, 144u8, 206u8, 119u8, 229u8, 16u8, 191u8, 56u8, 119u8,
                            63u8, 251u8, 16u8, 217u8, 253u8, 237u8, 223u8, 24u8, 107u8, 95u8,
                            110u8, 73u8,
                        ],
                    )
                }
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Locks",
                        vec![],
                        [
                            152u8, 65u8, 237u8, 101u8, 187u8, 194u8, 210u8, 10u8, 112u8, 87u8,
                            20u8, 136u8, 219u8, 79u8, 199u8, 29u8, 83u8, 255u8, 171u8, 127u8,
                            136u8, 103u8, 72u8, 193u8, 33u8, 196u8, 211u8, 249u8, 188u8, 138u8,
                            177u8, 61u8,
                        ],
                    )
                }
                pub fn locks_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            152u8, 65u8, 237u8, 101u8, 187u8, 194u8, 210u8, 10u8, 112u8, 87u8,
                            20u8, 136u8, 219u8, 79u8, 199u8, 29u8, 83u8, 255u8, 171u8, 127u8,
                            136u8, 103u8, 72u8, 193u8, 33u8, 196u8, 211u8, 249u8, 188u8, 138u8,
                            177u8, 61u8,
                        ],
                    )
                }
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locks::Param0>,
                    _1: impl ::std::borrow::Borrow<types::locks::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Locks",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            152u8, 65u8, 237u8, 101u8, 187u8, 194u8, 210u8, 10u8, 112u8, 87u8,
                            20u8, 136u8, 219u8, 79u8, 199u8, 29u8, 83u8, 255u8, 171u8, 127u8,
                            136u8, 103u8, 72u8, 193u8, 33u8, 196u8, 211u8, 249u8, 188u8, 138u8,
                            177u8, 61u8,
                        ],
                    )
                }
                pub fn accounts_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::accounts::Accounts,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Accounts",
                        vec![],
                        [
                            37u8, 152u8, 79u8, 214u8, 235u8, 87u8, 224u8, 171u8, 213u8, 170u8,
                            206u8, 203u8, 79u8, 157u8, 136u8, 207u8, 215u8, 232u8, 193u8, 85u8,
                            50u8, 64u8, 128u8, 16u8, 236u8, 162u8, 60u8, 153u8, 179u8, 79u8, 208u8,
                            34u8,
                        ],
                    )
                }
                pub fn accounts_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::accounts::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::accounts::Accounts,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Accounts",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            37u8, 152u8, 79u8, 214u8, 235u8, 87u8, 224u8, 171u8, 213u8, 170u8,
                            206u8, 203u8, 79u8, 157u8, 136u8, 207u8, 215u8, 232u8, 193u8, 85u8,
                            50u8, 64u8, 128u8, 16u8, 236u8, 162u8, 60u8, 153u8, 179u8, 79u8, 208u8,
                            34u8,
                        ],
                    )
                }
                pub fn accounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::accounts::Param0>,
                    _1: impl ::std::borrow::Borrow<types::accounts::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::accounts::Accounts,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Accounts",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            37u8, 152u8, 79u8, 214u8, 235u8, 87u8, 224u8, 171u8, 213u8, 170u8,
                            206u8, 203u8, 79u8, 157u8, 136u8, 207u8, 215u8, 232u8, 193u8, 85u8,
                            50u8, 64u8, 128u8, 16u8, 236u8, 162u8, 60u8, 153u8, 179u8, 79u8, 208u8,
                            34u8,
                        ],
                    )
                }
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Reserves",
                        vec![],
                        [
                            34u8, 17u8, 243u8, 123u8, 111u8, 103u8, 133u8, 13u8, 88u8, 20u8, 155u8,
                            237u8, 162u8, 245u8, 233u8, 47u8, 109u8, 98u8, 115u8, 120u8, 229u8,
                            73u8, 205u8, 99u8, 18u8, 169u8, 142u8, 151u8, 187u8, 174u8, 38u8,
                            208u8,
                        ],
                    )
                }
                pub fn reserves_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            34u8, 17u8, 243u8, 123u8, 111u8, 103u8, 133u8, 13u8, 88u8, 20u8, 155u8,
                            237u8, 162u8, 245u8, 233u8, 47u8, 109u8, 98u8, 115u8, 120u8, 229u8,
                            73u8, 205u8, 99u8, 18u8, 169u8, 142u8, 151u8, 187u8, 174u8, 38u8,
                            208u8,
                        ],
                    )
                }
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::reserves::Param0>,
                    _1: impl ::std::borrow::Borrow<types::reserves::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tokens",
                        "Reserves",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            34u8, 17u8, 243u8, 123u8, 111u8, 103u8, 133u8, 13u8, 88u8, 20u8, 155u8,
                            237u8, 162u8, 245u8, 233u8, 47u8, 109u8, 98u8, 115u8, 120u8, 229u8,
                            73u8, 205u8, 99u8, 18u8, 169u8, 142u8, 151u8, 187u8, 174u8, 38u8,
                            208u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tokens",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tokens",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod x_tokens {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::orml_xtokens::module::Error;
        pub type Call = runtime_types::orml_xtokens::module::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub currency_id: transfer::CurrencyId,
                    pub amount: transfer::Amount,
                    pub dest: ::std::boxed::Box<transfer::Dest>,
                    pub dest_weight_limit: transfer::DestWeightLimit,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                    pub type Amount = ::core::primitive::u128;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiasset {
                    pub asset: ::std::boxed::Box<transfer_multiasset::Asset>,
                    pub dest: ::std::boxed::Box<transfer_multiasset::Dest>,
                    pub dest_weight_limit: transfer_multiasset::DestWeightLimit,
                }
                pub mod transfer_multiasset {
                    use super::runtime_types;
                    pub type Asset = runtime_types::xcm::VersionedMultiAsset;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiasset {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiasset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferWithFee {
                    pub currency_id: transfer_with_fee::CurrencyId,
                    pub amount: transfer_with_fee::Amount,
                    pub fee: transfer_with_fee::Fee,
                    pub dest: ::std::boxed::Box<transfer_with_fee::Dest>,
                    pub dest_weight_limit: transfer_with_fee::DestWeightLimit,
                }
                pub mod transfer_with_fee {
                    use super::runtime_types;
                    pub type CurrencyId = runtime_types::peaq_primitives_xcm::currency::CurrencyId;
                    pub type Amount = ::core::primitive::u128;
                    pub type Fee = ::core::primitive::u128;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferWithFee {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_with_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiassetWithFee {
                    pub asset: ::std::boxed::Box<transfer_multiasset_with_fee::Asset>,
                    pub fee: ::std::boxed::Box<transfer_multiasset_with_fee::Fee>,
                    pub dest: ::std::boxed::Box<transfer_multiasset_with_fee::Dest>,
                    pub dest_weight_limit: transfer_multiasset_with_fee::DestWeightLimit,
                }
                pub mod transfer_multiasset_with_fee {
                    use super::runtime_types;
                    pub type Asset = runtime_types::xcm::VersionedMultiAsset;
                    pub type Fee = runtime_types::xcm::VersionedMultiAsset;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiassetWithFee {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiasset_with_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMulticurrencies {
                    pub currencies: transfer_multicurrencies::Currencies,
                    pub fee_item: transfer_multicurrencies::FeeItem,
                    pub dest: ::std::boxed::Box<transfer_multicurrencies::Dest>,
                    pub dest_weight_limit: transfer_multicurrencies::DestWeightLimit,
                }
                pub mod transfer_multicurrencies {
                    use super::runtime_types;
                    pub type Currencies = ::std::vec::Vec<(
                        runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        ::core::primitive::u128,
                    )>;
                    pub type FeeItem = ::core::primitive::u32;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMulticurrencies {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multicurrencies";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiassets {
                    pub assets: ::std::boxed::Box<transfer_multiassets::Assets>,
                    pub fee_item: transfer_multiassets::FeeItem,
                    pub dest: ::std::boxed::Box<transfer_multiassets::Dest>,
                    pub dest_weight_limit: transfer_multiassets::DestWeightLimit,
                }
                pub mod transfer_multiassets {
                    use super::runtime_types;
                    pub type Assets = runtime_types::xcm::VersionedMultiAssets;
                    pub type FeeItem = ::core::primitive::u32;
                    pub type Dest = runtime_types::xcm::VersionedMultiLocation;
                    pub type DestWeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiassets {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiassets";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn transfer(
                    &self,
                    currency_id: types::transfer::CurrencyId,
                    amount: types::transfer::Amount,
                    dest: types::transfer::Dest,
                    dest_weight_limit: types::transfer::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer",
                        types::Transfer {
                            currency_id,
                            amount,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            36u8, 79u8, 129u8, 210u8, 105u8, 26u8, 42u8, 123u8, 36u8, 141u8, 215u8,
                            130u8, 128u8, 91u8, 129u8, 127u8, 118u8, 57u8, 189u8, 11u8, 94u8,
                            248u8, 249u8, 255u8, 188u8, 125u8, 87u8, 244u8, 103u8, 60u8, 172u8,
                            191u8,
                        ],
                    )
                }
                pub fn transfer_multiasset(
                    &self,
                    asset: types::transfer_multiasset::Asset,
                    dest: types::transfer_multiasset::Dest,
                    dest_weight_limit: types::transfer_multiasset::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiasset> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiasset",
                        types::TransferMultiasset {
                            asset: ::std::boxed::Box::new(asset),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            41u8, 136u8, 12u8, 95u8, 87u8, 89u8, 79u8, 94u8, 22u8, 194u8, 186u8,
                            131u8, 93u8, 130u8, 219u8, 51u8, 45u8, 231u8, 203u8, 58u8, 230u8, 43u8,
                            165u8, 117u8, 141u8, 64u8, 99u8, 128u8, 62u8, 30u8, 122u8, 27u8,
                        ],
                    )
                }
                pub fn transfer_with_fee(
                    &self,
                    currency_id: types::transfer_with_fee::CurrencyId,
                    amount: types::transfer_with_fee::Amount,
                    fee: types::transfer_with_fee::Fee,
                    dest: types::transfer_with_fee::Dest,
                    dest_weight_limit: types::transfer_with_fee::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferWithFee> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_with_fee",
                        types::TransferWithFee {
                            currency_id,
                            amount,
                            fee,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            220u8, 153u8, 87u8, 125u8, 172u8, 102u8, 247u8, 57u8, 67u8, 220u8,
                            161u8, 135u8, 42u8, 197u8, 144u8, 25u8, 250u8, 127u8, 176u8, 222u8,
                            216u8, 126u8, 38u8, 6u8, 106u8, 237u8, 233u8, 3u8, 176u8, 169u8, 193u8,
                            93u8,
                        ],
                    )
                }
                pub fn transfer_multiasset_with_fee(
                    &self,
                    asset: types::transfer_multiasset_with_fee::Asset,
                    fee: types::transfer_multiasset_with_fee::Fee,
                    dest: types::transfer_multiasset_with_fee::Dest,
                    dest_weight_limit: types::transfer_multiasset_with_fee::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiassetWithFee> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiasset_with_fee",
                        types::TransferMultiassetWithFee {
                            asset: ::std::boxed::Box::new(asset),
                            fee: ::std::boxed::Box::new(fee),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            255u8, 67u8, 191u8, 126u8, 174u8, 56u8, 54u8, 112u8, 9u8, 247u8, 225u8,
                            96u8, 118u8, 107u8, 27u8, 185u8, 42u8, 217u8, 21u8, 26u8, 139u8, 78u8,
                            82u8, 179u8, 143u8, 209u8, 122u8, 145u8, 157u8, 209u8, 219u8, 211u8,
                        ],
                    )
                }
                pub fn transfer_multicurrencies(
                    &self,
                    currencies: types::transfer_multicurrencies::Currencies,
                    fee_item: types::transfer_multicurrencies::FeeItem,
                    dest: types::transfer_multicurrencies::Dest,
                    dest_weight_limit: types::transfer_multicurrencies::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMulticurrencies> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multicurrencies",
                        types::TransferMulticurrencies {
                            currencies,
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            243u8, 171u8, 41u8, 1u8, 216u8, 178u8, 36u8, 222u8, 3u8, 173u8, 0u8,
                            139u8, 204u8, 242u8, 75u8, 91u8, 222u8, 233u8, 72u8, 83u8, 19u8, 219u8,
                            142u8, 70u8, 194u8, 166u8, 175u8, 206u8, 125u8, 228u8, 215u8, 221u8,
                        ],
                    )
                }
                pub fn transfer_multiassets(
                    &self,
                    assets: types::transfer_multiassets::Assets,
                    fee_item: types::transfer_multiassets::FeeItem,
                    dest: types::transfer_multiassets::Dest,
                    dest_weight_limit: types::transfer_multiassets::DestWeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiassets> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiassets",
                        types::TransferMultiassets {
                            assets: ::std::boxed::Box::new(assets),
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            62u8, 97u8, 148u8, 111u8, 216u8, 123u8, 216u8, 191u8, 196u8, 99u8,
                            227u8, 31u8, 20u8, 178u8, 202u8, 25u8, 48u8, 132u8, 186u8, 196u8,
                            150u8, 69u8, 51u8, 252u8, 250u8, 237u8, 177u8, 214u8, 246u8, 85u8,
                            239u8, 137u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::orml_xtokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferredMultiAssets {
                pub sender: transferred_multi_assets::Sender,
                pub assets: transferred_multi_assets::Assets,
                pub fee: transferred_multi_assets::Fee,
                pub dest: transferred_multi_assets::Dest,
            }
            pub mod transferred_multi_assets {
                use super::runtime_types;
                pub type Sender = ::subxt::utils::AccountId32;
                pub type Assets = runtime_types::xcm::v3::multiasset::MultiAssets;
                pub type Fee = runtime_types::xcm::v3::multiasset::MultiAsset;
                pub type Dest = runtime_types::xcm::v3::multilocation::MultiLocation;
            }
            impl ::subxt::events::StaticEvent for TransferredMultiAssets {
                const PALLET: &'static str = "XTokens";
                const EVENT: &'static str = "TransferredMultiAssets";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
            }
            pub struct StorageApi;
            impl StorageApi {}
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn self_location(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::xcm::v3::multilocation::MultiLocation>
                {
                    ::subxt::constants::Address::new_static(
                        "XTokens",
                        "SelfLocation",
                        [
                            111u8, 216u8, 110u8, 49u8, 228u8, 60u8, 105u8, 227u8, 141u8, 11u8,
                            125u8, 36u8, 252u8, 184u8, 156u8, 242u8, 146u8, 64u8, 244u8, 7u8, 70u8,
                            186u8, 11u8, 235u8, 13u8, 254u8, 132u8, 2u8, 154u8, 117u8, 85u8, 154u8,
                        ],
                    )
                }
                pub fn base_xcm_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "XTokens",
                        "BaseXcmWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod unknown_tokens {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::orml_unknown_tokens::module::Error;
        pub type Event = runtime_types::orml_unknown_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Deposited {
                pub asset: deposited::Asset,
                pub who: deposited::Who,
            }
            pub mod deposited {
                use super::runtime_types;
                pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
                pub type Who = runtime_types::xcm::v3::multilocation::MultiLocation;
            }
            impl ::subxt::events::StaticEvent for Deposited {
                const PALLET: &'static str = "UnknownTokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Withdrawn {
                pub asset: withdrawn::Asset,
                pub who: withdrawn::Who,
            }
            pub mod withdrawn {
                use super::runtime_types;
                pub type Asset = runtime_types::xcm::v3::multiasset::MultiAsset;
                pub type Who = runtime_types::xcm::v3::multilocation::MultiLocation;
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "UnknownTokens";
                const EVENT: &'static str = "Withdrawn";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod concrete_fungible_balances {
                    use super::runtime_types;
                    pub type ConcreteFungibleBalances = ::core::primitive::u128;
                    pub type Param0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                    pub type Param1 = runtime_types::xcm::v3::multilocation::MultiLocation;
                }
                pub mod abstract_fungible_balances {
                    use super::runtime_types;
                    pub type AbstractFungibleBalances = ::core::primitive::u128;
                    pub type Param0 = runtime_types::xcm::v3::multilocation::MultiLocation;
                    pub type Param1 = [::core::primitive::u8];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn concrete_fungible_balances_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::concrete_fungible_balances::ConcreteFungibleBalances,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "ConcreteFungibleBalances",
                        vec![],
                        [
                            228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
                            4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
                            93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
                        ],
                    )
                }
                pub fn concrete_fungible_balances_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::concrete_fungible_balances::ConcreteFungibleBalances,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "ConcreteFungibleBalances",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
                            4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
                            93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
                        ],
                    )
                }
                pub fn concrete_fungible_balances(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param0>,
                    _1: impl ::std::borrow::Borrow<types::concrete_fungible_balances::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::concrete_fungible_balances::ConcreteFungibleBalances,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "ConcreteFungibleBalances",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            228u8, 155u8, 200u8, 118u8, 186u8, 86u8, 50u8, 35u8, 240u8, 17u8, 69u8,
                            4u8, 146u8, 149u8, 215u8, 144u8, 23u8, 163u8, 5u8, 69u8, 229u8, 60u8,
                            93u8, 236u8, 213u8, 78u8, 199u8, 4u8, 80u8, 57u8, 112u8, 170u8,
                        ],
                    )
                }
                pub fn abstract_fungible_balances_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::abstract_fungible_balances::AbstractFungibleBalances,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "AbstractFungibleBalances",
                        vec![],
                        [
                            222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
                            127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
                            186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
                        ],
                    )
                }
                pub fn abstract_fungible_balances_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::abstract_fungible_balances::AbstractFungibleBalances,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "AbstractFungibleBalances",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
                            127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
                            186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
                        ],
                    )
                }
                pub fn abstract_fungible_balances(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param0>,
                    _1: impl ::std::borrow::Borrow<types::abstract_fungible_balances::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::abstract_fungible_balances::AbstractFungibleBalances,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "UnknownTokens",
                        "AbstractFungibleBalances",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            222u8, 175u8, 193u8, 209u8, 199u8, 214u8, 193u8, 232u8, 181u8, 205u8,
                            127u8, 184u8, 127u8, 50u8, 238u8, 14u8, 93u8, 84u8, 28u8, 99u8, 255u8,
                            186u8, 22u8, 105u8, 86u8, 42u8, 253u8, 42u8, 119u8, 91u8, 170u8, 89u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod zenlink_protocol {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::zenlink_protocol::pallet::Error;
        pub type Call = runtime_types::zenlink_protocol::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFeeReceiver {
                    pub send_to: set_fee_receiver::SendTo,
                }
                pub mod set_fee_receiver {
                    use super::runtime_types;
                    pub type SendTo = ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFeeReceiver {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "set_fee_receiver";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFeePoint {
                    pub fee_point: set_fee_point::FeePoint,
                }
                pub mod set_fee_point {
                    use super::runtime_types;
                    pub type FeePoint = ::core::primitive::u8;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFeePoint {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "set_fee_point";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub asset_id: transfer::AssetId,
                    pub recipient: transfer::Recipient,
                    #[codec(compact)]
                    pub amount: transfer::Amount,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type AssetId = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreatePair {
                    pub asset_0: create_pair::Asset0,
                    pub asset_1: create_pair::Asset1,
                }
                pub mod create_pair {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                impl ::subxt::blocks::StaticExtrinsic for CreatePair {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "create_pair";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddLiquidity {
                    pub asset_0: add_liquidity::Asset0,
                    pub asset_1: add_liquidity::Asset1,
                    #[codec(compact)]
                    pub amount_0_desired: add_liquidity::Amount0Desired,
                    #[codec(compact)]
                    pub amount_1_desired: add_liquidity::Amount1Desired,
                    #[codec(compact)]
                    pub amount_0_min: add_liquidity::Amount0Min,
                    #[codec(compact)]
                    pub amount_1_min: add_liquidity::Amount1Min,
                    #[codec(compact)]
                    pub deadline: add_liquidity::Deadline,
                }
                pub mod add_liquidity {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Amount0Desired = ::core::primitive::u128;
                    pub type Amount1Desired = ::core::primitive::u128;
                    pub type Amount0Min = ::core::primitive::u128;
                    pub type Amount1Min = ::core::primitive::u128;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddLiquidity {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "add_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveLiquidity {
                    pub asset_0: remove_liquidity::Asset0,
                    pub asset_1: remove_liquidity::Asset1,
                    #[codec(compact)]
                    pub liquidity: remove_liquidity::Liquidity,
                    #[codec(compact)]
                    pub amount_0_min: remove_liquidity::Amount0Min,
                    #[codec(compact)]
                    pub amount_1_min: remove_liquidity::Amount1Min,
                    pub recipient: remove_liquidity::Recipient,
                    #[codec(compact)]
                    pub deadline: remove_liquidity::Deadline,
                }
                pub mod remove_liquidity {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Liquidity = ::core::primitive::u128;
                    pub type Amount0Min = ::core::primitive::u128;
                    pub type Amount1Min = ::core::primitive::u128;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidity {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "remove_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapExactAssetsForAssets {
                    #[codec(compact)]
                    pub amount_in: swap_exact_assets_for_assets::AmountIn,
                    #[codec(compact)]
                    pub amount_out_min: swap_exact_assets_for_assets::AmountOutMin,
                    pub path: swap_exact_assets_for_assets::Path,
                    pub recipient: swap_exact_assets_for_assets::Recipient,
                    #[codec(compact)]
                    pub deadline: swap_exact_assets_for_assets::Deadline,
                }
                pub mod swap_exact_assets_for_assets {
                    use super::runtime_types;
                    pub type AmountIn = ::core::primitive::u128;
                    pub type AmountOutMin = ::core::primitive::u128;
                    pub type Path =
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapExactAssetsForAssets {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "swap_exact_assets_for_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapAssetsForExactAssets {
                    #[codec(compact)]
                    pub amount_out: swap_assets_for_exact_assets::AmountOut,
                    #[codec(compact)]
                    pub amount_in_max: swap_assets_for_exact_assets::AmountInMax,
                    pub path: swap_assets_for_exact_assets::Path,
                    pub recipient: swap_assets_for_exact_assets::Recipient,
                    #[codec(compact)]
                    pub deadline: swap_assets_for_exact_assets::Deadline,
                }
                pub mod swap_assets_for_exact_assets {
                    use super::runtime_types;
                    pub type AmountOut = ::core::primitive::u128;
                    pub type AmountInMax = ::core::primitive::u128;
                    pub type Path =
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapAssetsForExactAssets {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "swap_assets_for_exact_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapCreate {
                    pub asset_0: bootstrap_create::Asset0,
                    pub asset_1: bootstrap_create::Asset1,
                    #[codec(compact)]
                    pub target_supply_0: bootstrap_create::TargetSupply0,
                    #[codec(compact)]
                    pub target_supply_1: bootstrap_create::TargetSupply1,
                    #[codec(compact)]
                    pub capacity_supply_0: bootstrap_create::CapacitySupply0,
                    #[codec(compact)]
                    pub capacity_supply_1: bootstrap_create::CapacitySupply1,
                    #[codec(compact)]
                    pub end: bootstrap_create::End,
                    pub rewards: bootstrap_create::Rewards,
                    pub limits: bootstrap_create::Limits,
                }
                pub mod bootstrap_create {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type TargetSupply0 = ::core::primitive::u128;
                    pub type TargetSupply1 = ::core::primitive::u128;
                    pub type CapacitySupply0 = ::core::primitive::u128;
                    pub type CapacitySupply1 = ::core::primitive::u128;
                    pub type End = ::core::primitive::u32;
                    pub type Rewards =
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                    pub type Limits = ::std::vec::Vec<(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapCreate {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapContribute {
                    pub asset_0: bootstrap_contribute::Asset0,
                    pub asset_1: bootstrap_contribute::Asset1,
                    #[codec(compact)]
                    pub amount_0_contribute: bootstrap_contribute::Amount0Contribute,
                    #[codec(compact)]
                    pub amount_1_contribute: bootstrap_contribute::Amount1Contribute,
                    #[codec(compact)]
                    pub deadline: bootstrap_contribute::Deadline,
                }
                pub mod bootstrap_contribute {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Amount0Contribute = ::core::primitive::u128;
                    pub type Amount1Contribute = ::core::primitive::u128;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapContribute {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_contribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapClaim {
                    pub recipient: bootstrap_claim::Recipient,
                    pub asset_0: bootstrap_claim::Asset0,
                    pub asset_1: bootstrap_claim::Asset1,
                    #[codec(compact)]
                    pub deadline: bootstrap_claim::Deadline,
                }
                pub mod bootstrap_claim {
                    use super::runtime_types;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Deadline = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapClaim {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_claim";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapEnd {
                    pub asset_0: bootstrap_end::Asset0,
                    pub asset_1: bootstrap_end::Asset1,
                }
                pub mod bootstrap_end {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapEnd {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_end";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapUpdate {
                    pub asset_0: bootstrap_update::Asset0,
                    pub asset_1: bootstrap_update::Asset1,
                    #[codec(compact)]
                    pub target_supply_0: bootstrap_update::TargetSupply0,
                    #[codec(compact)]
                    pub target_supply_1: bootstrap_update::TargetSupply1,
                    #[codec(compact)]
                    pub capacity_supply_0: bootstrap_update::CapacitySupply0,
                    #[codec(compact)]
                    pub capacity_supply_1: bootstrap_update::CapacitySupply1,
                    #[codec(compact)]
                    pub end: bootstrap_update::End,
                    pub rewards: bootstrap_update::Rewards,
                    pub limits: bootstrap_update::Limits,
                }
                pub mod bootstrap_update {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type TargetSupply0 = ::core::primitive::u128;
                    pub type TargetSupply1 = ::core::primitive::u128;
                    pub type CapacitySupply0 = ::core::primitive::u128;
                    pub type CapacitySupply1 = ::core::primitive::u128;
                    pub type End = ::core::primitive::u32;
                    pub type Rewards =
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                    pub type Limits = ::std::vec::Vec<(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapUpdate {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_update";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapRefund {
                    pub asset_0: bootstrap_refund::Asset0,
                    pub asset_1: bootstrap_refund::Asset1,
                }
                pub mod bootstrap_refund {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapRefund {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_refund";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapChargeReward {
                    pub asset_0: bootstrap_charge_reward::Asset0,
                    pub asset_1: bootstrap_charge_reward::Asset1,
                    pub charge_rewards: bootstrap_charge_reward::ChargeRewards,
                }
                pub mod bootstrap_charge_reward {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type ChargeRewards = ::std::vec::Vec<(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapChargeReward {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_charge_reward";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapWithdrawReward {
                    pub asset_0: bootstrap_withdraw_reward::Asset0,
                    pub asset_1: bootstrap_withdraw_reward::Asset1,
                    pub recipient: bootstrap_withdraw_reward::Recipient,
                }
                pub mod bootstrap_withdraw_reward {
                    use super::runtime_types;
                    pub type Asset0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Asset1 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Recipient = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for BootstrapWithdrawReward {
                    const PALLET: &'static str = "ZenlinkProtocol";
                    const CALL: &'static str = "bootstrap_withdraw_reward";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_fee_receiver(
                    &self,
                    send_to: types::set_fee_receiver::SendTo,
                ) -> ::subxt::tx::Payload<types::SetFeeReceiver> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "set_fee_receiver",
                        types::SetFeeReceiver { send_to },
                        [
                            75u8, 162u8, 14u8, 33u8, 8u8, 108u8, 78u8, 111u8, 25u8, 59u8, 90u8,
                            103u8, 175u8, 180u8, 22u8, 0u8, 75u8, 227u8, 219u8, 170u8, 242u8,
                            152u8, 245u8, 252u8, 120u8, 98u8, 231u8, 195u8, 45u8, 188u8, 210u8,
                            128u8,
                        ],
                    )
                }
                pub fn set_fee_point(
                    &self,
                    fee_point: types::set_fee_point::FeePoint,
                ) -> ::subxt::tx::Payload<types::SetFeePoint> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "set_fee_point",
                        types::SetFeePoint { fee_point },
                        [
                            247u8, 195u8, 149u8, 11u8, 152u8, 102u8, 40u8, 110u8, 7u8, 45u8, 67u8,
                            136u8, 136u8, 110u8, 98u8, 163u8, 91u8, 82u8, 7u8, 171u8, 206u8, 105u8,
                            113u8, 132u8, 159u8, 174u8, 156u8, 194u8, 77u8, 18u8, 207u8, 180u8,
                        ],
                    )
                }
                pub fn transfer(
                    &self,
                    asset_id: types::transfer::AssetId,
                    recipient: types::transfer::Recipient,
                    amount: types::transfer::Amount,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "transfer",
                        types::Transfer {
                            asset_id,
                            recipient,
                            amount,
                        },
                        [
                            241u8, 44u8, 229u8, 151u8, 74u8, 228u8, 239u8, 102u8, 15u8, 145u8,
                            46u8, 142u8, 151u8, 243u8, 181u8, 224u8, 2u8, 190u8, 188u8, 72u8, 26u8,
                            42u8, 220u8, 122u8, 81u8, 24u8, 25u8, 250u8, 63u8, 231u8, 89u8, 176u8,
                        ],
                    )
                }
                pub fn create_pair(
                    &self,
                    asset_0: types::create_pair::Asset0,
                    asset_1: types::create_pair::Asset1,
                ) -> ::subxt::tx::Payload<types::CreatePair> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "create_pair",
                        types::CreatePair { asset_0, asset_1 },
                        [
                            11u8, 183u8, 244u8, 237u8, 38u8, 250u8, 20u8, 132u8, 89u8, 218u8,
                            130u8, 131u8, 150u8, 94u8, 31u8, 40u8, 242u8, 21u8, 126u8, 212u8,
                            198u8, 180u8, 221u8, 39u8, 148u8, 95u8, 74u8, 62u8, 76u8, 191u8, 100u8,
                            37u8,
                        ],
                    )
                }
                pub fn add_liquidity(
                    &self,
                    asset_0: types::add_liquidity::Asset0,
                    asset_1: types::add_liquidity::Asset1,
                    amount_0_desired: types::add_liquidity::Amount0Desired,
                    amount_1_desired: types::add_liquidity::Amount1Desired,
                    amount_0_min: types::add_liquidity::Amount0Min,
                    amount_1_min: types::add_liquidity::Amount1Min,
                    deadline: types::add_liquidity::Deadline,
                ) -> ::subxt::tx::Payload<types::AddLiquidity> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "add_liquidity",
                        types::AddLiquidity {
                            asset_0,
                            asset_1,
                            amount_0_desired,
                            amount_1_desired,
                            amount_0_min,
                            amount_1_min,
                            deadline,
                        },
                        [
                            44u8, 6u8, 29u8, 158u8, 24u8, 59u8, 64u8, 56u8, 25u8, 214u8, 213u8,
                            43u8, 30u8, 166u8, 249u8, 210u8, 38u8, 90u8, 181u8, 99u8, 45u8, 26u8,
                            180u8, 99u8, 83u8, 117u8, 94u8, 1u8, 121u8, 239u8, 146u8, 151u8,
                        ],
                    )
                }
                pub fn remove_liquidity(
                    &self,
                    asset_0: types::remove_liquidity::Asset0,
                    asset_1: types::remove_liquidity::Asset1,
                    liquidity: types::remove_liquidity::Liquidity,
                    amount_0_min: types::remove_liquidity::Amount0Min,
                    amount_1_min: types::remove_liquidity::Amount1Min,
                    recipient: types::remove_liquidity::Recipient,
                    deadline: types::remove_liquidity::Deadline,
                ) -> ::subxt::tx::Payload<types::RemoveLiquidity> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "remove_liquidity",
                        types::RemoveLiquidity {
                            asset_0,
                            asset_1,
                            liquidity,
                            amount_0_min,
                            amount_1_min,
                            recipient,
                            deadline,
                        },
                        [
                            243u8, 85u8, 26u8, 153u8, 55u8, 200u8, 55u8, 222u8, 101u8, 159u8, 51u8,
                            178u8, 214u8, 117u8, 155u8, 90u8, 13u8, 153u8, 87u8, 237u8, 193u8,
                            192u8, 73u8, 224u8, 82u8, 238u8, 136u8, 168u8, 25u8, 80u8, 253u8, 6u8,
                        ],
                    )
                }
                pub fn swap_exact_assets_for_assets(
                    &self,
                    amount_in: types::swap_exact_assets_for_assets::AmountIn,
                    amount_out_min: types::swap_exact_assets_for_assets::AmountOutMin,
                    path: types::swap_exact_assets_for_assets::Path,
                    recipient: types::swap_exact_assets_for_assets::Recipient,
                    deadline: types::swap_exact_assets_for_assets::Deadline,
                ) -> ::subxt::tx::Payload<types::SwapExactAssetsForAssets> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "swap_exact_assets_for_assets",
                        types::SwapExactAssetsForAssets {
                            amount_in,
                            amount_out_min,
                            path,
                            recipient,
                            deadline,
                        },
                        [
                            2u8, 215u8, 86u8, 203u8, 46u8, 171u8, 17u8, 172u8, 70u8, 16u8, 199u8,
                            213u8, 91u8, 87u8, 107u8, 61u8, 80u8, 204u8, 158u8, 230u8, 232u8,
                            167u8, 228u8, 13u8, 132u8, 141u8, 197u8, 165u8, 175u8, 83u8, 28u8,
                            25u8,
                        ],
                    )
                }
                pub fn swap_assets_for_exact_assets(
                    &self,
                    amount_out: types::swap_assets_for_exact_assets::AmountOut,
                    amount_in_max: types::swap_assets_for_exact_assets::AmountInMax,
                    path: types::swap_assets_for_exact_assets::Path,
                    recipient: types::swap_assets_for_exact_assets::Recipient,
                    deadline: types::swap_assets_for_exact_assets::Deadline,
                ) -> ::subxt::tx::Payload<types::SwapAssetsForExactAssets> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "swap_assets_for_exact_assets",
                        types::SwapAssetsForExactAssets {
                            amount_out,
                            amount_in_max,
                            path,
                            recipient,
                            deadline,
                        },
                        [
                            43u8, 156u8, 53u8, 162u8, 44u8, 152u8, 13u8, 35u8, 177u8, 135u8, 89u8,
                            158u8, 35u8, 151u8, 170u8, 207u8, 140u8, 253u8, 141u8, 124u8, 82u8,
                            193u8, 124u8, 187u8, 205u8, 132u8, 37u8, 165u8, 169u8, 234u8, 3u8,
                            177u8,
                        ],
                    )
                }
                pub fn bootstrap_create(
                    &self,
                    asset_0: types::bootstrap_create::Asset0,
                    asset_1: types::bootstrap_create::Asset1,
                    target_supply_0: types::bootstrap_create::TargetSupply0,
                    target_supply_1: types::bootstrap_create::TargetSupply1,
                    capacity_supply_0: types::bootstrap_create::CapacitySupply0,
                    capacity_supply_1: types::bootstrap_create::CapacitySupply1,
                    end: types::bootstrap_create::End,
                    rewards: types::bootstrap_create::Rewards,
                    limits: types::bootstrap_create::Limits,
                ) -> ::subxt::tx::Payload<types::BootstrapCreate> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_create",
                        types::BootstrapCreate {
                            asset_0,
                            asset_1,
                            target_supply_0,
                            target_supply_1,
                            capacity_supply_0,
                            capacity_supply_1,
                            end,
                            rewards,
                            limits,
                        },
                        [
                            144u8, 61u8, 97u8, 130u8, 36u8, 191u8, 250u8, 151u8, 72u8, 221u8,
                            213u8, 72u8, 57u8, 119u8, 196u8, 105u8, 21u8, 101u8, 24u8, 32u8, 58u8,
                            187u8, 36u8, 18u8, 24u8, 253u8, 16u8, 173u8, 167u8, 243u8, 118u8, 8u8,
                        ],
                    )
                }
                pub fn bootstrap_contribute(
                    &self,
                    asset_0: types::bootstrap_contribute::Asset0,
                    asset_1: types::bootstrap_contribute::Asset1,
                    amount_0_contribute: types::bootstrap_contribute::Amount0Contribute,
                    amount_1_contribute: types::bootstrap_contribute::Amount1Contribute,
                    deadline: types::bootstrap_contribute::Deadline,
                ) -> ::subxt::tx::Payload<types::BootstrapContribute> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_contribute",
                        types::BootstrapContribute {
                            asset_0,
                            asset_1,
                            amount_0_contribute,
                            amount_1_contribute,
                            deadline,
                        },
                        [
                            233u8, 26u8, 52u8, 125u8, 192u8, 247u8, 156u8, 64u8, 153u8, 67u8,
                            180u8, 120u8, 141u8, 154u8, 192u8, 143u8, 39u8, 120u8, 59u8, 90u8,
                            18u8, 199u8, 110u8, 59u8, 220u8, 244u8, 36u8, 213u8, 194u8, 20u8,
                            240u8, 142u8,
                        ],
                    )
                }
                pub fn bootstrap_claim(
                    &self,
                    recipient: types::bootstrap_claim::Recipient,
                    asset_0: types::bootstrap_claim::Asset0,
                    asset_1: types::bootstrap_claim::Asset1,
                    deadline: types::bootstrap_claim::Deadline,
                ) -> ::subxt::tx::Payload<types::BootstrapClaim> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_claim",
                        types::BootstrapClaim {
                            recipient,
                            asset_0,
                            asset_1,
                            deadline,
                        },
                        [
                            80u8, 19u8, 252u8, 149u8, 28u8, 92u8, 99u8, 113u8, 20u8, 199u8, 8u8,
                            117u8, 136u8, 222u8, 157u8, 145u8, 204u8, 181u8, 74u8, 31u8, 220u8,
                            122u8, 101u8, 183u8, 159u8, 194u8, 50u8, 87u8, 229u8, 44u8, 2u8, 180u8,
                        ],
                    )
                }
                pub fn bootstrap_end(
                    &self,
                    asset_0: types::bootstrap_end::Asset0,
                    asset_1: types::bootstrap_end::Asset1,
                ) -> ::subxt::tx::Payload<types::BootstrapEnd> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_end",
                        types::BootstrapEnd { asset_0, asset_1 },
                        [
                            247u8, 52u8, 65u8, 250u8, 3u8, 136u8, 198u8, 8u8, 26u8, 5u8, 175u8,
                            100u8, 63u8, 83u8, 28u8, 201u8, 122u8, 66u8, 143u8, 198u8, 117u8, 0u8,
                            10u8, 72u8, 77u8, 6u8, 72u8, 179u8, 63u8, 159u8, 204u8, 220u8,
                        ],
                    )
                }
                pub fn bootstrap_update(
                    &self,
                    asset_0: types::bootstrap_update::Asset0,
                    asset_1: types::bootstrap_update::Asset1,
                    target_supply_0: types::bootstrap_update::TargetSupply0,
                    target_supply_1: types::bootstrap_update::TargetSupply1,
                    capacity_supply_0: types::bootstrap_update::CapacitySupply0,
                    capacity_supply_1: types::bootstrap_update::CapacitySupply1,
                    end: types::bootstrap_update::End,
                    rewards: types::bootstrap_update::Rewards,
                    limits: types::bootstrap_update::Limits,
                ) -> ::subxt::tx::Payload<types::BootstrapUpdate> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_update",
                        types::BootstrapUpdate {
                            asset_0,
                            asset_1,
                            target_supply_0,
                            target_supply_1,
                            capacity_supply_0,
                            capacity_supply_1,
                            end,
                            rewards,
                            limits,
                        },
                        [
                            3u8, 21u8, 57u8, 45u8, 203u8, 47u8, 137u8, 177u8, 153u8, 255u8, 81u8,
                            227u8, 120u8, 123u8, 195u8, 2u8, 200u8, 77u8, 215u8, 168u8, 116u8,
                            69u8, 56u8, 57u8, 92u8, 35u8, 146u8, 1u8, 130u8, 206u8, 157u8, 196u8,
                        ],
                    )
                }
                pub fn bootstrap_refund(
                    &self,
                    asset_0: types::bootstrap_refund::Asset0,
                    asset_1: types::bootstrap_refund::Asset1,
                ) -> ::subxt::tx::Payload<types::BootstrapRefund> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_refund",
                        types::BootstrapRefund { asset_0, asset_1 },
                        [
                            147u8, 236u8, 131u8, 152u8, 127u8, 253u8, 145u8, 74u8, 186u8, 101u8,
                            118u8, 123u8, 175u8, 1u8, 158u8, 27u8, 103u8, 183u8, 156u8, 122u8, 6u8,
                            67u8, 211u8, 8u8, 6u8, 176u8, 176u8, 37u8, 244u8, 26u8, 221u8, 39u8,
                        ],
                    )
                }
                pub fn bootstrap_charge_reward(
                    &self,
                    asset_0: types::bootstrap_charge_reward::Asset0,
                    asset_1: types::bootstrap_charge_reward::Asset1,
                    charge_rewards: types::bootstrap_charge_reward::ChargeRewards,
                ) -> ::subxt::tx::Payload<types::BootstrapChargeReward> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_charge_reward",
                        types::BootstrapChargeReward {
                            asset_0,
                            asset_1,
                            charge_rewards,
                        },
                        [
                            25u8, 159u8, 127u8, 103u8, 37u8, 144u8, 10u8, 69u8, 99u8, 246u8, 221u8,
                            215u8, 89u8, 239u8, 2u8, 179u8, 92u8, 179u8, 199u8, 57u8, 190u8, 106u8,
                            68u8, 157u8, 214u8, 158u8, 150u8, 10u8, 205u8, 113u8, 154u8, 137u8,
                        ],
                    )
                }
                pub fn bootstrap_withdraw_reward(
                    &self,
                    asset_0: types::bootstrap_withdraw_reward::Asset0,
                    asset_1: types::bootstrap_withdraw_reward::Asset1,
                    recipient: types::bootstrap_withdraw_reward::Recipient,
                ) -> ::subxt::tx::Payload<types::BootstrapWithdrawReward> {
                    ::subxt::tx::Payload::new_static(
                        "ZenlinkProtocol",
                        "bootstrap_withdraw_reward",
                        types::BootstrapWithdrawReward {
                            asset_0,
                            asset_1,
                            recipient,
                        },
                        [
                            158u8, 223u8, 88u8, 160u8, 116u8, 118u8, 34u8, 157u8, 61u8, 200u8,
                            201u8, 169u8, 109u8, 192u8, 218u8, 234u8, 185u8, 231u8, 220u8, 240u8,
                            180u8, 135u8, 95u8, 64u8, 140u8, 110u8, 132u8, 30u8, 112u8, 179u8,
                            51u8, 129u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::zenlink_protocol::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Transferred(
                pub transferred::Field0,
                pub transferred::Field1,
                pub transferred::Field2,
                pub transferred::Field3,
            );
            pub mod transferred {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Burned(pub burned::Field0, pub burned::Field1, pub burned::Field2);
            pub mod burned {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Minted(pub minted::Field0, pub minted::Field1, pub minted::Field2);
            pub mod minted {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Minted {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PairCreated(pub pair_created::Field0, pub pair_created::Field1);
            pub mod pair_created {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
            }
            impl ::subxt::events::StaticEvent for PairCreated {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "PairCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LiquidityAdded(
                pub liquidity_added::Field0,
                pub liquidity_added::Field1,
                pub liquidity_added::Field2,
                pub liquidity_added::Field3,
                pub liquidity_added::Field4,
                pub liquidity_added::Field5,
            );
            pub mod liquidity_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field3 = ::core::primitive::u128;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for LiquidityAdded {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "LiquidityAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LiquidityRemoved(
                pub liquidity_removed::Field0,
                pub liquidity_removed::Field1,
                pub liquidity_removed::Field2,
                pub liquidity_removed::Field3,
                pub liquidity_removed::Field4,
                pub liquidity_removed::Field5,
                pub liquidity_removed::Field6,
            );
            pub mod liquidity_removed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
                pub type Field6 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for LiquidityRemoved {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "LiquidityRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetSwap(
                pub asset_swap::Field0,
                pub asset_swap::Field1,
                pub asset_swap::Field2,
                pub asset_swap::Field3,
            );
            pub mod asset_swap {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 =
                    ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                pub type Field3 = ::std::vec::Vec<::core::primitive::u128>;
            }
            impl ::subxt::events::StaticEvent for AssetSwap {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "AssetSwap";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransferredToParachain(
                pub transferred_to_parachain::Field0,
                pub transferred_to_parachain::Field1,
                pub transferred_to_parachain::Field2,
                pub transferred_to_parachain::Field3,
                pub transferred_to_parachain::Field4,
                pub transferred_to_parachain::Field5,
            );
            pub mod transferred_to_parachain {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = runtime_types::polkadot_parachain::primitives::Id;
                pub type Field3 = ::subxt::utils::AccountId32;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for TransferredToParachain {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "TransferredToParachain";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapContribute(
                pub bootstrap_contribute::Field0,
                pub bootstrap_contribute::Field1,
                pub bootstrap_contribute::Field2,
                pub bootstrap_contribute::Field3,
                pub bootstrap_contribute::Field4,
            );
            pub mod bootstrap_contribute {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field4 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BootstrapContribute {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapContribute";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapEnd(
                pub bootstrap_end::Field0,
                pub bootstrap_end::Field1,
                pub bootstrap_end::Field2,
                pub bootstrap_end::Field3,
                pub bootstrap_end::Field4,
            );
            pub mod bootstrap_end {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
                pub type Field4 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BootstrapEnd {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapEnd";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapCreated(
                pub bootstrap_created::Field0,
                pub bootstrap_created::Field1,
                pub bootstrap_created::Field2,
                pub bootstrap_created::Field3,
                pub bootstrap_created::Field4,
                pub bootstrap_created::Field5,
                pub bootstrap_created::Field6,
                pub bootstrap_created::Field7,
            );
            pub mod bootstrap_created {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field3 = ::core::primitive::u128;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
                pub type Field6 = ::core::primitive::u128;
                pub type Field7 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for BootstrapCreated {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapClaim(
                pub bootstrap_claim::Field0,
                pub bootstrap_claim::Field1,
                pub bootstrap_claim::Field2,
                pub bootstrap_claim::Field3,
                pub bootstrap_claim::Field4,
                pub bootstrap_claim::Field5,
                pub bootstrap_claim::Field6,
                pub bootstrap_claim::Field7,
            );
            pub mod bootstrap_claim {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field4 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field5 = ::core::primitive::u128;
                pub type Field6 = ::core::primitive::u128;
                pub type Field7 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BootstrapClaim {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapClaim";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapUpdate(
                pub bootstrap_update::Field0,
                pub bootstrap_update::Field1,
                pub bootstrap_update::Field2,
                pub bootstrap_update::Field3,
                pub bootstrap_update::Field4,
                pub bootstrap_update::Field5,
                pub bootstrap_update::Field6,
                pub bootstrap_update::Field7,
            );
            pub mod bootstrap_update {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field3 = ::core::primitive::u128;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
                pub type Field6 = ::core::primitive::u128;
                pub type Field7 = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for BootstrapUpdate {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapUpdate";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BootstrapRefund(
                pub bootstrap_refund::Field0,
                pub bootstrap_refund::Field1,
                pub bootstrap_refund::Field2,
                pub bootstrap_refund::Field3,
                pub bootstrap_refund::Field4,
                pub bootstrap_refund::Field5,
            );
            pub mod bootstrap_refund {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field3 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BootstrapRefund {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "BootstrapRefund";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DistributeReward(
                pub distribute_reward::Field0,
                pub distribute_reward::Field1,
                pub distribute_reward::Field2,
                pub distribute_reward::Field3,
            );
            pub mod distribute_reward {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = ::std::vec::Vec<(
                    runtime_types::zenlink_protocol::primitives::AssetId,
                    ::core::primitive::u128,
                )>;
            }
            impl ::subxt::events::StaticEvent for DistributeReward {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "DistributeReward";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeReward(
                pub charge_reward::Field0,
                pub charge_reward::Field1,
                pub charge_reward::Field2,
                pub charge_reward::Field3,
            );
            pub mod charge_reward {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = ::subxt::utils::AccountId32;
                pub type Field3 = ::std::vec::Vec<(
                    runtime_types::zenlink_protocol::primitives::AssetId,
                    ::core::primitive::u128,
                )>;
            }
            impl ::subxt::events::StaticEvent for ChargeReward {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "ChargeReward";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WithdrawReward(
                pub withdraw_reward::Field0,
                pub withdraw_reward::Field1,
                pub withdraw_reward::Field2,
            );
            pub mod withdraw_reward {
                use super::runtime_types;
                pub type Field0 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field1 = runtime_types::zenlink_protocol::primitives::AssetId;
                pub type Field2 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for WithdrawReward {
                const PALLET: &'static str = "ZenlinkProtocol";
                const EVENT: &'static str = "WithdrawReward";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod foreign_ledger {
                    use super::runtime_types;
                    pub type ForeignLedger = ::core::primitive::u128;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod foreign_meta {
                    use super::runtime_types;
                    pub type ForeignMeta = ::core::primitive::u128;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod foreign_list {
                    use super::runtime_types;
                    pub type ForeignList =
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>;
                }
                pub mod k_last {
                    use super::runtime_types;
                    pub type KLast = runtime_types::primitive_types::U256;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod fee_meta {
                    use super::runtime_types;
                    pub type FeeMeta = (
                        ::core::option::Option<::subxt::utils::AccountId32>,
                        ::core::primitive::u8,
                    );
                }
                pub mod liquidity_pairs {
                    use super::runtime_types;
                    pub type LiquidityPairs = ::core::option::Option<
                        runtime_types::zenlink_protocol::primitives::AssetId,
                    >;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod pair_statuses {
                    use super::runtime_types;
                    pub type PairStatuses = runtime_types::zenlink_protocol::primitives::PairStatus<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::subxt::utils::AccountId32,
                    >;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod bootstrap_personal_supply {
                    use super::runtime_types;
                    pub type BootstrapPersonalSupply =
                        (::core::primitive::u128, ::core::primitive::u128);
                    pub type Param0 = (
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                    );
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod bootstrap_end_status {
                    use super::runtime_types;
                    pub type BootstrapEndStatus =
                        runtime_types::zenlink_protocol::primitives::PairStatus<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::subxt::utils::AccountId32,
                        >;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod bootstrap_rewards {
                    use super::runtime_types;
                    pub type BootstrapRewards = ::subxt::utils::KeyedVec<
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
                pub mod bootstrap_limits {
                    use super::runtime_types;
                    pub type BootstrapLimits = ::subxt::utils::KeyedVec<
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = runtime_types::zenlink_protocol::primitives::AssetId;
                    pub type Param1 = runtime_types::zenlink_protocol::primitives::AssetId;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn foreign_ledger_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_ledger::ForeignLedger,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignLedger",
                        vec![],
                        [
                            190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
                            188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
                            176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
                            177u8, 251u8,
                        ],
                    )
                }
                pub fn foreign_ledger_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::foreign_ledger::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_ledger::ForeignLedger,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignLedger",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
                            188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
                            176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
                            177u8, 251u8,
                        ],
                    )
                }
                pub fn foreign_ledger(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::foreign_ledger::Param0>,
                    _1: impl ::std::borrow::Borrow<types::foreign_ledger::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_ledger::ForeignLedger,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignLedger",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            190u8, 60u8, 102u8, 215u8, 244u8, 227u8, 87u8, 65u8, 196u8, 88u8,
                            188u8, 94u8, 176u8, 189u8, 255u8, 141u8, 5u8, 101u8, 115u8, 71u8,
                            176u8, 5u8, 236u8, 162u8, 189u8, 164u8, 14u8, 246u8, 183u8, 159u8,
                            177u8, 251u8,
                        ],
                    )
                }
                pub fn foreign_meta_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_meta::ForeignMeta,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignMeta",
                        vec![],
                        [
                            173u8, 150u8, 46u8, 46u8, 101u8, 18u8, 132u8, 191u8, 234u8, 6u8, 42u8,
                            131u8, 54u8, 88u8, 125u8, 231u8, 170u8, 235u8, 125u8, 171u8, 144u8,
                            247u8, 103u8, 195u8, 110u8, 88u8, 93u8, 253u8, 54u8, 239u8, 30u8,
                            200u8,
                        ],
                    )
                }
                pub fn foreign_meta(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::foreign_meta::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_meta::ForeignMeta,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignMeta",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            173u8, 150u8, 46u8, 46u8, 101u8, 18u8, 132u8, 191u8, 234u8, 6u8, 42u8,
                            131u8, 54u8, 88u8, 125u8, 231u8, 170u8, 235u8, 125u8, 171u8, 144u8,
                            247u8, 103u8, 195u8, 110u8, 88u8, 93u8, 253u8, 54u8, 239u8, 30u8,
                            200u8,
                        ],
                    )
                }
                pub fn foreign_list(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::foreign_list::ForeignList,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "ForeignList",
                        vec![],
                        [
                            150u8, 118u8, 147u8, 51u8, 220u8, 128u8, 90u8, 50u8, 70u8, 209u8, 93u8,
                            150u8, 226u8, 110u8, 48u8, 117u8, 99u8, 140u8, 57u8, 207u8, 176u8,
                            119u8, 34u8, 184u8, 17u8, 108u8, 3u8, 162u8, 179u8, 106u8, 119u8, 39u8,
                        ],
                    )
                }
                pub fn k_last_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::k_last::KLast,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "KLast",
                        vec![],
                        [
                            85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
                            215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
                            204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
                        ],
                    )
                }
                pub fn k_last_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::k_last::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::k_last::KLast,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "KLast",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
                            215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
                            204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
                        ],
                    )
                }
                pub fn k_last(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::k_last::Param0>,
                    _1: impl ::std::borrow::Borrow<types::k_last::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::k_last::KLast,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "KLast",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            85u8, 169u8, 252u8, 216u8, 188u8, 217u8, 63u8, 117u8, 56u8, 35u8,
                            215u8, 23u8, 174u8, 160u8, 21u8, 101u8, 206u8, 63u8, 83u8, 50u8, 251u8,
                            204u8, 166u8, 60u8, 133u8, 223u8, 179u8, 29u8, 2u8, 198u8, 47u8, 171u8,
                        ],
                    )
                }
                pub fn fee_meta(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::fee_meta::FeeMeta,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "FeeMeta",
                        vec![],
                        [
                            250u8, 151u8, 188u8, 44u8, 82u8, 45u8, 214u8, 208u8, 92u8, 212u8,
                            169u8, 188u8, 14u8, 215u8, 16u8, 76u8, 47u8, 114u8, 22u8, 11u8, 113u8,
                            50u8, 228u8, 175u8, 186u8, 67u8, 90u8, 243u8, 158u8, 63u8, 133u8, 94u8,
                        ],
                    )
                }
                pub fn liquidity_pairs_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::liquidity_pairs::LiquidityPairs,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "LiquidityPairs",
                        vec![],
                        [
                            22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
                            236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
                            101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
                            223u8,
                        ],
                    )
                }
                pub fn liquidity_pairs_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::liquidity_pairs::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::liquidity_pairs::LiquidityPairs,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "LiquidityPairs",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
                            236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
                            101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
                            223u8,
                        ],
                    )
                }
                pub fn liquidity_pairs(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::liquidity_pairs::Param0>,
                    _1: impl ::std::borrow::Borrow<types::liquidity_pairs::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::liquidity_pairs::LiquidityPairs,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "LiquidityPairs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            22u8, 124u8, 30u8, 156u8, 195u8, 153u8, 166u8, 183u8, 197u8, 188u8,
                            236u8, 25u8, 197u8, 16u8, 120u8, 87u8, 57u8, 192u8, 214u8, 196u8, 49u8,
                            101u8, 247u8, 67u8, 104u8, 30u8, 187u8, 242u8, 97u8, 234u8, 176u8,
                            223u8,
                        ],
                    )
                }
                pub fn pair_statuses_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pair_statuses::PairStatuses,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "PairStatuses",
                        vec![],
                        [
                            235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
                            95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
                            55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
                        ],
                    )
                }
                pub fn pair_statuses_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pair_statuses::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pair_statuses::PairStatuses,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "PairStatuses",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
                            95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
                            55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
                        ],
                    )
                }
                pub fn pair_statuses(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pair_statuses::Param0>,
                    _1: impl ::std::borrow::Borrow<types::pair_statuses::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pair_statuses::PairStatuses,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "PairStatuses",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            235u8, 9u8, 156u8, 201u8, 202u8, 250u8, 89u8, 150u8, 112u8, 238u8,
                            95u8, 37u8, 13u8, 78u8, 133u8, 63u8, 10u8, 226u8, 241u8, 1u8, 91u8,
                            55u8, 169u8, 77u8, 143u8, 100u8, 72u8, 26u8, 128u8, 84u8, 108u8, 3u8,
                        ],
                    )
                }
                pub fn bootstrap_personal_supply_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_personal_supply::BootstrapPersonalSupply,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapPersonalSupply",
                        vec![],
                        [
                            118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
                            254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
                            226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
                            13u8, 16u8,
                        ],
                    )
                }
                pub fn bootstrap_personal_supply_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_personal_supply::BootstrapPersonalSupply,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapPersonalSupply",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
                            254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
                            226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
                            13u8, 16u8,
                        ],
                    )
                }
                pub fn bootstrap_personal_supply(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param0>,
                    _1: impl ::std::borrow::Borrow<types::bootstrap_personal_supply::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_personal_supply::BootstrapPersonalSupply,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapPersonalSupply",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            118u8, 179u8, 242u8, 51u8, 31u8, 75u8, 116u8, 79u8, 153u8, 171u8,
                            254u8, 230u8, 190u8, 52u8, 125u8, 219u8, 135u8, 27u8, 253u8, 11u8,
                            226u8, 130u8, 112u8, 193u8, 37u8, 22u8, 25u8, 233u8, 200u8, 190u8,
                            13u8, 16u8,
                        ],
                    )
                }
                pub fn bootstrap_end_status_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_end_status::BootstrapEndStatus,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapEndStatus",
                        vec![],
                        [
                            243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
                            251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
                            136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
                            219u8,
                        ],
                    )
                }
                pub fn bootstrap_end_status_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_end_status::BootstrapEndStatus,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapEndStatus",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
                            251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
                            136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
                            219u8,
                        ],
                    )
                }
                pub fn bootstrap_end_status(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param0>,
                    _1: impl ::std::borrow::Borrow<types::bootstrap_end_status::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_end_status::BootstrapEndStatus,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapEndStatus",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            243u8, 177u8, 63u8, 219u8, 118u8, 15u8, 220u8, 226u8, 245u8, 173u8,
                            251u8, 106u8, 156u8, 20u8, 46u8, 23u8, 57u8, 247u8, 220u8, 54u8, 97u8,
                            136u8, 84u8, 107u8, 13u8, 170u8, 29u8, 160u8, 252u8, 68u8, 148u8,
                            219u8,
                        ],
                    )
                }
                pub fn bootstrap_rewards_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_rewards::BootstrapRewards,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapRewards",
                        vec![],
                        [
                            81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
                            185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
                            50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
                        ],
                    )
                }
                pub fn bootstrap_rewards_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_rewards::BootstrapRewards,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapRewards",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
                            185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
                            50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
                        ],
                    )
                }
                pub fn bootstrap_rewards(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param0>,
                    _1: impl ::std::borrow::Borrow<types::bootstrap_rewards::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_rewards::BootstrapRewards,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapRewards",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            81u8, 230u8, 182u8, 237u8, 40u8, 190u8, 45u8, 170u8, 121u8, 81u8, 7u8,
                            185u8, 46u8, 121u8, 3u8, 55u8, 37u8, 187u8, 145u8, 120u8, 94u8, 253u8,
                            50u8, 222u8, 167u8, 76u8, 160u8, 132u8, 25u8, 220u8, 229u8, 199u8,
                        ],
                    )
                }
                pub fn bootstrap_limits_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_limits::BootstrapLimits,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapLimits",
                        vec![],
                        [
                            138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
                            215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
                            160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
                            183u8, 82u8,
                        ],
                    )
                }
                pub fn bootstrap_limits_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_limits::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_limits::BootstrapLimits,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapLimits",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
                            215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
                            160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
                            183u8, 82u8,
                        ],
                    )
                }
                pub fn bootstrap_limits(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bootstrap_limits::Param0>,
                    _1: impl ::std::borrow::Borrow<types::bootstrap_limits::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bootstrap_limits::BootstrapLimits,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ZenlinkProtocol",
                        "BootstrapLimits",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            138u8, 139u8, 161u8, 79u8, 212u8, 230u8, 121u8, 226u8, 143u8, 135u8,
                            215u8, 151u8, 32u8, 166u8, 109u8, 200u8, 112u8, 160u8, 19u8, 209u8,
                            160u8, 142u8, 197u8, 151u8, 249u8, 15u8, 58u8, 164u8, 171u8, 247u8,
                            183u8, 82u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "ZenlinkProtocol",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_vesting::pallet::Error;
        pub type Call = runtime_types::pallet_vesting::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vest;
                impl ::subxt::blocks::StaticExtrinsic for Vest {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestOther {
                    pub target: vest_other::Target,
                }
                pub mod vest_other {
                    use super::runtime_types;
                    pub type Target = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for VestOther {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestedTransfer {
                    pub target: vested_transfer::Target,
                    pub schedule: vested_transfer::Schedule,
                }
                pub mod vested_transfer {
                    use super::runtime_types;
                    pub type Target = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Schedule = runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for VestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceVestedTransfer {
                    pub source: force_vested_transfer::Source,
                    pub target: force_vested_transfer::Target,
                    pub schedule: force_vested_transfer::Schedule,
                }
                pub mod force_vested_transfer {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Target = ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Schedule = runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceVestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MergeSchedules {
                    pub schedule1_index: merge_schedules::Schedule1Index,
                    pub schedule2_index: merge_schedules::Schedule2Index,
                }
                pub mod merge_schedules {
                    use super::runtime_types;
                    pub type Schedule1Index = ::core::primitive::u32;
                    pub type Schedule2Index = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for MergeSchedules {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "merge_schedules";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn vest(&self) -> ::subxt::tx::Payload<types::Vest> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest",
                        types::Vest {},
                        [
                            149u8, 89u8, 178u8, 148u8, 127u8, 127u8, 155u8, 60u8, 114u8, 126u8,
                            204u8, 123u8, 166u8, 70u8, 104u8, 208u8, 186u8, 69u8, 139u8, 181u8,
                            151u8, 154u8, 235u8, 161u8, 191u8, 35u8, 111u8, 60u8, 21u8, 165u8,
                            44u8, 122u8,
                        ],
                    )
                }
                pub fn vest_other(
                    &self,
                    target: types::vest_other::Target,
                ) -> ::subxt::tx::Payload<types::VestOther> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest_other",
                        types::VestOther { target },
                        [
                            19u8, 61u8, 216u8, 215u8, 68u8, 5u8, 173u8, 138u8, 29u8, 5u8, 46u8,
                            138u8, 33u8, 189u8, 63u8, 251u8, 1u8, 79u8, 138u8, 166u8, 87u8, 154u8,
                            141u8, 187u8, 28u8, 202u8, 144u8, 6u8, 231u8, 230u8, 197u8, 171u8,
                        ],
                    )
                }
                pub fn vested_transfer(
                    &self,
                    target: types::vested_transfer::Target,
                    schedule: types::vested_transfer::Schedule,
                ) -> ::subxt::tx::Payload<types::VestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vested_transfer",
                        types::VestedTransfer { target, schedule },
                        [
                            26u8, 129u8, 240u8, 33u8, 142u8, 111u8, 251u8, 205u8, 249u8, 70u8,
                            125u8, 91u8, 63u8, 157u8, 255u8, 17u8, 124u8, 220u8, 234u8, 10u8, 50u8,
                            147u8, 197u8, 187u8, 140u8, 137u8, 177u8, 211u8, 238u8, 232u8, 171u8,
                            113u8,
                        ],
                    )
                }
                pub fn force_vested_transfer(
                    &self,
                    source: types::force_vested_transfer::Source,
                    target: types::force_vested_transfer::Target,
                    schedule: types::force_vested_transfer::Schedule,
                ) -> ::subxt::tx::Payload<types::ForceVestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "force_vested_transfer",
                        types::ForceVestedTransfer {
                            source,
                            target,
                            schedule,
                        },
                        [
                            66u8, 102u8, 142u8, 167u8, 39u8, 125u8, 254u8, 11u8, 125u8, 191u8,
                            221u8, 65u8, 201u8, 196u8, 153u8, 72u8, 139u8, 30u8, 248u8, 100u8,
                            54u8, 79u8, 128u8, 211u8, 115u8, 108u8, 182u8, 201u8, 106u8, 255u8,
                            4u8, 39u8,
                        ],
                    )
                }
                pub fn merge_schedules(
                    &self,
                    schedule1_index: types::merge_schedules::Schedule1Index,
                    schedule2_index: types::merge_schedules::Schedule2Index,
                ) -> ::subxt::tx::Payload<types::MergeSchedules> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "merge_schedules",
                        types::MergeSchedules {
                            schedule1_index,
                            schedule2_index,
                        },
                        [
                            45u8, 24u8, 13u8, 108u8, 26u8, 99u8, 61u8, 117u8, 195u8, 218u8, 182u8,
                            23u8, 188u8, 157u8, 181u8, 81u8, 38u8, 136u8, 31u8, 226u8, 8u8, 190u8,
                            33u8, 81u8, 86u8, 185u8, 156u8, 77u8, 157u8, 197u8, 41u8, 58u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_vesting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VestingUpdated {
                pub account: vesting_updated::Account,
                pub unvested: vesting_updated::Unvested,
            }
            pub mod vesting_updated {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type Unvested = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for VestingUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct VestingCompleted {
                pub account: vesting_completed::Account,
            }
            pub mod vesting_completed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for VestingCompleted {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod vesting {
                    use super::runtime_types;
                    pub type Vesting = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_vesting::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn vesting_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::vesting::Vesting,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        vec![],
                        [
                            95u8, 168u8, 217u8, 248u8, 149u8, 86u8, 195u8, 93u8, 73u8, 206u8,
                            105u8, 165u8, 33u8, 173u8, 232u8, 81u8, 147u8, 254u8, 50u8, 228u8,
                            156u8, 92u8, 242u8, 149u8, 42u8, 91u8, 58u8, 209u8, 142u8, 221u8,
                            230u8, 112u8,
                        ],
                    )
                }
                pub fn vesting(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::vesting::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::vesting::Vesting,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            95u8, 168u8, 217u8, 248u8, 149u8, 86u8, 195u8, 93u8, 73u8, 206u8,
                            105u8, 165u8, 33u8, 173u8, 232u8, 81u8, 147u8, 254u8, 50u8, 228u8,
                            156u8, 92u8, 242u8, 149u8, 42u8, 91u8, 58u8, 209u8, 142u8, 221u8,
                            230u8, 112u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::storage_version::StorageVersion,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "StorageVersion",
                        vec![],
                        [
                            230u8, 137u8, 180u8, 133u8, 142u8, 124u8, 231u8, 234u8, 223u8, 10u8,
                            154u8, 98u8, 158u8, 253u8, 228u8, 80u8, 5u8, 9u8, 91u8, 210u8, 252u8,
                            9u8, 13u8, 195u8, 193u8, 164u8, 129u8, 113u8, 128u8, 218u8, 8u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn min_vested_transfer(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_vesting_schedules(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MaxVestingSchedules",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod peaq_did {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::peaq_pallet_did::pallet::Error;
        pub type Call = runtime_types::peaq_pallet_did::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddAttribute {
                    pub did_account: add_attribute::DidAccount,
                    pub name: add_attribute::Name,
                    pub value: add_attribute::Value,
                    pub valid_for: add_attribute::ValidFor,
                }
                pub mod add_attribute {
                    use super::runtime_types;
                    pub type DidAccount = ::subxt::utils::AccountId32;
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Value = ::std::vec::Vec<::core::primitive::u8>;
                    pub type ValidFor = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddAttribute {
                    const PALLET: &'static str = "PeaqDid";
                    const CALL: &'static str = "add_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateAttribute {
                    pub did_account: update_attribute::DidAccount,
                    pub name: update_attribute::Name,
                    pub value: update_attribute::Value,
                    pub valid_for: update_attribute::ValidFor,
                }
                pub mod update_attribute {
                    use super::runtime_types;
                    pub type DidAccount = ::subxt::utils::AccountId32;
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Value = ::std::vec::Vec<::core::primitive::u8>;
                    pub type ValidFor = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateAttribute {
                    const PALLET: &'static str = "PeaqDid";
                    const CALL: &'static str = "update_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReadAttribute {
                    pub did_account: read_attribute::DidAccount,
                    pub name: read_attribute::Name,
                }
                pub mod read_attribute {
                    use super::runtime_types;
                    pub type DidAccount = ::subxt::utils::AccountId32;
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReadAttribute {
                    const PALLET: &'static str = "PeaqDid";
                    const CALL: &'static str = "read_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveAttribute {
                    pub did_account: remove_attribute::DidAccount,
                    pub name: remove_attribute::Name,
                }
                pub mod remove_attribute {
                    use super::runtime_types;
                    pub type DidAccount = ::subxt::utils::AccountId32;
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveAttribute {
                    const PALLET: &'static str = "PeaqDid";
                    const CALL: &'static str = "remove_attribute";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn add_attribute(
                    &self,
                    did_account: types::add_attribute::DidAccount,
                    name: types::add_attribute::Name,
                    value: types::add_attribute::Value,
                    valid_for: types::add_attribute::ValidFor,
                ) -> ::subxt::tx::Payload<types::AddAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqDid",
                        "add_attribute",
                        types::AddAttribute {
                            did_account,
                            name,
                            value,
                            valid_for,
                        },
                        [
                            181u8, 126u8, 148u8, 43u8, 209u8, 208u8, 202u8, 117u8, 42u8, 248u8,
                            57u8, 177u8, 86u8, 163u8, 86u8, 121u8, 84u8, 236u8, 244u8, 38u8, 3u8,
                            118u8, 36u8, 222u8, 169u8, 212u8, 158u8, 77u8, 240u8, 227u8, 172u8,
                            248u8,
                        ],
                    )
                }
                pub fn update_attribute(
                    &self,
                    did_account: types::update_attribute::DidAccount,
                    name: types::update_attribute::Name,
                    value: types::update_attribute::Value,
                    valid_for: types::update_attribute::ValidFor,
                ) -> ::subxt::tx::Payload<types::UpdateAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqDid",
                        "update_attribute",
                        types::UpdateAttribute {
                            did_account,
                            name,
                            value,
                            valid_for,
                        },
                        [
                            179u8, 192u8, 207u8, 149u8, 157u8, 124u8, 24u8, 129u8, 146u8, 35u8,
                            137u8, 153u8, 203u8, 20u8, 196u8, 235u8, 175u8, 156u8, 168u8, 64u8,
                            59u8, 72u8, 247u8, 151u8, 120u8, 253u8, 136u8, 220u8, 46u8, 127u8,
                            23u8, 105u8,
                        ],
                    )
                }
                pub fn read_attribute(
                    &self,
                    did_account: types::read_attribute::DidAccount,
                    name: types::read_attribute::Name,
                ) -> ::subxt::tx::Payload<types::ReadAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqDid",
                        "read_attribute",
                        types::ReadAttribute { did_account, name },
                        [
                            93u8, 140u8, 103u8, 219u8, 174u8, 246u8, 171u8, 187u8, 225u8, 25u8,
                            178u8, 203u8, 169u8, 249u8, 175u8, 113u8, 164u8, 84u8, 52u8, 124u8,
                            165u8, 12u8, 42u8, 42u8, 248u8, 156u8, 129u8, 69u8, 109u8, 56u8, 17u8,
                            222u8,
                        ],
                    )
                }
                pub fn remove_attribute(
                    &self,
                    did_account: types::remove_attribute::DidAccount,
                    name: types::remove_attribute::Name,
                ) -> ::subxt::tx::Payload<types::RemoveAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqDid",
                        "remove_attribute",
                        types::RemoveAttribute { did_account, name },
                        [
                            63u8, 2u8, 115u8, 203u8, 158u8, 168u8, 179u8, 55u8, 152u8, 157u8, 11u8,
                            58u8, 224u8, 138u8, 105u8, 94u8, 157u8, 248u8, 60u8, 239u8, 140u8, 7u8,
                            30u8, 252u8, 189u8, 210u8, 168u8, 64u8, 195u8, 1u8, 224u8, 79u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::peaq_pallet_did::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AttributeAdded(
                pub attribute_added::Field0,
                pub attribute_added::Field1,
                pub attribute_added::Field2,
                pub attribute_added::Field3,
                pub attribute_added::Field4,
            );
            pub mod attribute_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field3 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field4 = ::core::option::Option<::core::primitive::u32>;
            }
            impl ::subxt::events::StaticEvent for AttributeAdded {
                const PALLET: &'static str = "PeaqDid";
                const EVENT: &'static str = "AttributeAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AttributeRead(pub attribute_read::Field0);
            pub mod attribute_read {
                use super::runtime_types;
                pub type Field0 = runtime_types::peaq_pallet_did::structs::Attribute<
                    ::core::primitive::u32,
                    ::core::primitive::u64,
                >;
            }
            impl ::subxt::events::StaticEvent for AttributeRead {
                const PALLET: &'static str = "PeaqDid";
                const EVENT: &'static str = "AttributeRead";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AttributeUpdated(
                pub attribute_updated::Field0,
                pub attribute_updated::Field1,
                pub attribute_updated::Field2,
                pub attribute_updated::Field3,
                pub attribute_updated::Field4,
            );
            pub mod attribute_updated {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field3 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field4 = ::core::option::Option<::core::primitive::u32>;
            }
            impl ::subxt::events::StaticEvent for AttributeUpdated {
                const PALLET: &'static str = "PeaqDid";
                const EVENT: &'static str = "AttributeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AttributeRemoved(
                pub attribute_removed::Field0,
                pub attribute_removed::Field1,
                pub attribute_removed::Field2,
            );
            pub mod attribute_removed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for AttributeRemoved {
                const PALLET: &'static str = "PeaqDid";
                const EVENT: &'static str = "AttributeRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod attribute_store {
                    use super::runtime_types;
                    pub type AttributeStore = runtime_types::peaq_pallet_did::structs::Attribute<
                        ::core::primitive::u32,
                        ::core::primitive::u64,
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod owner_store {
                    use super::runtime_types;
                    pub type OwnerStore = ::subxt::utils::AccountId32;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn attribute_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::attribute_store::AttributeStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqDid",
                        "AttributeStore",
                        vec![],
                        [
                            123u8, 176u8, 156u8, 33u8, 193u8, 98u8, 43u8, 106u8, 200u8, 53u8,
                            127u8, 206u8, 139u8, 232u8, 168u8, 26u8, 230u8, 184u8, 130u8, 238u8,
                            129u8, 201u8, 86u8, 62u8, 240u8, 228u8, 102u8, 116u8, 250u8, 77u8,
                            81u8, 155u8,
                        ],
                    )
                }
                pub fn attribute_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::attribute_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::attribute_store::AttributeStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqDid",
                        "AttributeStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            123u8, 176u8, 156u8, 33u8, 193u8, 98u8, 43u8, 106u8, 200u8, 53u8,
                            127u8, 206u8, 139u8, 232u8, 168u8, 26u8, 230u8, 184u8, 130u8, 238u8,
                            129u8, 201u8, 86u8, 62u8, 240u8, 228u8, 102u8, 116u8, 250u8, 77u8,
                            81u8, 155u8,
                        ],
                    )
                }
                pub fn owner_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner_store::OwnerStore,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqDid",
                        "OwnerStore",
                        vec![],
                        [
                            129u8, 67u8, 69u8, 112u8, 36u8, 19u8, 200u8, 189u8, 18u8, 21u8, 216u8,
                            101u8, 59u8, 251u8, 47u8, 45u8, 250u8, 180u8, 100u8, 131u8, 93u8, 99u8,
                            219u8, 63u8, 240u8, 160u8, 164u8, 92u8, 80u8, 194u8, 213u8, 67u8,
                        ],
                    )
                }
                pub fn owner_store_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::owner_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner_store::OwnerStore,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqDid",
                        "OwnerStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            129u8, 67u8, 69u8, 112u8, 36u8, 19u8, 200u8, 189u8, 18u8, 21u8, 216u8,
                            101u8, 59u8, 251u8, 47u8, 45u8, 250u8, 180u8, 100u8, 131u8, 93u8, 99u8,
                            219u8, 63u8, 240u8, 160u8, 164u8, 92u8, 80u8, 194u8, 213u8, 67u8,
                        ],
                    )
                }
                pub fn owner_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::owner_store::Param0>,
                    _1: impl ::std::borrow::Borrow<types::owner_store::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner_store::OwnerStore,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqDid",
                        "OwnerStore",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            129u8, 67u8, 69u8, 112u8, 36u8, 19u8, 200u8, 189u8, 18u8, 21u8, 216u8,
                            101u8, 59u8, 251u8, 47u8, 45u8, 250u8, 180u8, 100u8, 131u8, 93u8, 99u8,
                            219u8, 63u8, 240u8, 160u8, 164u8, 92u8, 80u8, 194u8, 213u8, 67u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::peaq_pallet_transaction::pallet::Error;
        pub type Call = runtime_types::peaq_pallet_transaction::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceRequested {
                    pub provider: service_requested::Provider,
                    pub token_deposited: service_requested::TokenDeposited,
                }
                pub mod service_requested {
                    use super::runtime_types;
                    pub type Provider = ::subxt::utils::AccountId32;
                    pub type TokenDeposited = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceRequested {
                    const PALLET: &'static str = "Transaction";
                    const CALL: &'static str = "service_requested";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceDelivered {
                    pub consumer: service_delivered::Consumer,
                    pub refund_info: service_delivered::RefundInfo,
                    pub spent_info: service_delivered::SpentInfo,
                }
                pub mod service_delivered {
                    use super::runtime_types;
                    pub type Consumer = ::subxt::utils::AccountId32;
                    pub type RefundInfo =
                        runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type SpentInfo =
                        runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceDelivered {
                    const PALLET: &'static str = "Transaction";
                    const CALL: &'static str = "service_delivered";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn service_requested(
                    &self,
                    provider: types::service_requested::Provider,
                    token_deposited: types::service_requested::TokenDeposited,
                ) -> ::subxt::tx::Payload<types::ServiceRequested> {
                    ::subxt::tx::Payload::new_static(
                        "Transaction",
                        "service_requested",
                        types::ServiceRequested {
                            provider,
                            token_deposited,
                        },
                        [
                            135u8, 21u8, 107u8, 37u8, 7u8, 235u8, 8u8, 177u8, 20u8, 112u8, 1u8,
                            249u8, 217u8, 123u8, 197u8, 240u8, 29u8, 244u8, 103u8, 60u8, 91u8,
                            209u8, 103u8, 58u8, 153u8, 234u8, 96u8, 234u8, 192u8, 249u8, 61u8,
                            50u8,
                        ],
                    )
                }
                pub fn service_delivered(
                    &self,
                    consumer: types::service_delivered::Consumer,
                    refund_info: types::service_delivered::RefundInfo,
                    spent_info: types::service_delivered::SpentInfo,
                ) -> ::subxt::tx::Payload<types::ServiceDelivered> {
                    ::subxt::tx::Payload::new_static(
                        "Transaction",
                        "service_delivered",
                        types::ServiceDelivered {
                            consumer,
                            refund_info,
                            spent_info,
                        },
                        [
                            28u8, 92u8, 177u8, 44u8, 143u8, 8u8, 228u8, 234u8, 90u8, 179u8, 147u8,
                            92u8, 94u8, 243u8, 235u8, 108u8, 64u8, 251u8, 62u8, 166u8, 51u8, 43u8,
                            40u8, 119u8, 230u8, 135u8, 146u8, 62u8, 144u8, 135u8, 99u8, 39u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::peaq_pallet_transaction::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ServiceRequested {
                pub consumer: service_requested::Consumer,
                pub provider: service_requested::Provider,
                pub token_deposited: service_requested::TokenDeposited,
            }
            pub mod service_requested {
                use super::runtime_types;
                pub type Consumer = ::subxt::utils::AccountId32;
                pub type Provider = ::subxt::utils::AccountId32;
                pub type TokenDeposited = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for ServiceRequested {
                const PALLET: &'static str = "Transaction";
                const EVENT: &'static str = "ServiceRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ServiceDelivered {
                pub provider: service_delivered::Provider,
                pub consumer: service_delivered::Consumer,
                pub refund_info: service_delivered::RefundInfo,
                pub spent_info: service_delivered::SpentInfo,
            }
            pub mod service_delivered {
                use super::runtime_types;
                pub type Provider = ::subxt::utils::AccountId32;
                pub type Consumer = ::subxt::utils::AccountId32;
                pub type RefundInfo =
                    runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                        ::core::primitive::u128,
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >;
                pub type SpentInfo = runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                    ::core::primitive::u128,
                    ::subxt::utils::H256,
                    ::core::primitive::u32,
                >;
            }
            impl ::subxt::events::StaticEvent for ServiceDelivered {
                const PALLET: &'static str = "Transaction";
                const EVENT: &'static str = "ServiceDelivered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
            }
            pub struct StorageApi;
            impl StorageApi {}
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: as_multi_threshold1::OtherSignatories,
                    pub call: ::std::boxed::Box<as_multi_threshold1::Call>,
                }
                pub mod as_multi_threshold1 {
                    use super::runtime_types;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMulti {
                    pub threshold: as_multi::Threshold,
                    pub other_signatories: as_multi::OtherSignatories,
                    pub maybe_timepoint: as_multi::MaybeTimepoint,
                    pub call: ::std::boxed::Box<as_multi::Call>,
                    pub max_weight: as_multi::MaxWeight,
                }
                pub mod as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type Call = runtime_types::peaq_dev_runtime::RuntimeCall;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveAsMulti {
                    pub threshold: approve_as_multi::Threshold,
                    pub other_signatories: approve_as_multi::OtherSignatories,
                    pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
                    pub call_hash: approve_as_multi::CallHash,
                    pub max_weight: approve_as_multi::MaxWeight,
                }
                pub mod approve_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelAsMulti {
                    pub threshold: cancel_as_multi::Threshold,
                    pub other_signatories: cancel_as_multi::OtherSignatories,
                    pub timepoint: cancel_as_multi::Timepoint,
                    pub call_hash: cancel_as_multi::CallHash,
                }
                pub mod cancel_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Timepoint =
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: types::as_multi_threshold1::OtherSignatories,
                    call: types::as_multi_threshold1::Call,
                ) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            81u8, 156u8, 220u8, 201u8, 94u8, 148u8, 144u8, 194u8, 222u8, 86u8,
                            141u8, 68u8, 55u8, 233u8, 236u8, 121u8, 18u8, 146u8, 146u8, 234u8,
                            139u8, 237u8, 48u8, 18u8, 114u8, 150u8, 175u8, 23u8, 233u8, 42u8,
                            151u8, 81u8,
                        ],
                    )
                }
                pub fn as_multi(
                    &self,
                    threshold: types::as_multi::Threshold,
                    other_signatories: types::as_multi::OtherSignatories,
                    maybe_timepoint: types::as_multi::MaybeTimepoint,
                    call: types::as_multi::Call,
                    max_weight: types::as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            183u8, 111u8, 147u8, 249u8, 254u8, 74u8, 70u8, 19u8, 182u8, 158u8,
                            246u8, 37u8, 49u8, 200u8, 171u8, 110u8, 188u8, 60u8, 147u8, 104u8,
                            50u8, 37u8, 37u8, 132u8, 108u8, 82u8, 138u8, 252u8, 34u8, 203u8, 250u8,
                            50u8,
                        ],
                    )
                }
                pub fn approve_as_multi(
                    &self,
                    threshold: types::approve_as_multi::Threshold,
                    other_signatories: types::approve_as_multi::OtherSignatories,
                    maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
                    call_hash: types::approve_as_multi::CallHash,
                    max_weight: types::approve_as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            248u8, 46u8, 131u8, 35u8, 204u8, 12u8, 218u8, 150u8, 88u8, 131u8, 89u8,
                            13u8, 95u8, 122u8, 87u8, 107u8, 136u8, 154u8, 92u8, 199u8, 108u8, 92u8,
                            207u8, 171u8, 113u8, 8u8, 47u8, 248u8, 65u8, 26u8, 203u8, 135u8,
                        ],
                    )
                }
                pub fn cancel_as_multi(
                    &self,
                    threshold: types::cancel_as_multi::Threshold,
                    other_signatories: types::cancel_as_multi::OtherSignatories,
                    timepoint: types::cancel_as_multi::Timepoint,
                    call_hash: types::cancel_as_multi::CallHash,
                ) -> ::subxt::tx::Payload<types::CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            212u8, 179u8, 123u8, 40u8, 209u8, 228u8, 181u8, 0u8, 109u8, 28u8, 27u8,
                            48u8, 15u8, 47u8, 203u8, 54u8, 106u8, 114u8, 28u8, 118u8, 101u8, 201u8,
                            95u8, 187u8, 46u8, 182u8, 4u8, 30u8, 227u8, 105u8, 14u8, 81u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NewMultisig {
                pub approving: new_multisig::Approving,
                pub multisig: new_multisig::Multisig,
                pub call_hash: new_multisig::CallHash,
            }
            pub mod new_multisig {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MultisigApproval {
                pub approving: multisig_approval::Approving,
                pub timepoint: multisig_approval::Timepoint,
                pub multisig: multisig_approval::Multisig,
                pub call_hash: multisig_approval::CallHash,
            }
            pub mod multisig_approval {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MultisigExecuted {
                pub approving: multisig_executed::Approving,
                pub timepoint: multisig_executed::Timepoint,
                pub multisig: multisig_executed::Multisig,
                pub call_hash: multisig_executed::CallHash,
                pub result: multisig_executed::Result,
            }
            pub mod multisig_executed {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MultisigCancelled {
                pub cancelling: multisig_cancelled::Cancelling,
                pub timepoint: multisig_cancelled::Timepoint,
                pub multisig: multisig_cancelled::Multisig,
                pub call_hash: multisig_cancelled::CallHash,
            }
            pub mod multisig_cancelled {
                use super::runtime_types;
                pub type Cancelling = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod multisigs {
                    use super::runtime_types;
                    pub type Multisigs = runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn multisigs_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
                pub fn multisigs_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                    _1: impl ::std::borrow::Borrow<types::multisigs::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod peaq_rbac {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::peaq_pallet_rbac::pallet::Error;
        pub type Call = runtime_types::peaq_pallet_rbac::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchRole {
                    pub owner: fetch_role::Owner,
                    pub entity: fetch_role::Entity,
                }
                pub mod fetch_role {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type Entity = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchRoles {
                    pub owner: fetch_roles::Owner,
                }
                pub mod fetch_roles {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchRoles {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_roles";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddRole {
                    pub role_id: add_role::RoleId,
                    pub name: add_role::Name,
                }
                pub mod add_role {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "add_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateRole {
                    pub role_id: update_role::RoleId,
                    pub name: update_role::Name,
                }
                pub mod update_role {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "update_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisableRole {
                    pub role_id: disable_role::RoleId,
                }
                pub mod disable_role {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for DisableRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "disable_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchUserRoles {
                    pub owner: fetch_user_roles::Owner,
                    pub user_id: fetch_user_roles::UserId,
                }
                pub mod fetch_user_roles {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type UserId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchUserRoles {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_user_roles";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssignRoleToUser {
                    pub role_id: assign_role_to_user::RoleId,
                    pub user_id: assign_role_to_user::UserId,
                }
                pub mod assign_role_to_user {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type UserId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for AssignRoleToUser {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "assign_role_to_user";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignRoleToUser {
                    pub role_id: unassign_role_to_user::RoleId,
                    pub user_id: unassign_role_to_user::UserId,
                }
                pub mod unassign_role_to_user {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type UserId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignRoleToUser {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "unassign_role_to_user";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchPermission {
                    pub owner: fetch_permission::Owner,
                    pub permission_id: fetch_permission::PermissionId,
                }
                pub mod fetch_permission {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchPermission {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_permission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchPermissions {
                    pub owner: fetch_permissions::Owner,
                }
                pub mod fetch_permissions {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchPermissions {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_permissions";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddPermission {
                    pub permission_id: add_permission::PermissionId,
                    pub name: add_permission::Name,
                }
                pub mod add_permission {
                    use super::runtime_types;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddPermission {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "add_permission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdatePermission {
                    pub permission_id: update_permission::PermissionId,
                    pub name: update_permission::Name,
                }
                pub mod update_permission {
                    use super::runtime_types;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdatePermission {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "update_permission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisablePermission {
                    pub permission_id: disable_permission::PermissionId,
                }
                pub mod disable_permission {
                    use super::runtime_types;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for DisablePermission {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "disable_permission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchRolePermissions {
                    pub owner: fetch_role_permissions::Owner,
                    pub role_id: fetch_role_permissions::RoleId,
                }
                pub mod fetch_role_permissions {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchRolePermissions {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_role_permissions";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssignPermissionToRole {
                    pub permission_id: assign_permission_to_role::PermissionId,
                    pub role_id: assign_permission_to_role::RoleId,
                }
                pub mod assign_permission_to_role {
                    use super::runtime_types;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                    pub type RoleId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for AssignPermissionToRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "assign_permission_to_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignPermissionToRole {
                    pub permission_id: unassign_permission_to_role::PermissionId,
                    pub role_id: unassign_permission_to_role::RoleId,
                }
                pub mod unassign_permission_to_role {
                    use super::runtime_types;
                    pub type PermissionId = [::core::primitive::u8; 32usize];
                    pub type RoleId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignPermissionToRole {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "unassign_permission_to_role";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchGroup {
                    pub owner: fetch_group::Owner,
                    pub group_id: fetch_group::GroupId,
                }
                pub mod fetch_group {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchGroups {
                    pub owner: fetch_groups::Owner,
                }
                pub mod fetch_groups {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchGroups {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_groups";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddGroup {
                    pub group_id: add_group::GroupId,
                    pub name: add_group::Name,
                }
                pub mod add_group {
                    use super::runtime_types;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "add_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateGroup {
                    pub group_id: update_group::GroupId,
                    pub name: update_group::Name,
                }
                pub mod update_group {
                    use super::runtime_types;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                    pub type Name = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "update_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisableGroup {
                    pub group_id: disable_group::GroupId,
                }
                pub mod disable_group {
                    use super::runtime_types;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for DisableGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "disable_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssignRoleToGroup {
                    pub role_id: assign_role_to_group::RoleId,
                    pub group_id: assign_role_to_group::GroupId,
                }
                pub mod assign_role_to_group {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for AssignRoleToGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "assign_role_to_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignRoleToGroup {
                    pub role_id: unassign_role_to_group::RoleId,
                    pub group_id: unassign_role_to_group::GroupId,
                }
                pub mod unassign_role_to_group {
                    use super::runtime_types;
                    pub type RoleId = [::core::primitive::u8; 32usize];
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignRoleToGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "unassign_role_to_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchGroupRoles {
                    pub owner: fetch_group_roles::Owner,
                    pub group_id: fetch_group_roles::GroupId,
                }
                pub mod fetch_group_roles {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchGroupRoles {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_group_roles";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssignUserToGroup {
                    pub user_id: assign_user_to_group::UserId,
                    pub group_id: assign_user_to_group::GroupId,
                }
                pub mod assign_user_to_group {
                    use super::runtime_types;
                    pub type UserId = [::core::primitive::u8; 32usize];
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for AssignUserToGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "assign_user_to_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignUserToGroup {
                    pub user_id: unassign_user_to_group::UserId,
                    pub group_id: unassign_user_to_group::GroupId,
                }
                pub mod unassign_user_to_group {
                    use super::runtime_types;
                    pub type UserId = [::core::primitive::u8; 32usize];
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignUserToGroup {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "unassign_user_to_group";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchUserGroups {
                    pub owner: fetch_user_groups::Owner,
                    pub user_id: fetch_user_groups::UserId,
                }
                pub mod fetch_user_groups {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type UserId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchUserGroups {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_user_groups";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchUserPermissions {
                    pub owner: fetch_user_permissions::Owner,
                    pub user_id: fetch_user_permissions::UserId,
                }
                pub mod fetch_user_permissions {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type UserId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchUserPermissions {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_user_permissions";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchGroupPermissions {
                    pub owner: fetch_group_permissions::Owner,
                    pub group_id: fetch_group_permissions::GroupId,
                }
                pub mod fetch_group_permissions {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type GroupId = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for FetchGroupPermissions {
                    const PALLET: &'static str = "PeaqRbac";
                    const CALL: &'static str = "fetch_group_permissions";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn fetch_role(
                    &self,
                    owner: types::fetch_role::Owner,
                    entity: types::fetch_role::Entity,
                ) -> ::subxt::tx::Payload<types::FetchRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_role",
                        types::FetchRole { owner, entity },
                        [
                            2u8, 79u8, 48u8, 229u8, 143u8, 88u8, 149u8, 20u8, 11u8, 168u8, 180u8,
                            178u8, 96u8, 113u8, 155u8, 157u8, 92u8, 240u8, 48u8, 185u8, 203u8, 1u8,
                            0u8, 12u8, 7u8, 86u8, 193u8, 24u8, 214u8, 64u8, 132u8, 53u8,
                        ],
                    )
                }
                pub fn fetch_roles(
                    &self,
                    owner: types::fetch_roles::Owner,
                ) -> ::subxt::tx::Payload<types::FetchRoles> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_roles",
                        types::FetchRoles { owner },
                        [
                            181u8, 71u8, 25u8, 79u8, 145u8, 190u8, 33u8, 100u8, 231u8, 176u8,
                            239u8, 132u8, 53u8, 102u8, 243u8, 92u8, 118u8, 179u8, 124u8, 7u8,
                            201u8, 172u8, 191u8, 100u8, 95u8, 98u8, 81u8, 91u8, 203u8, 3u8, 184u8,
                            146u8,
                        ],
                    )
                }
                pub fn add_role(
                    &self,
                    role_id: types::add_role::RoleId,
                    name: types::add_role::Name,
                ) -> ::subxt::tx::Payload<types::AddRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "add_role",
                        types::AddRole { role_id, name },
                        [
                            31u8, 233u8, 38u8, 129u8, 99u8, 53u8, 217u8, 151u8, 80u8, 152u8, 124u8,
                            159u8, 183u8, 124u8, 86u8, 222u8, 201u8, 185u8, 205u8, 138u8, 239u8,
                            56u8, 30u8, 140u8, 91u8, 3u8, 139u8, 87u8, 213u8, 202u8, 207u8, 117u8,
                        ],
                    )
                }
                pub fn update_role(
                    &self,
                    role_id: types::update_role::RoleId,
                    name: types::update_role::Name,
                ) -> ::subxt::tx::Payload<types::UpdateRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "update_role",
                        types::UpdateRole { role_id, name },
                        [
                            8u8, 100u8, 52u8, 161u8, 169u8, 251u8, 219u8, 87u8, 127u8, 129u8, 40u8,
                            234u8, 198u8, 131u8, 158u8, 206u8, 148u8, 85u8, 68u8, 167u8, 8u8,
                            154u8, 212u8, 87u8, 120u8, 234u8, 30u8, 221u8, 186u8, 44u8, 129u8,
                            174u8,
                        ],
                    )
                }
                pub fn disable_role(
                    &self,
                    role_id: types::disable_role::RoleId,
                ) -> ::subxt::tx::Payload<types::DisableRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "disable_role",
                        types::DisableRole { role_id },
                        [
                            40u8, 116u8, 160u8, 60u8, 194u8, 110u8, 106u8, 190u8, 123u8, 211u8,
                            125u8, 254u8, 254u8, 22u8, 24u8, 65u8, 98u8, 174u8, 150u8, 156u8,
                            168u8, 62u8, 2u8, 17u8, 241u8, 221u8, 1u8, 29u8, 135u8, 255u8, 139u8,
                            70u8,
                        ],
                    )
                }
                pub fn fetch_user_roles(
                    &self,
                    owner: types::fetch_user_roles::Owner,
                    user_id: types::fetch_user_roles::UserId,
                ) -> ::subxt::tx::Payload<types::FetchUserRoles> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_user_roles",
                        types::FetchUserRoles { owner, user_id },
                        [
                            83u8, 51u8, 211u8, 101u8, 59u8, 61u8, 230u8, 38u8, 69u8, 214u8, 82u8,
                            242u8, 245u8, 17u8, 83u8, 188u8, 114u8, 8u8, 118u8, 144u8, 52u8, 11u8,
                            147u8, 69u8, 253u8, 74u8, 153u8, 59u8, 191u8, 233u8, 66u8, 112u8,
                        ],
                    )
                }
                pub fn assign_role_to_user(
                    &self,
                    role_id: types::assign_role_to_user::RoleId,
                    user_id: types::assign_role_to_user::UserId,
                ) -> ::subxt::tx::Payload<types::AssignRoleToUser> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "assign_role_to_user",
                        types::AssignRoleToUser { role_id, user_id },
                        [
                            242u8, 250u8, 144u8, 112u8, 221u8, 143u8, 163u8, 0u8, 100u8, 64u8,
                            251u8, 15u8, 66u8, 217u8, 49u8, 122u8, 105u8, 203u8, 186u8, 225u8,
                            210u8, 131u8, 240u8, 63u8, 139u8, 25u8, 55u8, 142u8, 118u8, 248u8,
                            24u8, 231u8,
                        ],
                    )
                }
                pub fn unassign_role_to_user(
                    &self,
                    role_id: types::unassign_role_to_user::RoleId,
                    user_id: types::unassign_role_to_user::UserId,
                ) -> ::subxt::tx::Payload<types::UnassignRoleToUser> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "unassign_role_to_user",
                        types::UnassignRoleToUser { role_id, user_id },
                        [
                            215u8, 94u8, 195u8, 91u8, 149u8, 37u8, 128u8, 37u8, 164u8, 109u8, 14u8,
                            175u8, 145u8, 138u8, 69u8, 121u8, 44u8, 247u8, 30u8, 98u8, 250u8,
                            172u8, 198u8, 59u8, 87u8, 47u8, 2u8, 88u8, 103u8, 99u8, 196u8, 191u8,
                        ],
                    )
                }
                pub fn fetch_permission(
                    &self,
                    owner: types::fetch_permission::Owner,
                    permission_id: types::fetch_permission::PermissionId,
                ) -> ::subxt::tx::Payload<types::FetchPermission> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_permission",
                        types::FetchPermission {
                            owner,
                            permission_id,
                        },
                        [
                            76u8, 36u8, 180u8, 235u8, 35u8, 131u8, 115u8, 250u8, 131u8, 174u8,
                            12u8, 133u8, 36u8, 189u8, 12u8, 2u8, 203u8, 252u8, 49u8, 11u8, 91u8,
                            10u8, 250u8, 73u8, 16u8, 121u8, 178u8, 13u8, 195u8, 93u8, 126u8, 82u8,
                        ],
                    )
                }
                pub fn fetch_permissions(
                    &self,
                    owner: types::fetch_permissions::Owner,
                ) -> ::subxt::tx::Payload<types::FetchPermissions> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_permissions",
                        types::FetchPermissions { owner },
                        [
                            90u8, 44u8, 201u8, 116u8, 188u8, 128u8, 226u8, 41u8, 131u8, 61u8,
                            125u8, 253u8, 224u8, 179u8, 249u8, 7u8, 167u8, 33u8, 252u8, 78u8,
                            228u8, 14u8, 117u8, 246u8, 95u8, 118u8, 198u8, 109u8, 74u8, 145u8, 4u8,
                            153u8,
                        ],
                    )
                }
                pub fn add_permission(
                    &self,
                    permission_id: types::add_permission::PermissionId,
                    name: types::add_permission::Name,
                ) -> ::subxt::tx::Payload<types::AddPermission> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "add_permission",
                        types::AddPermission {
                            permission_id,
                            name,
                        },
                        [
                            186u8, 248u8, 200u8, 107u8, 114u8, 65u8, 138u8, 140u8, 99u8, 240u8,
                            184u8, 203u8, 125u8, 219u8, 29u8, 190u8, 212u8, 163u8, 121u8, 39u8,
                            26u8, 156u8, 217u8, 209u8, 247u8, 72u8, 148u8, 73u8, 196u8, 186u8,
                            77u8, 36u8,
                        ],
                    )
                }
                pub fn update_permission(
                    &self,
                    permission_id: types::update_permission::PermissionId,
                    name: types::update_permission::Name,
                ) -> ::subxt::tx::Payload<types::UpdatePermission> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "update_permission",
                        types::UpdatePermission {
                            permission_id,
                            name,
                        },
                        [
                            20u8, 12u8, 134u8, 254u8, 55u8, 227u8, 149u8, 144u8, 19u8, 40u8, 64u8,
                            30u8, 63u8, 163u8, 77u8, 96u8, 152u8, 226u8, 120u8, 168u8, 0u8, 29u8,
                            53u8, 135u8, 166u8, 109u8, 76u8, 5u8, 116u8, 50u8, 228u8, 236u8,
                        ],
                    )
                }
                pub fn disable_permission(
                    &self,
                    permission_id: types::disable_permission::PermissionId,
                ) -> ::subxt::tx::Payload<types::DisablePermission> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "disable_permission",
                        types::DisablePermission { permission_id },
                        [
                            89u8, 167u8, 149u8, 4u8, 74u8, 92u8, 18u8, 49u8, 97u8, 147u8, 227u8,
                            253u8, 97u8, 216u8, 63u8, 243u8, 210u8, 57u8, 17u8, 59u8, 191u8, 145u8,
                            142u8, 123u8, 95u8, 146u8, 199u8, 41u8, 246u8, 41u8, 184u8, 12u8,
                        ],
                    )
                }
                pub fn fetch_role_permissions(
                    &self,
                    owner: types::fetch_role_permissions::Owner,
                    role_id: types::fetch_role_permissions::RoleId,
                ) -> ::subxt::tx::Payload<types::FetchRolePermissions> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_role_permissions",
                        types::FetchRolePermissions { owner, role_id },
                        [
                            67u8, 248u8, 80u8, 155u8, 63u8, 21u8, 80u8, 194u8, 4u8, 172u8, 66u8,
                            124u8, 108u8, 80u8, 97u8, 100u8, 252u8, 132u8, 235u8, 112u8, 170u8,
                            199u8, 86u8, 100u8, 207u8, 142u8, 14u8, 57u8, 121u8, 42u8, 191u8,
                            163u8,
                        ],
                    )
                }
                pub fn assign_permission_to_role(
                    &self,
                    permission_id: types::assign_permission_to_role::PermissionId,
                    role_id: types::assign_permission_to_role::RoleId,
                ) -> ::subxt::tx::Payload<types::AssignPermissionToRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "assign_permission_to_role",
                        types::AssignPermissionToRole {
                            permission_id,
                            role_id,
                        },
                        [
                            179u8, 159u8, 101u8, 88u8, 224u8, 80u8, 82u8, 133u8, 70u8, 140u8, 47u8,
                            176u8, 87u8, 97u8, 10u8, 88u8, 139u8, 80u8, 177u8, 159u8, 253u8, 82u8,
                            19u8, 199u8, 59u8, 182u8, 138u8, 121u8, 104u8, 186u8, 191u8, 71u8,
                        ],
                    )
                }
                pub fn unassign_permission_to_role(
                    &self,
                    permission_id: types::unassign_permission_to_role::PermissionId,
                    role_id: types::unassign_permission_to_role::RoleId,
                ) -> ::subxt::tx::Payload<types::UnassignPermissionToRole> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "unassign_permission_to_role",
                        types::UnassignPermissionToRole {
                            permission_id,
                            role_id,
                        },
                        [
                            181u8, 229u8, 226u8, 127u8, 60u8, 248u8, 5u8, 243u8, 170u8, 98u8,
                            180u8, 249u8, 64u8, 203u8, 170u8, 172u8, 183u8, 121u8, 57u8, 32u8,
                            72u8, 14u8, 20u8, 81u8, 60u8, 27u8, 158u8, 46u8, 165u8, 98u8, 246u8,
                            129u8,
                        ],
                    )
                }
                pub fn fetch_group(
                    &self,
                    owner: types::fetch_group::Owner,
                    group_id: types::fetch_group::GroupId,
                ) -> ::subxt::tx::Payload<types::FetchGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_group",
                        types::FetchGroup { owner, group_id },
                        [
                            138u8, 36u8, 169u8, 60u8, 164u8, 217u8, 159u8, 46u8, 155u8, 14u8, 41u8,
                            41u8, 142u8, 241u8, 103u8, 8u8, 179u8, 125u8, 226u8, 254u8, 15u8,
                            214u8, 3u8, 57u8, 55u8, 162u8, 246u8, 218u8, 225u8, 58u8, 51u8, 175u8,
                        ],
                    )
                }
                pub fn fetch_groups(
                    &self,
                    owner: types::fetch_groups::Owner,
                ) -> ::subxt::tx::Payload<types::FetchGroups> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_groups",
                        types::FetchGroups { owner },
                        [
                            106u8, 133u8, 44u8, 97u8, 103u8, 203u8, 255u8, 116u8, 44u8, 188u8,
                            15u8, 170u8, 40u8, 59u8, 45u8, 180u8, 239u8, 6u8, 83u8, 211u8, 34u8,
                            91u8, 93u8, 129u8, 103u8, 95u8, 13u8, 15u8, 250u8, 38u8, 137u8, 90u8,
                        ],
                    )
                }
                pub fn add_group(
                    &self,
                    group_id: types::add_group::GroupId,
                    name: types::add_group::Name,
                ) -> ::subxt::tx::Payload<types::AddGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "add_group",
                        types::AddGroup { group_id, name },
                        [
                            246u8, 233u8, 55u8, 76u8, 172u8, 0u8, 193u8, 237u8, 60u8, 59u8, 16u8,
                            97u8, 115u8, 80u8, 75u8, 44u8, 116u8, 118u8, 252u8, 109u8, 19u8, 125u8,
                            123u8, 238u8, 41u8, 107u8, 220u8, 65u8, 97u8, 46u8, 168u8, 115u8,
                        ],
                    )
                }
                pub fn update_group(
                    &self,
                    group_id: types::update_group::GroupId,
                    name: types::update_group::Name,
                ) -> ::subxt::tx::Payload<types::UpdateGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "update_group",
                        types::UpdateGroup { group_id, name },
                        [
                            247u8, 159u8, 129u8, 15u8, 150u8, 204u8, 24u8, 238u8, 110u8, 15u8,
                            138u8, 108u8, 0u8, 90u8, 252u8, 174u8, 144u8, 193u8, 219u8, 137u8,
                            66u8, 202u8, 22u8, 157u8, 17u8, 175u8, 239u8, 98u8, 192u8, 95u8, 139u8,
                            7u8,
                        ],
                    )
                }
                pub fn disable_group(
                    &self,
                    group_id: types::disable_group::GroupId,
                ) -> ::subxt::tx::Payload<types::DisableGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "disable_group",
                        types::DisableGroup { group_id },
                        [
                            114u8, 90u8, 105u8, 203u8, 227u8, 204u8, 0u8, 167u8, 214u8, 68u8, 26u8,
                            223u8, 109u8, 3u8, 217u8, 24u8, 215u8, 28u8, 70u8, 182u8, 240u8, 252u8,
                            135u8, 230u8, 3u8, 216u8, 178u8, 245u8, 23u8, 33u8, 150u8, 167u8,
                        ],
                    )
                }
                pub fn assign_role_to_group(
                    &self,
                    role_id: types::assign_role_to_group::RoleId,
                    group_id: types::assign_role_to_group::GroupId,
                ) -> ::subxt::tx::Payload<types::AssignRoleToGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "assign_role_to_group",
                        types::AssignRoleToGroup { role_id, group_id },
                        [
                            167u8, 255u8, 17u8, 212u8, 199u8, 124u8, 213u8, 172u8, 122u8, 216u8,
                            116u8, 100u8, 254u8, 214u8, 176u8, 167u8, 245u8, 30u8, 161u8, 240u8,
                            30u8, 177u8, 1u8, 10u8, 62u8, 101u8, 234u8, 94u8, 168u8, 255u8, 166u8,
                            164u8,
                        ],
                    )
                }
                pub fn unassign_role_to_group(
                    &self,
                    role_id: types::unassign_role_to_group::RoleId,
                    group_id: types::unassign_role_to_group::GroupId,
                ) -> ::subxt::tx::Payload<types::UnassignRoleToGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "unassign_role_to_group",
                        types::UnassignRoleToGroup { role_id, group_id },
                        [
                            242u8, 180u8, 95u8, 80u8, 61u8, 211u8, 34u8, 65u8, 24u8, 176u8, 213u8,
                            50u8, 171u8, 67u8, 210u8, 62u8, 198u8, 108u8, 10u8, 129u8, 138u8, 77u8,
                            240u8, 137u8, 130u8, 49u8, 195u8, 174u8, 16u8, 133u8, 96u8, 23u8,
                        ],
                    )
                }
                pub fn fetch_group_roles(
                    &self,
                    owner: types::fetch_group_roles::Owner,
                    group_id: types::fetch_group_roles::GroupId,
                ) -> ::subxt::tx::Payload<types::FetchGroupRoles> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_group_roles",
                        types::FetchGroupRoles { owner, group_id },
                        [
                            54u8, 23u8, 120u8, 115u8, 252u8, 14u8, 15u8, 245u8, 239u8, 11u8, 248u8,
                            218u8, 72u8, 172u8, 79u8, 103u8, 104u8, 195u8, 224u8, 62u8, 52u8, 1u8,
                            200u8, 190u8, 241u8, 177u8, 105u8, 93u8, 155u8, 162u8, 193u8, 113u8,
                        ],
                    )
                }
                pub fn assign_user_to_group(
                    &self,
                    user_id: types::assign_user_to_group::UserId,
                    group_id: types::assign_user_to_group::GroupId,
                ) -> ::subxt::tx::Payload<types::AssignUserToGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "assign_user_to_group",
                        types::AssignUserToGroup { user_id, group_id },
                        [
                            44u8, 35u8, 52u8, 165u8, 168u8, 158u8, 219u8, 107u8, 53u8, 199u8, 86u8,
                            223u8, 132u8, 176u8, 194u8, 26u8, 224u8, 37u8, 155u8, 87u8, 179u8,
                            24u8, 166u8, 37u8, 250u8, 254u8, 30u8, 9u8, 210u8, 43u8, 203u8, 193u8,
                        ],
                    )
                }
                pub fn unassign_user_to_group(
                    &self,
                    user_id: types::unassign_user_to_group::UserId,
                    group_id: types::unassign_user_to_group::GroupId,
                ) -> ::subxt::tx::Payload<types::UnassignUserToGroup> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "unassign_user_to_group",
                        types::UnassignUserToGroup { user_id, group_id },
                        [
                            232u8, 62u8, 232u8, 61u8, 175u8, 205u8, 34u8, 104u8, 239u8, 70u8, 49u8,
                            32u8, 22u8, 128u8, 53u8, 232u8, 107u8, 135u8, 198u8, 20u8, 56u8, 207u8,
                            175u8, 122u8, 171u8, 248u8, 77u8, 15u8, 196u8, 241u8, 163u8, 202u8,
                        ],
                    )
                }
                pub fn fetch_user_groups(
                    &self,
                    owner: types::fetch_user_groups::Owner,
                    user_id: types::fetch_user_groups::UserId,
                ) -> ::subxt::tx::Payload<types::FetchUserGroups> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_user_groups",
                        types::FetchUserGroups { owner, user_id },
                        [
                            212u8, 118u8, 152u8, 137u8, 87u8, 212u8, 23u8, 156u8, 107u8, 75u8,
                            35u8, 86u8, 67u8, 140u8, 2u8, 134u8, 245u8, 162u8, 34u8, 9u8, 46u8,
                            188u8, 240u8, 235u8, 59u8, 117u8, 244u8, 57u8, 246u8, 141u8, 226u8,
                            148u8,
                        ],
                    )
                }
                pub fn fetch_user_permissions(
                    &self,
                    owner: types::fetch_user_permissions::Owner,
                    user_id: types::fetch_user_permissions::UserId,
                ) -> ::subxt::tx::Payload<types::FetchUserPermissions> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_user_permissions",
                        types::FetchUserPermissions { owner, user_id },
                        [
                            30u8, 119u8, 61u8, 241u8, 56u8, 57u8, 248u8, 127u8, 170u8, 70u8, 157u8,
                            225u8, 225u8, 157u8, 253u8, 25u8, 177u8, 168u8, 217u8, 253u8, 219u8,
                            74u8, 229u8, 178u8, 202u8, 13u8, 37u8, 105u8, 215u8, 22u8, 142u8,
                            208u8,
                        ],
                    )
                }
                pub fn fetch_group_permissions(
                    &self,
                    owner: types::fetch_group_permissions::Owner,
                    group_id: types::fetch_group_permissions::GroupId,
                ) -> ::subxt::tx::Payload<types::FetchGroupPermissions> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqRbac",
                        "fetch_group_permissions",
                        types::FetchGroupPermissions { owner, group_id },
                        [
                            188u8, 239u8, 245u8, 104u8, 142u8, 210u8, 222u8, 128u8, 108u8, 8u8,
                            75u8, 27u8, 255u8, 14u8, 85u8, 135u8, 252u8, 117u8, 23u8, 202u8, 216u8,
                            216u8, 235u8, 197u8, 12u8, 112u8, 234u8, 92u8, 100u8, 34u8, 32u8,
                            193u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::peaq_pallet_rbac::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleAdded(
                pub role_added::Field0,
                pub role_added::Field1,
                pub role_added::Field2,
            );
            pub mod role_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for RoleAdded {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleUpdated(
                pub role_updated::Field0,
                pub role_updated::Field1,
                pub role_updated::Field2,
            );
            pub mod role_updated {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for RoleUpdated {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleRemoved(pub role_removed::Field0, pub role_removed::Field1);
            pub mod role_removed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for RoleRemoved {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleFetched(pub role_fetched::Field0);
            pub mod role_fetched {
                use super::runtime_types;
                pub type Field0 = runtime_types::peaq_pallet_rbac::structs::Entity<
                    [::core::primitive::u8; 32usize],
                >;
            }
            impl ::subxt::events::StaticEvent for RoleFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AllRolesFetched(pub all_roles_fetched::Field0);
            pub mod all_roles_fetched {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for AllRolesFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "AllRolesFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleAssignedToUser(
                pub role_assigned_to_user::Field0,
                pub role_assigned_to_user::Field1,
                pub role_assigned_to_user::Field2,
            );
            pub mod role_assigned_to_user {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for RoleAssignedToUser {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleAssignedToUser";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleUnassignedToUser(
                pub role_unassigned_to_user::Field0,
                pub role_unassigned_to_user::Field1,
                pub role_unassigned_to_user::Field2,
            );
            pub mod role_unassigned_to_user {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for RoleUnassignedToUser {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleUnassignedToUser";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleAssignedToGroup(
                pub role_assigned_to_group::Field0,
                pub role_assigned_to_group::Field1,
                pub role_assigned_to_group::Field2,
            );
            pub mod role_assigned_to_group {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for RoleAssignedToGroup {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleAssignedToGroup";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoleUnassignedToGroup(
                pub role_unassigned_to_group::Field0,
                pub role_unassigned_to_group::Field1,
                pub role_unassigned_to_group::Field2,
            );
            pub mod role_unassigned_to_group {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for RoleUnassignedToGroup {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "RoleUnassignedToGroup";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedGroupRoles(pub fetched_group_roles::Field0);
            pub mod fetched_group_roles {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Role2Group<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedGroupRoles {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedGroupRoles";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedUserRoles(pub fetched_user_roles::Field0);
            pub mod fetched_user_roles {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Role2User<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedUserRoles {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedUserRoles";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedUserGroups(pub fetched_user_groups::Field0);
            pub mod fetched_user_groups {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::User2Group<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedUserGroups {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedUserGroups";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedUserPermissions(pub fetched_user_permissions::Field0);
            pub mod fetched_user_permissions {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedUserPermissions {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedUserPermissions";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedGroupPermissions(pub fetched_group_permissions::Field0);
            pub mod fetched_group_permissions {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedGroupPermissions {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedGroupPermissions";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionAdded(
                pub permission_added::Field0,
                pub permission_added::Field1,
                pub permission_added::Field2,
            );
            pub mod permission_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for PermissionAdded {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionUpdated(
                pub permission_updated::Field0,
                pub permission_updated::Field1,
                pub permission_updated::Field2,
            );
            pub mod permission_updated {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for PermissionUpdated {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionDisabled(
                pub permission_disabled::Field0,
                pub permission_disabled::Field1,
            );
            pub mod permission_disabled {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for PermissionDisabled {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionDisabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionAssigned(
                pub permission_assigned::Field0,
                pub permission_assigned::Field1,
                pub permission_assigned::Field2,
            );
            pub mod permission_assigned {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for PermissionAssigned {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionAssigned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionUnassignedToRole(
                pub permission_unassigned_to_role::Field0,
                pub permission_unassigned_to_role::Field1,
                pub permission_unassigned_to_role::Field2,
            );
            pub mod permission_unassigned_to_role {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for PermissionUnassignedToRole {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionUnassignedToRole";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedRolePermissions(pub fetched_role_permissions::Field0);
            pub mod fetched_role_permissions {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Permission2Role<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for FetchedRolePermissions {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "FetchedRolePermissions";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PermissionFetched(pub permission_fetched::Field0);
            pub mod permission_fetched {
                use super::runtime_types;
                pub type Field0 = runtime_types::peaq_pallet_rbac::structs::Entity<
                    [::core::primitive::u8; 32usize],
                >;
            }
            impl ::subxt::events::StaticEvent for PermissionFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "PermissionFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AllPermissionsFetched(pub all_permissions_fetched::Field0);
            pub mod all_permissions_fetched {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for AllPermissionsFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "AllPermissionsFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct GroupFetched(pub group_fetched::Field0);
            pub mod group_fetched {
                use super::runtime_types;
                pub type Field0 = runtime_types::peaq_pallet_rbac::structs::Entity<
                    [::core::primitive::u8; 32usize],
                >;
            }
            impl ::subxt::events::StaticEvent for GroupFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "GroupFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AllGroupsFetched(pub all_groups_fetched::Field0);
            pub mod all_groups_fetched {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<
                    runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >,
                >;
            }
            impl ::subxt::events::StaticEvent for AllGroupsFetched {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "AllGroupsFetched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct GroupAdded(
                pub group_added::Field0,
                pub group_added::Field1,
                pub group_added::Field2,
            );
            pub mod group_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for GroupAdded {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "GroupAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct GroupUpdated(
                pub group_updated::Field0,
                pub group_updated::Field1,
                pub group_updated::Field2,
            );
            pub mod group_updated {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for GroupUpdated {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "GroupUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct GroupDisabled(pub group_disabled::Field0, pub group_disabled::Field1);
            pub mod group_disabled {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for GroupDisabled {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "GroupDisabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UserAssignedToGroup(
                pub user_assigned_to_group::Field0,
                pub user_assigned_to_group::Field1,
                pub user_assigned_to_group::Field2,
            );
            pub mod user_assigned_to_group {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for UserAssignedToGroup {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "UserAssignedToGroup";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UserUnAssignedToGroup(
                pub user_un_assigned_to_group::Field0,
                pub user_un_assigned_to_group::Field1,
                pub user_un_assigned_to_group::Field2,
            );
            pub mod user_un_assigned_to_group {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = [::core::primitive::u8; 32usize];
                pub type Field2 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for UserUnAssignedToGroup {
                const PALLET: &'static str = "PeaqRbac";
                const EVENT: &'static str = "UserUnAssignedToGroup";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod role_store {
                    use super::runtime_types;
                    pub type RoleStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod role2_user_store {
                    use super::runtime_types;
                    pub type Role2UserStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Role2User<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod permission_store {
                    use super::runtime_types;
                    pub type PermissionStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod permission2_role_store {
                    use super::runtime_types;
                    pub type Permission2RoleStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Permission2Role<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod group_store {
                    use super::runtime_types;
                    pub type GroupStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod role2_group_store {
                    use super::runtime_types;
                    pub type Role2GroupStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::Role2Group<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod user2_group_store {
                    use super::runtime_types;
                    pub type User2GroupStore = ::std::vec::Vec<
                        runtime_types::peaq_pallet_rbac::structs::User2Group<
                            [::core::primitive::u8; 32usize],
                        >,
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod keys_look_up_store {
                    use super::runtime_types;
                    pub type KeysLookUpStore = runtime_types::peaq_pallet_rbac::structs::Entity<
                        [::core::primitive::u8; 32usize],
                    >;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn role_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role_store::RoleStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "RoleStore",
                        vec![],
                        [
                            214u8, 103u8, 180u8, 5u8, 212u8, 149u8, 225u8, 15u8, 192u8, 231u8,
                            73u8, 219u8, 131u8, 244u8, 78u8, 78u8, 243u8, 66u8, 119u8, 99u8, 52u8,
                            20u8, 55u8, 250u8, 255u8, 232u8, 38u8, 249u8, 187u8, 72u8, 126u8,
                            127u8,
                        ],
                    )
                }
                pub fn role_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::role_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role_store::RoleStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "RoleStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            214u8, 103u8, 180u8, 5u8, 212u8, 149u8, 225u8, 15u8, 192u8, 231u8,
                            73u8, 219u8, 131u8, 244u8, 78u8, 78u8, 243u8, 66u8, 119u8, 99u8, 52u8,
                            20u8, 55u8, 250u8, 255u8, 232u8, 38u8, 249u8, 187u8, 72u8, 126u8,
                            127u8,
                        ],
                    )
                }
                pub fn role2_user_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role2_user_store::Role2UserStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Role2UserStore",
                        vec![],
                        [
                            176u8, 105u8, 152u8, 118u8, 5u8, 121u8, 238u8, 201u8, 82u8, 115u8,
                            90u8, 184u8, 198u8, 246u8, 169u8, 144u8, 125u8, 162u8, 25u8, 188u8,
                            144u8, 14u8, 198u8, 119u8, 89u8, 172u8, 63u8, 119u8, 7u8, 73u8, 231u8,
                            1u8,
                        ],
                    )
                }
                pub fn role2_user_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::role2_user_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role2_user_store::Role2UserStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Role2UserStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            176u8, 105u8, 152u8, 118u8, 5u8, 121u8, 238u8, 201u8, 82u8, 115u8,
                            90u8, 184u8, 198u8, 246u8, 169u8, 144u8, 125u8, 162u8, 25u8, 188u8,
                            144u8, 14u8, 198u8, 119u8, 89u8, 172u8, 63u8, 119u8, 7u8, 73u8, 231u8,
                            1u8,
                        ],
                    )
                }
                pub fn permission_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::permission_store::PermissionStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "PermissionStore",
                        vec![],
                        [
                            12u8, 54u8, 183u8, 22u8, 122u8, 96u8, 89u8, 180u8, 166u8, 101u8, 115u8,
                            7u8, 240u8, 150u8, 32u8, 153u8, 158u8, 221u8, 224u8, 204u8, 214u8, 1u8,
                            184u8, 84u8, 11u8, 186u8, 68u8, 188u8, 138u8, 227u8, 207u8, 55u8,
                        ],
                    )
                }
                pub fn permission_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::permission_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::permission_store::PermissionStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "PermissionStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            12u8, 54u8, 183u8, 22u8, 122u8, 96u8, 89u8, 180u8, 166u8, 101u8, 115u8,
                            7u8, 240u8, 150u8, 32u8, 153u8, 158u8, 221u8, 224u8, 204u8, 214u8, 1u8,
                            184u8, 84u8, 11u8, 186u8, 68u8, 188u8, 138u8, 227u8, 207u8, 55u8,
                        ],
                    )
                }
                pub fn permission2_role_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::permission2_role_store::Permission2RoleStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Permission2RoleStore",
                        vec![],
                        [
                            181u8, 232u8, 98u8, 171u8, 240u8, 127u8, 33u8, 213u8, 222u8, 248u8,
                            113u8, 201u8, 53u8, 101u8, 22u8, 13u8, 88u8, 91u8, 212u8, 10u8, 17u8,
                            52u8, 50u8, 252u8, 246u8, 248u8, 147u8, 37u8, 239u8, 135u8, 223u8,
                            153u8,
                        ],
                    )
                }
                pub fn permission2_role_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::permission2_role_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::permission2_role_store::Permission2RoleStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Permission2RoleStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            181u8, 232u8, 98u8, 171u8, 240u8, 127u8, 33u8, 213u8, 222u8, 248u8,
                            113u8, 201u8, 53u8, 101u8, 22u8, 13u8, 88u8, 91u8, 212u8, 10u8, 17u8,
                            52u8, 50u8, 252u8, 246u8, 248u8, 147u8, 37u8, 239u8, 135u8, 223u8,
                            153u8,
                        ],
                    )
                }
                pub fn group_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::group_store::GroupStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "GroupStore",
                        vec![],
                        [
                            16u8, 167u8, 255u8, 114u8, 171u8, 255u8, 36u8, 194u8, 64u8, 5u8, 126u8,
                            92u8, 85u8, 238u8, 241u8, 234u8, 236u8, 95u8, 45u8, 56u8, 127u8, 121u8,
                            21u8, 133u8, 207u8, 79u8, 93u8, 163u8, 225u8, 63u8, 245u8, 100u8,
                        ],
                    )
                }
                pub fn group_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::group_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::group_store::GroupStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "GroupStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            16u8, 167u8, 255u8, 114u8, 171u8, 255u8, 36u8, 194u8, 64u8, 5u8, 126u8,
                            92u8, 85u8, 238u8, 241u8, 234u8, 236u8, 95u8, 45u8, 56u8, 127u8, 121u8,
                            21u8, 133u8, 207u8, 79u8, 93u8, 163u8, 225u8, 63u8, 245u8, 100u8,
                        ],
                    )
                }
                pub fn role2_group_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role2_group_store::Role2GroupStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Role2GroupStore",
                        vec![],
                        [
                            81u8, 128u8, 119u8, 164u8, 154u8, 48u8, 110u8, 108u8, 92u8, 229u8,
                            195u8, 201u8, 0u8, 57u8, 173u8, 147u8, 157u8, 98u8, 198u8, 100u8,
                            253u8, 108u8, 222u8, 75u8, 255u8, 38u8, 239u8, 196u8, 89u8, 197u8,
                            184u8, 3u8,
                        ],
                    )
                }
                pub fn role2_group_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::role2_group_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::role2_group_store::Role2GroupStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "Role2GroupStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            81u8, 128u8, 119u8, 164u8, 154u8, 48u8, 110u8, 108u8, 92u8, 229u8,
                            195u8, 201u8, 0u8, 57u8, 173u8, 147u8, 157u8, 98u8, 198u8, 100u8,
                            253u8, 108u8, 222u8, 75u8, 255u8, 38u8, 239u8, 196u8, 89u8, 197u8,
                            184u8, 3u8,
                        ],
                    )
                }
                pub fn user2_group_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::user2_group_store::User2GroupStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "User2GroupStore",
                        vec![],
                        [
                            223u8, 199u8, 19u8, 69u8, 114u8, 109u8, 174u8, 254u8, 108u8, 68u8,
                            226u8, 191u8, 35u8, 207u8, 46u8, 170u8, 106u8, 32u8, 205u8, 199u8,
                            47u8, 25u8, 204u8, 241u8, 196u8, 59u8, 56u8, 57u8, 206u8, 133u8, 19u8,
                            192u8,
                        ],
                    )
                }
                pub fn user2_group_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::user2_group_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::user2_group_store::User2GroupStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "User2GroupStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            223u8, 199u8, 19u8, 69u8, 114u8, 109u8, 174u8, 254u8, 108u8, 68u8,
                            226u8, 191u8, 35u8, 207u8, 46u8, 170u8, 106u8, 32u8, 205u8, 199u8,
                            47u8, 25u8, 204u8, 241u8, 196u8, 59u8, 56u8, 57u8, 206u8, 133u8, 19u8,
                            192u8,
                        ],
                    )
                }
                pub fn keys_look_up_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::keys_look_up_store::KeysLookUpStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "KeysLookUpStore",
                        vec![],
                        [
                            66u8, 252u8, 100u8, 63u8, 102u8, 65u8, 155u8, 178u8, 91u8, 212u8,
                            177u8, 115u8, 69u8, 252u8, 201u8, 125u8, 20u8, 138u8, 245u8, 105u8,
                            202u8, 25u8, 207u8, 105u8, 228u8, 55u8, 16u8, 118u8, 227u8, 101u8,
                            99u8, 115u8,
                        ],
                    )
                }
                pub fn keys_look_up_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::keys_look_up_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::keys_look_up_store::KeysLookUpStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqRbac",
                        "KeysLookUpStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            66u8, 252u8, 100u8, 63u8, 102u8, 65u8, 155u8, 178u8, 91u8, 212u8,
                            177u8, 115u8, 69u8, 252u8, 201u8, 125u8, 20u8, 138u8, 245u8, 105u8,
                            202u8, 25u8, 207u8, 105u8, 228u8, 55u8, 16u8, 118u8, 227u8, 101u8,
                            99u8, 115u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod peaq_storage {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::peaq_pallet_storage::pallet::Error;
        pub type Call = runtime_types::peaq_pallet_storage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddItem {
                    pub item_type: add_item::ItemType,
                    pub item: add_item::Item,
                }
                pub mod add_item {
                    use super::runtime_types;
                    pub type ItemType = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Item = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddItem {
                    const PALLET: &'static str = "PeaqStorage";
                    const CALL: &'static str = "add_item";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateItem {
                    pub item_type: update_item::ItemType,
                    pub item: update_item::Item,
                }
                pub mod update_item {
                    use super::runtime_types;
                    pub type ItemType = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Item = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateItem {
                    const PALLET: &'static str = "PeaqStorage";
                    const CALL: &'static str = "update_item";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GetItem {
                    pub item_type: get_item::ItemType,
                }
                pub mod get_item {
                    use super::runtime_types;
                    pub type ItemType = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for GetItem {
                    const PALLET: &'static str = "PeaqStorage";
                    const CALL: &'static str = "get_item";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn add_item(
                    &self,
                    item_type: types::add_item::ItemType,
                    item: types::add_item::Item,
                ) -> ::subxt::tx::Payload<types::AddItem> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqStorage",
                        "add_item",
                        types::AddItem { item_type, item },
                        [
                            136u8, 177u8, 35u8, 171u8, 0u8, 149u8, 222u8, 64u8, 140u8, 218u8, 74u8,
                            230u8, 165u8, 36u8, 224u8, 113u8, 150u8, 108u8, 48u8, 74u8, 211u8,
                            246u8, 101u8, 186u8, 12u8, 170u8, 189u8, 240u8, 212u8, 91u8, 230u8,
                            11u8,
                        ],
                    )
                }
                pub fn update_item(
                    &self,
                    item_type: types::update_item::ItemType,
                    item: types::update_item::Item,
                ) -> ::subxt::tx::Payload<types::UpdateItem> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqStorage",
                        "update_item",
                        types::UpdateItem { item_type, item },
                        [
                            25u8, 56u8, 117u8, 152u8, 199u8, 15u8, 250u8, 242u8, 121u8, 69u8,
                            147u8, 212u8, 124u8, 245u8, 26u8, 208u8, 215u8, 93u8, 161u8, 94u8,
                            177u8, 94u8, 14u8, 171u8, 108u8, 41u8, 210u8, 195u8, 167u8, 95u8, 70u8,
                            218u8,
                        ],
                    )
                }
                pub fn get_item(
                    &self,
                    item_type: types::get_item::ItemType,
                ) -> ::subxt::tx::Payload<types::GetItem> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqStorage",
                        "get_item",
                        types::GetItem { item_type },
                        [
                            89u8, 176u8, 234u8, 137u8, 96u8, 244u8, 73u8, 74u8, 162u8, 64u8, 96u8,
                            109u8, 236u8, 66u8, 19u8, 33u8, 16u8, 217u8, 89u8, 175u8, 26u8, 192u8,
                            64u8, 26u8, 134u8, 217u8, 243u8, 98u8, 85u8, 240u8, 93u8, 171u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::peaq_pallet_storage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ItemAdded(
                pub item_added::Field0,
                pub item_added::Field1,
                pub item_added::Field2,
            );
            pub mod item_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for ItemAdded {
                const PALLET: &'static str = "PeaqStorage";
                const EVENT: &'static str = "ItemAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ItemRead(pub item_read::Field0);
            pub mod item_read {
                use super::runtime_types;
                pub type Field0 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for ItemRead {
                const PALLET: &'static str = "PeaqStorage";
                const EVENT: &'static str = "ItemRead";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ItemUpdated(
                pub item_updated::Field0,
                pub item_updated::Field1,
                pub item_updated::Field2,
            );
            pub mod item_updated {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::std::vec::Vec<::core::primitive::u8>;
                pub type Field2 = ::std::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::events::StaticEvent for ItemUpdated {
                const PALLET: &'static str = "PeaqStorage";
                const EVENT: &'static str = "ItemUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod item_store {
                    use super::runtime_types;
                    pub type ItemStore = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn item_store_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::item_store::ItemStore,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqStorage",
                        "ItemStore",
                        vec![],
                        [
                            70u8, 144u8, 59u8, 213u8, 92u8, 82u8, 222u8, 131u8, 16u8, 183u8, 35u8,
                            113u8, 104u8, 197u8, 123u8, 100u8, 143u8, 5u8, 244u8, 223u8, 217u8,
                            217u8, 82u8, 210u8, 179u8, 111u8, 87u8, 130u8, 6u8, 5u8, 151u8, 47u8,
                        ],
                    )
                }
                pub fn item_store(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::item_store::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::item_store::ItemStore,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqStorage",
                        "ItemStore",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            70u8, 144u8, 59u8, 213u8, 92u8, 82u8, 222u8, 131u8, 16u8, 183u8, 35u8,
                            113u8, 104u8, 197u8, 123u8, 100u8, 143u8, 5u8, 244u8, 223u8, 217u8,
                            217u8, 82u8, 210u8, 179u8, 111u8, 87u8, 130u8, 6u8, 5u8, 151u8, 47u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod peaq_mor {
        use super::root_mod;
        use super::runtime_types;
        pub type Error = runtime_types::peaq_pallet_mor::pallet::Error;
        pub type Call = runtime_types::peaq_pallet_mor::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GetRegistrationReward {
                    pub machine: get_registration_reward::Machine,
                }
                pub mod get_registration_reward {
                    use super::runtime_types;
                    pub type Machine = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for GetRegistrationReward {
                    const PALLET: &'static str = "PeaqMor";
                    const CALL: &'static str = "get_registration_reward";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GetOnlineRewards {
                    pub machine: get_online_rewards::Machine,
                }
                pub mod get_online_rewards {
                    use super::runtime_types;
                    pub type Machine = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for GetOnlineRewards {
                    const PALLET: &'static str = "PeaqMor";
                    const CALL: &'static str = "get_online_rewards";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PayMachineUsage {
                    pub machine: pay_machine_usage::Machine,
                    pub amount: pay_machine_usage::Amount,
                }
                pub mod pay_machine_usage {
                    use super::runtime_types;
                    pub type Machine = ::subxt::utils::AccountId32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for PayMachineUsage {
                    const PALLET: &'static str = "PeaqMor";
                    const CALL: &'static str = "pay_machine_usage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetConfiguration {
                    pub config: set_configuration::Config,
                }
                pub mod set_configuration {
                    use super::runtime_types;
                    pub type Config =
                        runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetConfiguration {
                    const PALLET: &'static str = "PeaqMor";
                    const CALL: &'static str = "set_configuration";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FetchPotBalance;
                impl ::subxt::blocks::StaticExtrinsic for FetchPotBalance {
                    const PALLET: &'static str = "PeaqMor";
                    const CALL: &'static str = "fetch_pot_balance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn get_registration_reward(
                    &self,
                    machine: types::get_registration_reward::Machine,
                ) -> ::subxt::tx::Payload<types::GetRegistrationReward> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqMor",
                        "get_registration_reward",
                        types::GetRegistrationReward { machine },
                        [
                            171u8, 86u8, 22u8, 106u8, 4u8, 159u8, 58u8, 68u8, 27u8, 126u8, 86u8,
                            103u8, 160u8, 114u8, 127u8, 1u8, 133u8, 25u8, 192u8, 214u8, 2u8, 42u8,
                            37u8, 155u8, 173u8, 112u8, 82u8, 96u8, 224u8, 45u8, 166u8, 117u8,
                        ],
                    )
                }
                pub fn get_online_rewards(
                    &self,
                    machine: types::get_online_rewards::Machine,
                ) -> ::subxt::tx::Payload<types::GetOnlineRewards> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqMor",
                        "get_online_rewards",
                        types::GetOnlineRewards { machine },
                        [
                            209u8, 234u8, 61u8, 151u8, 226u8, 3u8, 245u8, 245u8, 87u8, 103u8, 90u8,
                            27u8, 116u8, 43u8, 57u8, 210u8, 58u8, 162u8, 146u8, 91u8, 175u8, 115u8,
                            42u8, 174u8, 13u8, 128u8, 247u8, 225u8, 125u8, 156u8, 173u8, 183u8,
                        ],
                    )
                }
                pub fn pay_machine_usage(
                    &self,
                    machine: types::pay_machine_usage::Machine,
                    amount: types::pay_machine_usage::Amount,
                ) -> ::subxt::tx::Payload<types::PayMachineUsage> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqMor",
                        "pay_machine_usage",
                        types::PayMachineUsage { machine, amount },
                        [
                            139u8, 31u8, 116u8, 50u8, 5u8, 72u8, 177u8, 54u8, 91u8, 192u8, 15u8,
                            2u8, 137u8, 123u8, 41u8, 81u8, 144u8, 176u8, 23u8, 129u8, 4u8, 235u8,
                            81u8, 167u8, 238u8, 137u8, 114u8, 96u8, 211u8, 245u8, 208u8, 203u8,
                        ],
                    )
                }
                pub fn set_configuration(
                    &self,
                    config: types::set_configuration::Config,
                ) -> ::subxt::tx::Payload<types::SetConfiguration> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqMor",
                        "set_configuration",
                        types::SetConfiguration { config },
                        [
                            1u8, 82u8, 171u8, 109u8, 33u8, 188u8, 41u8, 101u8, 210u8, 179u8, 5u8,
                            89u8, 255u8, 66u8, 79u8, 229u8, 37u8, 129u8, 240u8, 128u8, 132u8, 23u8,
                            225u8, 166u8, 175u8, 191u8, 64u8, 176u8, 181u8, 227u8, 82u8, 41u8,
                        ],
                    )
                }
                pub fn fetch_pot_balance(&self) -> ::subxt::tx::Payload<types::FetchPotBalance> {
                    ::subxt::tx::Payload::new_static(
                        "PeaqMor",
                        "fetch_pot_balance",
                        types::FetchPotBalance {},
                        [
                            169u8, 47u8, 100u8, 121u8, 170u8, 202u8, 74u8, 105u8, 222u8, 91u8,
                            55u8, 249u8, 216u8, 31u8, 129u8, 188u8, 6u8, 134u8, 228u8, 136u8,
                            250u8, 114u8, 102u8, 38u8, 199u8, 141u8, 90u8, 71u8, 74u8, 93u8, 117u8,
                            45u8,
                        ],
                    )
                }
            }
        }
        pub type Event = runtime_types::peaq_pallet_mor::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MintedTokens(pub minted_tokens::Field0);
            pub mod minted_tokens {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for MintedTokens {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "MintedTokens";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MorConfigChanged(pub mor_config_changed::Field0);
            pub mod mor_config_changed {
                use super::runtime_types;
                pub type Field0 =
                    runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>;
            }
            impl ::subxt::events::StaticEvent for MorConfigChanged {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "MorConfigChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedMorConfig(pub fetched_mor_config::Field0);
            pub mod fetched_mor_config {
                use super::runtime_types;
                pub type Field0 =
                    runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>;
            }
            impl ::subxt::events::StaticEvent for FetchedMorConfig {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "FetchedMorConfig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedPotBalance(pub fetched_pot_balance::Field0);
            pub mod fetched_pot_balance {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for FetchedPotBalance {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "FetchedPotBalance";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct FetchedCurrentRewarding(pub fetched_current_rewarding::Field0);
            pub mod fetched_current_rewarding {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for FetchedCurrentRewarding {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "FetchedCurrentRewarding";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MachineUsagePayed(
                pub machine_usage_payed::Field0,
                pub machine_usage_payed::Field1,
            );
            pub mod machine_usage_payed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for MachineUsagePayed {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "MachineUsagePayed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OnlineRewardsPayed(
                pub online_rewards_payed::Field0,
                pub online_rewards_payed::Field1,
            );
            pub mod online_rewards_payed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for OnlineRewardsPayed {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "OnlineRewardsPayed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RegistrationRewardPayed(
                pub registration_reward_payed::Field0,
                pub registration_reward_payed::Field1,
            );
            pub mod registration_reward_payed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for RegistrationRewardPayed {
                const PALLET: &'static str = "PeaqMor";
                const EVENT: &'static str = "RegistrationRewardPayed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod machine_register {
                    use super::runtime_types;
                    pub type MachineRegister = [::core::primitive::u8; 32usize];
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
                pub mod rewards_record_storage {
                    use super::runtime_types;
                    pub type RewardsRecordStorage = (
                        ::core::primitive::u8,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u128,
                        >,
                    );
                }
                pub mod period_reward_storage {
                    use super::runtime_types;
                    pub type PeriodRewardStorage = ::core::primitive::u128;
                }
                pub mod mor_config_storage {
                    use super::runtime_types;
                    pub type MorConfigStorage =
                        runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn machine_register_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::machine_register::MachineRegister,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqMor",
                        "MachineRegister",
                        vec![],
                        [
                            196u8, 214u8, 117u8, 128u8, 89u8, 177u8, 100u8, 22u8, 46u8, 110u8,
                            186u8, 106u8, 100u8, 107u8, 239u8, 7u8, 70u8, 189u8, 97u8, 235u8, 41u8,
                            237u8, 47u8, 74u8, 120u8, 92u8, 24u8, 115u8, 9u8, 213u8, 39u8, 56u8,
                        ],
                    )
                }
                pub fn machine_register(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::machine_register::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::machine_register::MachineRegister,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqMor",
                        "MachineRegister",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            196u8, 214u8, 117u8, 128u8, 89u8, 177u8, 100u8, 22u8, 46u8, 110u8,
                            186u8, 106u8, 100u8, 107u8, 239u8, 7u8, 70u8, 189u8, 97u8, 235u8, 41u8,
                            237u8, 47u8, 74u8, 120u8, 92u8, 24u8, 115u8, 9u8, 213u8, 39u8, 56u8,
                        ],
                    )
                }
                pub fn rewards_record_storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rewards_record_storage::RewardsRecordStorage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqMor",
                        "RewardsRecordStorage",
                        vec![],
                        [
                            190u8, 128u8, 77u8, 15u8, 28u8, 73u8, 120u8, 142u8, 206u8, 93u8, 118u8,
                            39u8, 207u8, 164u8, 103u8, 247u8, 185u8, 157u8, 246u8, 117u8, 114u8,
                            85u8, 2u8, 252u8, 82u8, 176u8, 68u8, 16u8, 129u8, 187u8, 243u8, 196u8,
                        ],
                    )
                }
                pub fn period_reward_storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::period_reward_storage::PeriodRewardStorage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqMor",
                        "PeriodRewardStorage",
                        vec![],
                        [
                            92u8, 76u8, 103u8, 99u8, 167u8, 116u8, 246u8, 119u8, 123u8, 221u8,
                            35u8, 131u8, 47u8, 115u8, 247u8, 254u8, 212u8, 53u8, 217u8, 138u8,
                            53u8, 18u8, 114u8, 116u8, 225u8, 215u8, 161u8, 147u8, 102u8, 43u8,
                            89u8, 138u8,
                        ],
                    )
                }
                pub fn mor_config_storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::mor_config_storage::MorConfigStorage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PeaqMor",
                        "MorConfigStorage",
                        vec![],
                        [
                            255u8, 162u8, 186u8, 50u8, 67u8, 200u8, 82u8, 189u8, 119u8, 171u8,
                            103u8, 203u8, 79u8, 11u8, 202u8, 114u8, 123u8, 177u8, 33u8, 241u8,
                            227u8, 78u8, 32u8, 68u8, 60u8, 78u8, 28u8, 46u8, 142u8, 97u8, 232u8,
                            251u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PeaqMor",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn pot_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "PeaqMor",
                        "PotId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_btree_map {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::utils::KeyedVec<_0, _1>);
            }
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod cumulus_pallet_dmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    OverLimit,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    InvalidFormat {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    UnsupportedVersion {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    ExecutedDownward {
                        message_id: [::core::primitive::u8; 32usize],
                        outcome: runtime_types::xcm::v3::traits::Outcome,
                    },
                    #[codec(index = 3)]
                    WeightExhausted {
                        message_id: [::core::primitive::u8; 32usize],
                        remaining_weight: runtime_types::sp_weights::weight_v2::Weight,
                        required_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    OverweightEnqueued {
                        message_id: [::core::primitive::u8; 32usize],
                        overweight_index: ::core::primitive::u64,
                        required_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 5)]
                    OverweightServiced {
                        overweight_index: ::core::primitive::u64,
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    MaxMessagesExhausted {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfigData {
                pub max_individual: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PageIndexData {
                pub begin_used: ::core::primitive::u32,
                pub end_used: ::core::primitive::u32,
                pub overweight_count: ::core::primitive::u64,
            }
        }
        pub mod cumulus_pallet_parachain_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    # [codec (index = 0)] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] authorize_upgrade { code_hash : :: subxt :: utils :: H256 , check_version : :: core :: primitive :: bool , } , # [codec (index = 3)] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    OverlappingUpgrades,
                    #[codec(index = 1)]
                    ProhibitedByPolkadot,
                    #[codec(index = 2)]
                    TooBig,
                    #[codec(index = 3)]
                    ValidationDataNotAvailable,
                    #[codec(index = 4)]
                    HostConfigurationNotAvailable,
                    #[codec(index = 5)]
                    NotScheduled,
                    #[codec(index = 6)]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    ValidationFunctionStored,
                    #[codec(index = 1)]
                    ValidationFunctionApplied {
                        relay_chain_block_num: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    ValidationFunctionDiscarded,
                    #[codec(index = 3)]
                    UpgradeAuthorized { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    DownwardMessagesReceived { count: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    DownwardMessagesProcessed {
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        dmq_head: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    UpwardMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            pub mod relay_state_snapshot {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: utils :: H256 , pub relay_dispatch_queue_size : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispachQueueSize , pub ingress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RelayDispachQueueSize {
                    pub remaining_count: ::core::primitive::u32,
                    pub remaining_size: ::core::primitive::u32,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeUpgradeAuthorization {
                pub code_hash: ::subxt::utils::H256,
                pub check_version: ::core::primitive::bool,
            }
        }
        pub mod cumulus_pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    InvalidFormat([::core::primitive::u8; 32usize]),
                    #[codec(index = 1)]
                    UnsupportedVersion([::core::primitive::u8; 32usize]),
                    #[codec(index = 2)]
                    ExecutedDownward(
                        [::core::primitive::u8; 32usize],
                        runtime_types::xcm::v3::traits::Outcome,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Relay,
                    #[codec(index = 1)]
                    SiblingParachain(runtime_types::polkadot_parachain::primitives::Id),
                }
            }
        }
        pub mod cumulus_pallet_xcmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 1)]
                    suspend_xcm_execution,
                    #[codec(index = 2)]
                    resume_xcm_execution,
                    #[codec(index = 3)]
                    update_suspend_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    update_drop_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    update_resume_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    update_threshold_weight {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 7)]
                    update_weight_restrict_decay {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 8)]
                    update_xcmp_max_individual_weight {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    FailedToSend,
                    #[codec(index = 1)]
                    BadXcmOrigin,
                    #[codec(index = 2)]
                    BadXcm,
                    #[codec(index = 3)]
                    BadOverweightIndex,
                    #[codec(index = 4)]
                    WeightOverLimit,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Success {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 1)]
                    Fail {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        error: runtime_types::xcm::v3::traits::Error,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    BadVersion {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 3)]
                    BadFormat {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    XcmpMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    OverweightEnqueued {
                        sender: runtime_types::polkadot_parachain::primitives::Id,
                        sent_at: ::core::primitive::u32,
                        index: ::core::primitive::u64,
                        required: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    OverweightServiced {
                        index: ::core::primitive::u64,
                        used: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundChannelDetails {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
                pub message_metadata: ::std::vec::Vec<(
                    ::core::primitive::u32,
                    runtime_types::polkadot_parachain::primitives::XcmpMessageFormat,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum InboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundChannelDetails {
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
                pub signals_exist: ::core::primitive::bool,
                pub first_index: ::core::primitive::u16,
                pub last_index: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OutboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct QueueConfigData {
                pub suspend_threshold: ::core::primitive::u32,
                pub drop_threshold: ::core::primitive::u32,
                pub resume_threshold: ::core::primitive::u32,
                pub threshold_weight: runtime_types::sp_weights::weight_v2::Weight,
                pub weight_restrict_decay: runtime_types::sp_weights::weight_v2::Weight,
                pub xcmp_max_individual_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
        }
        pub mod cumulus_primitives_parachain_inherent {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MessageQueueChain(pub ::subxt::utils::H256);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParachainInherentData {
                pub validation_data:
                    runtime_types::polkadot_primitives::v4::PersistedValidationData<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
                pub downward_messages: ::std::vec::Vec<
                    runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                        ::core::primitive::u32,
                    >,
                >,
                pub horizontal_messages: ::subxt::utils::KeyedVec<
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                >,
            }
        }
        pub mod ethbloom {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bloom(pub [::core::primitive::u8; 256usize]);
        }
        pub mod ethereum {
            use super::runtime_types;
            pub mod block {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block<_0> {
                    pub header: runtime_types::ethereum::header::Header,
                    pub transactions: ::std::vec::Vec<_0>,
                    pub ommers: ::std::vec::Vec<runtime_types::ethereum::header::Header>,
                }
            }
            pub mod header {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Header {
                    pub parent_hash: ::subxt::utils::H256,
                    pub ommers_hash: ::subxt::utils::H256,
                    pub beneficiary: ::subxt::utils::H160,
                    pub state_root: ::subxt::utils::H256,
                    pub transactions_root: ::subxt::utils::H256,
                    pub receipts_root: ::subxt::utils::H256,
                    pub logs_bloom: runtime_types::ethbloom::Bloom,
                    pub difficulty: runtime_types::primitive_types::U256,
                    pub number: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub gas_used: runtime_types::primitive_types::U256,
                    pub timestamp: ::core::primitive::u64,
                    pub extra_data: ::std::vec::Vec<::core::primitive::u8>,
                    pub mix_hash: ::subxt::utils::H256,
                    pub nonce: runtime_types::ethereum_types::hash::H64,
                }
            }
            pub mod log {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Log {
                    pub address: ::subxt::utils::H160,
                    pub topics: ::std::vec::Vec<::subxt::utils::H256>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod receipt {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP658ReceiptData {
                    pub status_code: ::core::primitive::u8,
                    pub used_gas: runtime_types::primitive_types::U256,
                    pub logs_bloom: runtime_types::ethbloom::Bloom,
                    pub logs: ::std::vec::Vec<runtime_types::ethereum::log::Log>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReceiptV3 {
                    #[codec(index = 0)]
                    Legacy(runtime_types::ethereum::receipt::EIP658ReceiptData),
                    #[codec(index = 1)]
                    EIP2930(runtime_types::ethereum::receipt::EIP658ReceiptData),
                    #[codec(index = 2)]
                    EIP1559(runtime_types::ethereum::receipt::EIP658ReceiptData),
                }
            }
            pub mod transaction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccessListItem {
                    pub address: ::subxt::utils::H160,
                    pub storage_keys: ::std::vec::Vec<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP1559Transaction {
                    pub chain_id: ::core::primitive::u64,
                    pub nonce: runtime_types::primitive_types::U256,
                    pub max_priority_fee_per_gas: runtime_types::primitive_types::U256,
                    pub max_fee_per_gas: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub access_list:
                        ::std::vec::Vec<runtime_types::ethereum::transaction::AccessListItem>,
                    pub odd_y_parity: ::core::primitive::bool,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP2930Transaction {
                    pub chain_id: ::core::primitive::u64,
                    pub nonce: runtime_types::primitive_types::U256,
                    pub gas_price: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub access_list:
                        ::std::vec::Vec<runtime_types::ethereum::transaction::AccessListItem>,
                    pub odd_y_parity: ::core::primitive::bool,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LegacyTransaction {
                    pub nonce: runtime_types::primitive_types::U256,
                    pub gas_price: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub signature: runtime_types::ethereum::transaction::TransactionSignature,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionAction {
                    #[codec(index = 0)]
                    Call(::subxt::utils::H160),
                    #[codec(index = 1)]
                    Create,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactionRecoveryId(pub ::core::primitive::u64);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactionSignature {
                    pub v: runtime_types::ethereum::transaction::TransactionRecoveryId,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionV2 {
                    #[codec(index = 0)]
                    Legacy(runtime_types::ethereum::transaction::LegacyTransaction),
                    #[codec(index = 1)]
                    EIP2930(runtime_types::ethereum::transaction::EIP2930Transaction),
                    #[codec(index = 2)]
                    EIP1559(runtime_types::ethereum::transaction::EIP1559Transaction),
                }
            }
        }
        pub mod ethereum_types {
            use super::runtime_types;
            pub mod hash {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct H64(pub [::core::primitive::u8; 8usize]);
            }
        }
        pub mod evm_core {
            use super::runtime_types;
            pub mod error {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitError {
                    #[codec(index = 0)]
                    StackUnderflow,
                    #[codec(index = 1)]
                    StackOverflow,
                    #[codec(index = 2)]
                    InvalidJump,
                    #[codec(index = 3)]
                    InvalidRange,
                    #[codec(index = 4)]
                    DesignatedInvalid,
                    #[codec(index = 5)]
                    CallTooDeep,
                    #[codec(index = 6)]
                    CreateCollision,
                    #[codec(index = 7)]
                    CreateContractLimit,
                    #[codec(index = 15)]
                    InvalidCode(runtime_types::evm_core::opcode::Opcode),
                    #[codec(index = 8)]
                    OutOfOffset,
                    #[codec(index = 9)]
                    OutOfGas,
                    #[codec(index = 10)]
                    OutOfFund,
                    #[codec(index = 11)]
                    PCUnderflow,
                    #[codec(index = 12)]
                    CreateEmpty,
                    #[codec(index = 13)]
                    Other(::std::string::String),
                    #[codec(index = 14)]
                    MaxNonce,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitFatal {
                    #[codec(index = 0)]
                    NotSupported,
                    #[codec(index = 1)]
                    UnhandledInterrupt,
                    #[codec(index = 2)]
                    CallErrorAsFatal(runtime_types::evm_core::error::ExitError),
                    #[codec(index = 3)]
                    Other(::std::string::String),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitReason {
                    #[codec(index = 0)]
                    Succeed(runtime_types::evm_core::error::ExitSucceed),
                    #[codec(index = 1)]
                    Error(runtime_types::evm_core::error::ExitError),
                    #[codec(index = 2)]
                    Revert(runtime_types::evm_core::error::ExitRevert),
                    #[codec(index = 3)]
                    Fatal(runtime_types::evm_core::error::ExitFatal),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitRevert {
                    #[codec(index = 0)]
                    Reverted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitSucceed {
                    #[codec(index = 0)]
                    Stopped,
                    #[codec(index = 1)]
                    Returned,
                    #[codec(index = 2)]
                    Suicided,
                }
            }
            pub mod opcode {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Opcode(pub ::core::primitive::u8);
            }
        }
        pub mod fp_rpc {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionStatus {
                pub transaction_hash: ::subxt::utils::H256,
                pub transaction_index: ::core::primitive::u32,
                pub from: ::subxt::utils::H160,
                pub to: ::core::option::Option<::subxt::utils::H160>,
                pub contract_address: ::core::option::Option<::subxt::utils::H160>,
                pub logs: ::std::vec::Vec<runtime_types::ethereum::log::Log>,
                pub logs_bloom: runtime_types::ethbloom::Bloom,
            }
        }
        pub mod fp_self_contained {
            use super::runtime_types;
            pub mod unchecked_extrinsic {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                    pub ::subxt::utils::UncheckedExtrinsic<_0, _1, _2, _3>,
                );
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 6)]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    CodeUpdated,
                    #[codec(index = 3)]
                    NewAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    KilledAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    Remarked {
                        sender: ::subxt::utils::AccountId32,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod orml_currencies {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    transfer {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    transfer_native_currency {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    update_balance {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        amount: ::core::primitive::i128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    AmountIntoBalanceFailed,
                    #[codec(index = 1)]
                    BalanceTooLow,
                    #[codec(index = 2)]
                    DepositFailed,
                }
            }
        }
        pub mod orml_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    AmountIntoBalanceFailed,
                    #[codec(index = 2)]
                    LiquidityRestrictions,
                    #[codec(index = 3)]
                    MaxLocksExceeded,
                    #[codec(index = 4)]
                    KeepAlive,
                    #[codec(index = 5)]
                    ExistentialDeposit,
                    #[codec(index = 6)]
                    DeadAccount,
                    #[codec(index = 7)]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Endowed {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    DustLost {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    Transfer {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    Reserved {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    Unreserved {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    ReserveRepatriated {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 6)]
                    BalanceSet {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    TotalIssuanceSet {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    Withdrawn {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    Slashed {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        free_amount: ::core::primitive::u128,
                        reserved_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    Deposited {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    LockSet {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    LockRemoved {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 13)]
                    Locked {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    Unlocked {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub frozen: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod orml_unknown_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    BalanceOverflow,
                    #[codec(index = 2)]
                    UnhandledAsset,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Deposited {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        who: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 1)]
                    Withdrawn {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        who: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                }
            }
        }
        pub mod orml_xtokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    transfer {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 1)]
                    transfer_multiasset {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 2)]
                    transfer_with_fee {
                        currency_id: runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                        amount: ::core::primitive::u128,
                        fee: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 3)]
                    transfer_multiasset_with_fee {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 4)]
                    transfer_multicurrencies {
                        currencies: ::std::vec::Vec<(
                            runtime_types::peaq_primitives_xcm::currency::CurrencyId,
                            ::core::primitive::u128,
                        )>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 5)]
                    transfer_multiassets {
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    AssetHasNoReserve,
                    #[codec(index = 1)]
                    NotCrossChainTransfer,
                    #[codec(index = 2)]
                    InvalidDest,
                    #[codec(index = 3)]
                    NotCrossChainTransferableCurrency,
                    #[codec(index = 4)]
                    UnweighableMessage,
                    #[codec(index = 5)]
                    XcmExecutionFailed,
                    #[codec(index = 6)]
                    CannotReanchor,
                    #[codec(index = 7)]
                    InvalidAncestry,
                    #[codec(index = 8)]
                    InvalidAsset,
                    #[codec(index = 9)]
                    DestinationNotInvertible,
                    #[codec(index = 10)]
                    BadVersion,
                    #[codec(index = 11)]
                    DistinctReserveForAssetAndFee,
                    #[codec(index = 12)]
                    ZeroFee,
                    #[codec(index = 13)]
                    ZeroAmount,
                    #[codec(index = 14)]
                    TooManyAssetsBeingSent,
                    #[codec(index = 15)]
                    AssetIndexNonExistent,
                    #[codec(index = 16)]
                    FeeNotEnough,
                    #[codec(index = 17)]
                    NotSupportedMultiLocation,
                    #[codec(index = 18)]
                    MinXcmFeeNotDefined,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    TransferredMultiAssets {
                        sender: ::subxt::utils::AccountId32,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        fee: runtime_types::xcm::v3::multiasset::MultiAsset,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    transfer_allow_death {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    set_balance_deprecated {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        old_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    force_transfer {
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    transfer_keep_alive {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    transfer_all {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    force_unreserve {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    upgrade_accounts {
                        who: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 7)]
                    transfer {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    force_set_balance {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    VestingBalance,
                    #[codec(index = 1)]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    Expendability,
                    #[codec(index = 5)]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    DeadAccount,
                    #[codec(index = 7)]
                    TooManyReserves,
                    #[codec(index = 8)]
                    TooManyHolds,
                    #[codec(index = 9)]
                    TooManyFreezes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Endowed {
                        account: ::subxt::utils::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    DustLost {
                        account: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    BalanceSet {
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    Reserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    Unreserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    ReserveRepatriated {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    Deposit {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    Withdraw {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    Slashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    Minted {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    Burned {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    Suspended {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    Restored {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    Upgraded { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 15)]
                    Issued { amount: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    Rescinded { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    Locked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    Unlocked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    Frozen {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    Thawed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountData<_0> {
                    pub free: _0,
                    pub reserved: _0,
                    pub frozen: _0,
                    pub flags: runtime_types::pallet_balances::types::ExtraFlags,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BalanceLock<_0> {
                    pub id: [::core::primitive::u8; 8usize],
                    pub amount: _0,
                    pub reasons: runtime_types::pallet_balances::types::Reasons,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExtraFlags(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdAmount<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Reasons {
                    #[codec(index = 0)]
                    Fee,
                    #[codec(index = 1)]
                    Misc,
                    #[codec(index = 2)]
                    All,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveData<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
            }
        }
        pub mod pallet_base_fee {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_base_fee_per_gas {
                        fee: runtime_types::primitive_types::U256,
                    },
                    #[codec(index = 1)]
                    set_elasticity {
                        elasticity: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    NewBaseFeePerGas {
                        fee: runtime_types::primitive_types::U256,
                    },
                    #[codec(index = 1)]
                    BaseFeeOverflow,
                    #[codec(index = 2)]
                    NewElasticity {
                        elasticity: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                }
            }
        }
        pub mod pallet_block_reward {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_configuration {
                        reward_distro_params:
                            runtime_types::pallet_block_reward::types::RewardDistributionConfig,
                    },
                    #[codec(index = 1)]
                    set_block_issue_reward {
                        block_reward: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    set_max_currency_supply { limit: ::core::primitive::u128 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidDistributionConfiguration,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    DistributionConfigurationChanged(
                        runtime_types::pallet_block_reward::types::RewardDistributionConfig,
                    ),
                    #[codec(index = 1)]
                    BlockIssueRewardChanged(::core::primitive::u128),
                    #[codec(index = 2)]
                    MaxCurrencySupplyChanged(::core::primitive::u128),
                    #[codec(index = 3)]
                    BlockRewardsDistributed(::core::primitive::u128),
                    #[codec(index = 4)]
                    TransactionFeesDistributed(::core::primitive::u128),
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RewardDistributionConfig {
                    #[codec(compact)]
                    pub treasury_percent: runtime_types::sp_arithmetic::per_things::Perbill,
                    #[codec(compact)]
                    pub dapps_percent: runtime_types::sp_arithmetic::per_things::Perbill,
                    #[codec(compact)]
                    pub collators_percent: runtime_types::sp_arithmetic::per_things::Perbill,
                    #[codec(compact)]
                    pub lp_percent: runtime_types::sp_arithmetic::per_things::Perbill,
                    #[codec(compact)]
                    pub machines_percent: runtime_types::sp_arithmetic::per_things::Perbill,
                    #[codec(compact)]
                    pub parachain_lease_fund_percent:
                        runtime_types::sp_arithmetic::per_things::Perbill,
                }
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    NotMember,
                    #[codec(index = 1)]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    ProposalMissing,
                    #[codec(index = 3)]
                    WrongIndex,
                    #[codec(index = 4)]
                    DuplicateVote,
                    #[codec(index = 5)]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    TooEarly,
                    #[codec(index = 7)]
                    TooManyProposals,
                    #[codec(index = 8)]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_contracts {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    call_old_weight {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    instantiate_with_code_old_weight {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    instantiate_old_weight {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code_hash: ::subxt::utils::H256,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    upload_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        determinism: runtime_types::pallet_contracts::wasm::Determinism,
                    },
                    #[codec(index = 4)]
                    remove_code { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    set_code {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        code_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    call {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 7)]
                    instantiate_with_code {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 8)]
                    instantiate {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code_hash: ::subxt::utils::H256,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidScheduleVersion,
                    #[codec(index = 1)]
                    InvalidCallFlags,
                    #[codec(index = 2)]
                    OutOfGas,
                    #[codec(index = 3)]
                    OutputBufferTooSmall,
                    #[codec(index = 4)]
                    TransferFailed,
                    #[codec(index = 5)]
                    MaxCallDepthReached,
                    #[codec(index = 6)]
                    ContractNotFound,
                    #[codec(index = 7)]
                    CodeTooLarge,
                    #[codec(index = 8)]
                    CodeNotFound,
                    #[codec(index = 9)]
                    OutOfBounds,
                    #[codec(index = 10)]
                    DecodingFailed,
                    #[codec(index = 11)]
                    ContractTrapped,
                    #[codec(index = 12)]
                    ValueTooLarge,
                    #[codec(index = 13)]
                    TerminatedWhileReentrant,
                    #[codec(index = 14)]
                    InputForwarded,
                    #[codec(index = 15)]
                    RandomSubjectTooLong,
                    #[codec(index = 16)]
                    TooManyTopics,
                    #[codec(index = 17)]
                    NoChainExtension,
                    #[codec(index = 18)]
                    DuplicateContract,
                    #[codec(index = 19)]
                    TerminatedInConstructor,
                    #[codec(index = 20)]
                    ReentranceDenied,
                    #[codec(index = 21)]
                    StorageDepositNotEnoughFunds,
                    #[codec(index = 22)]
                    StorageDepositLimitExhausted,
                    #[codec(index = 23)]
                    CodeInUse,
                    #[codec(index = 24)]
                    ContractReverted,
                    #[codec(index = 25)]
                    CodeRejected,
                    #[codec(index = 26)]
                    Indeterministic,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Instantiated {
                        deployer: ::subxt::utils::AccountId32,
                        contract: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    Terminated {
                        contract: ::subxt::utils::AccountId32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    CodeStored { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    ContractEmitted {
                        contract: ::subxt::utils::AccountId32,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    CodeRemoved { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    ContractCodeUpdated {
                        contract: ::subxt::utils::AccountId32,
                        new_code_hash: ::subxt::utils::H256,
                        old_code_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    Called {
                        caller: runtime_types::pallet_contracts::Origin<
                            runtime_types::peaq_dev_runtime::Runtime,
                        >,
                        contract: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 7)]
                    DelegateCalled {
                        contract: ::subxt::utils::AccountId32,
                        code_hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod schedule {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HostFnWeights {
                    pub caller: runtime_types::sp_weights::weight_v2::Weight,
                    pub is_contract: runtime_types::sp_weights::weight_v2::Weight,
                    pub code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub own_code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub caller_is_origin: runtime_types::sp_weights::weight_v2::Weight,
                    pub caller_is_root: runtime_types::sp_weights::weight_v2::Weight,
                    pub address: runtime_types::sp_weights::weight_v2::Weight,
                    pub gas_left: runtime_types::sp_weights::weight_v2::Weight,
                    pub balance: runtime_types::sp_weights::weight_v2::Weight,
                    pub value_transferred: runtime_types::sp_weights::weight_v2::Weight,
                    pub minimum_balance: runtime_types::sp_weights::weight_v2::Weight,
                    pub block_number: runtime_types::sp_weights::weight_v2::Weight,
                    pub now: runtime_types::sp_weights::weight_v2::Weight,
                    pub weight_to_fee: runtime_types::sp_weights::weight_v2::Weight,
                    pub gas: runtime_types::sp_weights::weight_v2::Weight,
                    pub input: runtime_types::sp_weights::weight_v2::Weight,
                    pub input_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub r#return: runtime_types::sp_weights::weight_v2::Weight,
                    pub return_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub terminate: runtime_types::sp_weights::weight_v2::Weight,
                    pub random: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event_per_topic: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub debug_message: runtime_types::sp_weights::weight_v2::Weight,
                    pub debug_message_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage_per_new_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage_per_old_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub clear_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub clear_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub contains_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub contains_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub get_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub get_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub take_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub take_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub transfer: runtime_types::sp_weights::weight_v2::Weight,
                    pub call: runtime_types::sp_weights::weight_v2::Weight,
                    pub delegate_call: runtime_types::sp_weights::weight_v2::Weight,
                    pub call_transfer_surcharge: runtime_types::sp_weights::weight_v2::Weight,
                    pub call_per_cloned_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_transfer_surcharge:
                        runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_per_input_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_per_salt_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_sha2_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_sha2_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_keccak_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_keccak_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_128: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_128_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub ecdsa_recover: runtime_types::sp_weights::weight_v2::Weight,
                    pub ecdsa_to_eth_address: runtime_types::sp_weights::weight_v2::Weight,
                    pub sr25519_verify: runtime_types::sp_weights::weight_v2::Weight,
                    pub sr25519_verify_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub reentrance_count: runtime_types::sp_weights::weight_v2::Weight,
                    pub account_reentrance_count: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiation_nonce: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstructionWeights {
                    pub version: ::core::primitive::u32,
                    pub fallback: ::core::primitive::u32,
                    pub i64const: ::core::primitive::u32,
                    pub i64load: ::core::primitive::u32,
                    pub i64store: ::core::primitive::u32,
                    pub select: ::core::primitive::u32,
                    pub r#if: ::core::primitive::u32,
                    pub br: ::core::primitive::u32,
                    pub br_if: ::core::primitive::u32,
                    pub br_table: ::core::primitive::u32,
                    pub br_table_per_entry: ::core::primitive::u32,
                    pub call: ::core::primitive::u32,
                    pub call_indirect: ::core::primitive::u32,
                    pub call_per_local: ::core::primitive::u32,
                    pub local_get: ::core::primitive::u32,
                    pub local_set: ::core::primitive::u32,
                    pub local_tee: ::core::primitive::u32,
                    pub global_get: ::core::primitive::u32,
                    pub global_set: ::core::primitive::u32,
                    pub memory_current: ::core::primitive::u32,
                    pub memory_grow: ::core::primitive::u32,
                    pub i64clz: ::core::primitive::u32,
                    pub i64ctz: ::core::primitive::u32,
                    pub i64popcnt: ::core::primitive::u32,
                    pub i64eqz: ::core::primitive::u32,
                    pub i64extendsi32: ::core::primitive::u32,
                    pub i64extendui32: ::core::primitive::u32,
                    pub i32wrapi64: ::core::primitive::u32,
                    pub i64eq: ::core::primitive::u32,
                    pub i64ne: ::core::primitive::u32,
                    pub i64lts: ::core::primitive::u32,
                    pub i64ltu: ::core::primitive::u32,
                    pub i64gts: ::core::primitive::u32,
                    pub i64gtu: ::core::primitive::u32,
                    pub i64les: ::core::primitive::u32,
                    pub i64leu: ::core::primitive::u32,
                    pub i64ges: ::core::primitive::u32,
                    pub i64geu: ::core::primitive::u32,
                    pub i64add: ::core::primitive::u32,
                    pub i64sub: ::core::primitive::u32,
                    pub i64mul: ::core::primitive::u32,
                    pub i64divs: ::core::primitive::u32,
                    pub i64divu: ::core::primitive::u32,
                    pub i64rems: ::core::primitive::u32,
                    pub i64remu: ::core::primitive::u32,
                    pub i64and: ::core::primitive::u32,
                    pub i64or: ::core::primitive::u32,
                    pub i64xor: ::core::primitive::u32,
                    pub i64shl: ::core::primitive::u32,
                    pub i64shrs: ::core::primitive::u32,
                    pub i64shru: ::core::primitive::u32,
                    pub i64rotl: ::core::primitive::u32,
                    pub i64rotr: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Limits {
                    pub event_topics: ::core::primitive::u32,
                    pub globals: ::core::primitive::u32,
                    pub locals: ::core::primitive::u32,
                    pub parameters: ::core::primitive::u32,
                    pub memory_pages: ::core::primitive::u32,
                    pub table_size: ::core::primitive::u32,
                    pub br_table_size: ::core::primitive::u32,
                    pub subject_len: ::core::primitive::u32,
                    pub payload_len: ::core::primitive::u32,
                    pub runtime_memory: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Schedule {
                    pub limits: runtime_types::pallet_contracts::schedule::Limits,
                    pub instruction_weights:
                        runtime_types::pallet_contracts::schedule::InstructionWeights,
                    pub host_fn_weights: runtime_types::pallet_contracts::schedule::HostFnWeights,
                }
            }
            pub mod storage {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ContractInfo {
                    pub trie_id: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub deposit_account: runtime_types::pallet_contracts::storage::DepositAccount,
                    pub code_hash: ::subxt::utils::H256,
                    pub storage_bytes: ::core::primitive::u32,
                    pub storage_items: ::core::primitive::u32,
                    pub storage_byte_deposit: ::core::primitive::u128,
                    pub storage_item_deposit: ::core::primitive::u128,
                    pub storage_base_deposit: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DeletionQueueManager {
                    pub insert_counter: ::core::primitive::u32,
                    pub delete_counter: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DepositAccount(pub ::subxt::utils::AccountId32);
            }
            pub mod wasm {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Determinism {
                    #[codec(index = 0)]
                    Enforced,
                    #[codec(index = 1)]
                    Relaxed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OwnerInfo {
                    pub owner: ::subxt::utils::AccountId32,
                    #[codec(compact)]
                    pub deposit: ::core::primitive::u128,
                    #[codec(compact)]
                    pub refcount: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PrefabWasmModule {
                    #[codec(compact)]
                    pub instruction_weights_version: ::core::primitive::u32,
                    #[codec(compact)]
                    pub initial: ::core::primitive::u32,
                    #[codec(compact)]
                    pub maximum: ::core::primitive::u32,
                    pub code: runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub determinism: runtime_types::pallet_contracts::wasm::Determinism,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Origin<_0> {
                #[codec(index = 0)]
                Root,
                #[codec(index = 1)]
                Signed(::subxt::utils::AccountId32),
                __Ignore(::core::marker::PhantomData<_0>),
            }
        }
        pub mod pallet_dynamic_fee {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    note_min_gas_price_target {
                        target: runtime_types::primitive_types::U256,
                    },
                }
            }
        }
        pub mod pallet_ethereum {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    transact {
                        transaction: runtime_types::ethereum::transaction::TransactionV2,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidSignature,
                    #[codec(index = 1)]
                    PreLogExists,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Executed {
                        from: ::subxt::utils::H160,
                        to: ::subxt::utils::H160,
                        transaction_hash: ::subxt::utils::H256,
                        exit_reason: runtime_types::evm_core::error::ExitReason,
                        extra_data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin {
                #[codec(index = 0)]
                EthereumTransaction(::subxt::utils::H160),
            }
        }
        pub mod pallet_evm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    withdraw {
                        address: ::subxt::utils::H160,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    call {
                        source: ::subxt::utils::H160,
                        target: ::subxt::utils::H160,
                        input: ::std::vec::Vec<::core::primitive::u8>,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                    #[codec(index = 2)]
                    create {
                        source: ::subxt::utils::H160,
                        init: ::std::vec::Vec<::core::primitive::u8>,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                    #[codec(index = 3)]
                    create2 {
                        source: ::subxt::utils::H160,
                        init: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::subxt::utils::H256,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    BalanceLow,
                    #[codec(index = 1)]
                    FeeOverflow,
                    #[codec(index = 2)]
                    PaymentOverflow,
                    #[codec(index = 3)]
                    WithdrawFailed,
                    #[codec(index = 4)]
                    GasPriceTooLow,
                    #[codec(index = 5)]
                    InvalidNonce,
                    #[codec(index = 6)]
                    GasLimitTooLow,
                    #[codec(index = 7)]
                    GasLimitTooHigh,
                    #[codec(index = 8)]
                    Undefined,
                    #[codec(index = 9)]
                    Reentrancy,
                    #[codec(index = 10)]
                    TransactionMustComeFromEOA,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Log {
                        log: runtime_types::ethereum::log::Log,
                    },
                    #[codec(index = 1)]
                    Created { address: ::subxt::utils::H160 },
                    #[codec(index = 2)]
                    CreatedFailed { address: ::subxt::utils::H160 },
                    #[codec(index = 3)]
                    Executed { address: ::subxt::utils::H160 },
                    #[codec(index = 4)]
                    ExecutedFailed { address: ::subxt::utils::H160 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeMetadata {
                pub size: ::core::primitive::u64,
                pub hash: ::subxt::utils::H256,
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    TooManySignatories,
                    #[codec(index = 5)]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    NotFound,
                    #[codec(index = 8)]
                    NotOwner,
                    #[codec(index = 9)]
                    NoTimepoint,
                    #[codec(index = 10)]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    NewMultisig {
                        approving: ::subxt::utils::AccountId32,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    MultisigApproval {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    MultisigExecuted {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    MultisigCancelled {
                        cancelling: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_keys {
                        keys: runtime_types::peaq_dev_runtime::opaque::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidProof,
                    #[codec(index = 1)]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    NoKeys,
                    #[codec(index = 4)]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    set_key {
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    sudo_as {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    KeyChanged {
                        old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 2)]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    TransactionFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    InvalidIndex,
                    #[codec(index = 2)]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    ProposalNotApproved,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    dispatch_as {
                        as_origin: ::std::boxed::Box<runtime_types::peaq_dev_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 4)]
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::peaq_dev_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    with_weight {
                        call: ::std::boxed::Box<runtime_types::peaq_dev_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    BatchCompleted,
                    #[codec(index = 2)]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    ItemCompleted,
                    #[codec(index = 4)]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vesting {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    vest,
                    #[codec(index = 1)]
                    vest_other {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    vested_transfer {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    force_vested_transfer {
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    merge_schedules {
                        schedule1_index: ::core::primitive::u32,
                        schedule2_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    NotVesting,
                    #[codec(index = 1)]
                    AtMaxVestingSchedules,
                    #[codec(index = 2)]
                    AmountLow,
                    #[codec(index = 3)]
                    ScheduleIndexOutOfBounds,
                    #[codec(index = 4)]
                    InvalidScheduleParams,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    VestingUpdated {
                        account: ::subxt::utils::AccountId32,
                        unvested: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    VestingCompleted {
                        account: ::subxt::utils::AccountId32,
                    },
                }
            }
            pub mod vesting_info {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestingInfo<_0, _1> {
                    pub locked: _0,
                    pub per_block: _0,
                    pub starting_block: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    send {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                    },
                    #[codec(index = 1)]
                    teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    execute {
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm2>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    force_xcm_version {
                        location:
                            ::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
                        xcm_version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    force_subscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 7)]
                    force_unsubscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 8)]
                    limited_reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 9)]
                    limited_teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 10)]
                    force_suspension { suspended: ::core::primitive::bool },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    Unreachable,
                    #[codec(index = 1)]
                    SendFailure,
                    #[codec(index = 2)]
                    Filtered,
                    #[codec(index = 3)]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    Empty,
                    #[codec(index = 6)]
                    CannotReanchor,
                    #[codec(index = 7)]
                    TooManyAssets,
                    #[codec(index = 8)]
                    InvalidOrigin,
                    #[codec(index = 9)]
                    BadVersion,
                    #[codec(index = 10)]
                    BadLocation,
                    #[codec(index = 11)]
                    NoSubscription,
                    #[codec(index = 12)]
                    AlreadySubscribed,
                    #[codec(index = 13)]
                    InvalidAsset,
                    #[codec(index = 14)]
                    LowBalance,
                    #[codec(index = 15)]
                    TooManyLocks,
                    #[codec(index = 16)]
                    AccountNotSovereign,
                    #[codec(index = 17)]
                    FeesNotMet,
                    #[codec(index = 18)]
                    LockNotFound,
                    #[codec(index = 19)]
                    InUse,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Attempted(runtime_types::xcm::v3::traits::Outcome),
                    #[codec(index = 1)]
                    Sent(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::Xcm,
                    ),
                    #[codec(index = 2)]
                    UnexpectedResponse(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 3)]
                    ResponseReady(::core::primitive::u64, runtime_types::xcm::v3::Response),
                    #[codec(index = 4)]
                    Notified(::core::primitive::u64, ::core::primitive::u8, ::core::primitive::u8),
                    #[codec(index = 5)]
                    NotifyOverweight(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                        runtime_types::sp_weights::weight_v2::Weight,
                        runtime_types::sp_weights::weight_v2::Weight,
                    ),
                    #[codec(index = 6)]
                    NotifyDispatchError(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 7)]
                    NotifyDecodeFailed(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 8)]
                    InvalidResponder(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 9)]
                    InvalidResponderVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 10)]
                    ResponseTaken(::core::primitive::u64),
                    #[codec(index = 11)]
                    AssetsTrapped(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                    #[codec(index = 12)]
                    VersionChangeNotified(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 13)]
                    SupportedVersionChanged(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 14)]
                    NotifyTargetSendFail(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::traits::Error,
                    ),
                    #[codec(index = 15)]
                    NotifyTargetMigrationFail(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 16)]
                    InvalidQuerierVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 17)]
                    InvalidQuerier(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 18)]
                    VersionNotifyStarted(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 19)]
                    VersionNotifyRequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 20)]
                    VersionNotifyUnrequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 21)]
                    FeesPaid(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 22)]
                    AssetsClaimed(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 1)]
                    Response(runtime_types::xcm::v3::multilocation::MultiLocation),
                }
            }
        }
        pub mod parachain_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    force_new_round,
                    #[codec(index = 2)]
                    set_max_selected_candidates { new: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    set_blocks_per_round { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    set_max_candidate_stake { new: ::core::primitive::u128 },
                    #[codec(index = 5)]
                    force_remove_candidate {
                        collator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    join_candidates { stake: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    init_leave_candidates,
                    #[codec(index = 8)]
                    execute_leave_candidates {
                        collator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 9)]
                    cancel_leave_candidates,
                    #[codec(index = 10)]
                    candidate_stake_more { more: ::core::primitive::u128 },
                    #[codec(index = 11)]
                    candidate_stake_less { less: ::core::primitive::u128 },
                    #[codec(index = 12)]
                    join_delegators {
                        collator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    delegate_another_candidate {
                        collator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    leave_delegators,
                    #[codec(index = 15)]
                    revoke_delegation {
                        collator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 16)]
                    delegator_stake_more {
                        candidate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        more: ::core::primitive::u128,
                    },
                    #[codec(index = 17)]
                    delegator_stake_less {
                        candidate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        less: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    unlock_unstaked {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    DelegatorNotFound,
                    #[codec(index = 1)]
                    CandidateNotFound,
                    #[codec(index = 2)]
                    DelegatorExists,
                    #[codec(index = 3)]
                    CandidateExists,
                    #[codec(index = 4)]
                    ValStakeZero,
                    #[codec(index = 5)]
                    ValStakeBelowMin,
                    #[codec(index = 6)]
                    ValStakeAboveMax,
                    #[codec(index = 7)]
                    NomStakeBelowMin,
                    #[codec(index = 8)]
                    DelegationBelowMin,
                    #[codec(index = 9)]
                    AlreadyLeaving,
                    #[codec(index = 10)]
                    NotLeaving,
                    #[codec(index = 11)]
                    CannotLeaveYet,
                    #[codec(index = 12)]
                    CannotJoinBeforeUnlocking,
                    #[codec(index = 13)]
                    AlreadyDelegating,
                    #[codec(index = 14)]
                    NotYetDelegating,
                    #[codec(index = 15)]
                    DelegationsPerRoundExceeded,
                    #[codec(index = 16)]
                    TooManyDelegators,
                    #[codec(index = 17)]
                    TooFewCollatorCandidates,
                    #[codec(index = 18)]
                    CannotStakeIfLeaving,
                    #[codec(index = 19)]
                    CannotDelegateIfLeaving,
                    #[codec(index = 20)]
                    MaxCollatorsPerDelegatorExceeded,
                    #[codec(index = 21)]
                    AlreadyDelegatedCollator,
                    #[codec(index = 22)]
                    DelegationNotFound,
                    #[codec(index = 23)]
                    Underflow,
                    #[codec(index = 24)]
                    CannotSetAboveMax,
                    #[codec(index = 25)]
                    CannotSetBelowMin,
                    #[codec(index = 26)]
                    InvalidSchedule,
                    #[codec(index = 27)]
                    NoMoreUnstaking,
                    #[codec(index = 28)]
                    StakeNotFound,
                    #[codec(index = 29)]
                    UnstakingIsEmpty,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    NewRound(::core::primitive::u32, ::core::primitive::u32),
                    #[codec(index = 1)]
                    EnteredTopCandidates(::subxt::utils::AccountId32),
                    #[codec(index = 2)]
                    LeftTopCandidates(::subxt::utils::AccountId32),
                    #[codec(index = 3)]
                    JoinedCollatorCandidates(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 4)]
                    CollatorStakedMore(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    CollatorStakedLess(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    CollatorScheduledExit(
                        ::core::primitive::u32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 7)]
                    CollatorCanceledExit(::subxt::utils::AccountId32),
                    #[codec(index = 8)]
                    CandidateLeft(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 9)]
                    CollatorRemoved(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 10)]
                    MaxCandidateStakeChanged(::core::primitive::u128),
                    #[codec(index = 11)]
                    DelegatorStakedMore(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 12)]
                    DelegatorStakedLess(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 13)]
                    DelegatorLeft(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 14)]
                    Delegation(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 15)]
                    DelegationReplaced(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 16)]
                    DelegatorLeftCollator(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 17)]
                    Rewarded(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 18)]
                    MaxSelectedCandidatesSet(::core::primitive::u32, ::core::primitive::u32),
                    #[codec(index = 19)]
                    BlocksPerRoundSet(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    ),
                }
            }
            pub mod set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OrderedSet<_0>(
                    pub runtime_types::bounded_collections::bounded_vec::BoundedVec<_0>,
                );
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Candidate<_0, _1> {
                    pub id: _0,
                    pub stake: _1,
                    pub delegators: runtime_types::parachain_staking::set::OrderedSet<
                        runtime_types::parachain_staking::types::Stake<_0, _1>,
                    >,
                    pub total: _1,
                    pub status: runtime_types::parachain_staking::types::CandidateStatus,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CandidateStatus {
                    #[codec(index = 0)]
                    Active,
                    #[codec(index = 1)]
                    Leaving(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegationCounter {
                    pub round: ::core::primitive::u32,
                    pub counter: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegator<_0, _1> {
                    pub delegations: runtime_types::parachain_staking::set::OrderedSet<
                        runtime_types::parachain_staking::types::Stake<_0, _1>,
                    >,
                    pub total: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RoundInfo<_0> {
                    pub current: ::core::primitive::u32,
                    pub first: _0,
                    pub length: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Stake<_0, _1> {
                    pub owner: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TotalStake<_0> {
                    pub collators: _0,
                    pub delegators: _0,
                }
            }
        }
        pub mod peaq_dev_runtime {
            use super::runtime_types;
            pub mod opaque {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SessionKeys {
                    pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 10)]
                Council(runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::RawOrigin),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
                #[codec(index = 5)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 6)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 7)]
                Contracts(runtime_types::pallet_contracts::pallet::Call),
                #[codec(index = 8)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 9)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 10)]
                Council(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Call),
                #[codec(index = 12)]
                EVM(runtime_types::pallet_evm::pallet::Call),
                #[codec(index = 13)]
                DynamicFee(runtime_types::pallet_dynamic_fee::pallet::Call),
                #[codec(index = 14)]
                BaseFee(runtime_types::pallet_base_fee::pallet::Call),
                #[codec(index = 21)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 23)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Call),
                #[codec(index = 24)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
                #[codec(index = 26)]
                BlockReward(runtime_types::pallet_block_reward::pallet::Call),
                #[codec(index = 27)]
                StakingCoefficientRewardCalculator(
                    runtime_types::staking_coefficient_reward::pallet::Call,
                ),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 33)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
                #[codec(index = 34)]
                Currencies(runtime_types::orml_currencies::module::Call),
                #[codec(index = 36)]
                XTokens(runtime_types::orml_xtokens::module::Call),
                #[codec(index = 38)]
                ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Call),
                #[codec(index = 50)]
                Vesting(runtime_types::pallet_vesting::pallet::Call),
                #[codec(index = 100)]
                PeaqDid(runtime_types::peaq_pallet_did::pallet::Call),
                #[codec(index = 101)]
                Transaction(runtime_types::peaq_pallet_transaction::pallet::Call),
                #[codec(index = 102)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 103)]
                PeaqRbac(runtime_types::peaq_pallet_rbac::pallet::Call),
                #[codec(index = 104)]
                PeaqStorage(runtime_types::peaq_pallet_storage::pallet::Call),
                #[codec(index = 105)]
                PeaqMor(runtime_types::peaq_pallet_mor::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 6)]
                Sudo(runtime_types::pallet_sudo::pallet::Error),
                #[codec(index = 7)]
                Contracts(runtime_types::pallet_contracts::pallet::Error),
                #[codec(index = 8)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 9)]
                Treasury(runtime_types::pallet_treasury::pallet::Error),
                #[codec(index = 10)]
                Council(runtime_types::pallet_collective::pallet::Error),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Error),
                #[codec(index = 12)]
                EVM(runtime_types::pallet_evm::pallet::Error),
                #[codec(index = 21)]
                Session(runtime_types::pallet_session::pallet::Error),
                #[codec(index = 23)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Error),
                #[codec(index = 24)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
                #[codec(index = 26)]
                BlockReward(runtime_types::pallet_block_reward::pallet::Error),
                #[codec(index = 27)]
                StakingCoefficientRewardCalculator(
                    runtime_types::staking_coefficient_reward::pallet::Error,
                ),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Error),
                #[codec(index = 33)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Error),
                #[codec(index = 34)]
                Currencies(runtime_types::orml_currencies::module::Error),
                #[codec(index = 35)]
                Tokens(runtime_types::orml_tokens::module::Error),
                #[codec(index = 36)]
                XTokens(runtime_types::orml_xtokens::module::Error),
                #[codec(index = 37)]
                UnknownTokens(runtime_types::orml_unknown_tokens::module::Error),
                #[codec(index = 38)]
                ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Error),
                #[codec(index = 50)]
                Vesting(runtime_types::pallet_vesting::pallet::Error),
                #[codec(index = 100)]
                PeaqDid(runtime_types::peaq_pallet_did::pallet::Error),
                #[codec(index = 101)]
                Transaction(runtime_types::peaq_pallet_transaction::pallet::Error),
                #[codec(index = 102)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
                #[codec(index = 103)]
                PeaqRbac(runtime_types::peaq_pallet_rbac::pallet::Error),
                #[codec(index = 104)]
                PeaqStorage(runtime_types::peaq_pallet_storage::pallet::Error),
                #[codec(index = 105)]
                PeaqMor(runtime_types::peaq_pallet_mor::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 5)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 6)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 7)]
                Contracts(runtime_types::pallet_contracts::pallet::Event),
                #[codec(index = 8)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 9)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 10)]
                Council(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Event),
                #[codec(index = 12)]
                EVM(runtime_types::pallet_evm::pallet::Event),
                #[codec(index = 14)]
                BaseFee(runtime_types::pallet_base_fee::pallet::Event),
                #[codec(index = 21)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 23)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Event),
                #[codec(index = 24)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
                #[codec(index = 26)]
                BlockReward(runtime_types::pallet_block_reward::pallet::Event),
                #[codec(index = 27)]
                StakingCoefficientRewardCalculator(
                    runtime_types::staking_coefficient_reward::pallet::Event,
                ),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
                #[codec(index = 33)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
                #[codec(index = 35)]
                Tokens(runtime_types::orml_tokens::module::Event),
                #[codec(index = 36)]
                XTokens(runtime_types::orml_xtokens::module::Event),
                #[codec(index = 37)]
                UnknownTokens(runtime_types::orml_unknown_tokens::module::Event),
                #[codec(index = 38)]
                ZenlinkProtocol(runtime_types::zenlink_protocol::pallet::Event),
                #[codec(index = 50)]
                Vesting(runtime_types::pallet_vesting::pallet::Event),
                #[codec(index = 100)]
                PeaqDid(runtime_types::peaq_pallet_did::pallet::Event),
                #[codec(index = 101)]
                Transaction(runtime_types::peaq_pallet_transaction::pallet::Event),
                #[codec(index = 102)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 103)]
                PeaqRbac(runtime_types::peaq_pallet_rbac::pallet::Event),
                #[codec(index = 104)]
                PeaqStorage(runtime_types::peaq_pallet_storage::pallet::Event),
                #[codec(index = 105)]
                PeaqMor(runtime_types::peaq_pallet_mor::pallet::Event),
            }
        }
        pub mod peaq_pallet_did {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    add_attribute {
                        did_account: ::subxt::utils::AccountId32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        value: ::std::vec::Vec<::core::primitive::u8>,
                        valid_for: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 1)]
                    update_attribute {
                        did_account: ::subxt::utils::AccountId32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        value: ::std::vec::Vec<::core::primitive::u8>,
                        valid_for: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 2)]
                    read_attribute {
                        did_account: ::subxt::utils::AccountId32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    remove_attribute {
                        did_account: ::subxt::utils::AccountId32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    AttributeNameExceedMax64,
                    #[codec(index = 1)]
                    AttributeAlreadyExist,
                    #[codec(index = 2)]
                    AttributeCreationFailed,
                    #[codec(index = 3)]
                    AttributeUpdateFailed,
                    #[codec(index = 4)]
                    AttributeNotFound,
                    #[codec(index = 5)]
                    AttributeAuthorizationFailed,
                    #[codec(index = 6)]
                    MaxBlockNumberExceeded,
                    #[codec(index = 7)]
                    InvalidSuppliedValue,
                    #[codec(index = 8)]
                    ParseError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    AttributeAdded(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::core::option::Option<::core::primitive::u32>,
                    ),
                    #[codec(index = 1)]
                    AttributeRead(
                        runtime_types::peaq_pallet_did::structs::Attribute<
                            ::core::primitive::u32,
                            ::core::primitive::u64,
                        >,
                    ),
                    #[codec(index = 2)]
                    AttributeUpdated(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::core::option::Option<::core::primitive::u32>,
                    ),
                    #[codec(index = 3)]
                    AttributeRemoved(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                }
            }
            pub mod structs {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Attribute<_0, _1> {
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub value: ::std::vec::Vec<::core::primitive::u8>,
                    pub validity: _0,
                    pub created: _1,
                }
            }
        }
        pub mod peaq_pallet_mor {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    get_registration_reward {
                        machine: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    get_online_rewards {
                        machine: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    pay_machine_usage {
                        machine: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    set_configuration {
                        config: runtime_types::peaq_pallet_mor::types::MorConfig<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 4)]
                    fetch_pot_balance,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    DidAuthorizationFailed,
                    #[codec(index = 1)]
                    InsufficientTokensInPot,
                    #[codec(index = 2)]
                    MachineAlreadyRegistered,
                    #[codec(index = 3)]
                    MachineNotRegistered,
                    #[codec(index = 4)]
                    MachinePaymentOutOfRange,
                    #[codec(index = 5)]
                    MorAuthorizationFailed,
                    #[codec(index = 6)]
                    MorConfigIsNotConsistent,
                    #[codec(index = 7)]
                    TokensCouldNotBeTransfered,
                    #[codec(index = 8)]
                    UnexpectedDidError,
                    #[codec(index = 9)]
                    UnknownError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    MintedTokens(::core::primitive::u128),
                    #[codec(index = 1)]
                    MorConfigChanged(
                        runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>,
                    ),
                    #[codec(index = 2)]
                    FetchedMorConfig(
                        runtime_types::peaq_pallet_mor::types::MorConfig<::core::primitive::u128>,
                    ),
                    #[codec(index = 3)]
                    FetchedPotBalance(::core::primitive::u128),
                    #[codec(index = 4)]
                    FetchedCurrentRewarding(::core::primitive::u128),
                    #[codec(index = 5)]
                    MachineUsagePayed(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 6)]
                    OnlineRewardsPayed(::subxt::utils::AccountId32, ::core::primitive::u128),
                    #[codec(index = 7)]
                    RegistrationRewardPayed(::subxt::utils::AccountId32, ::core::primitive::u128),
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MorConfig<_0> {
                    #[codec(compact)]
                    pub registration_reward: _0,
                    #[codec(compact)]
                    pub machine_usage_fee_min: _0,
                    #[codec(compact)]
                    pub machine_usage_fee_max: _0,
                    #[codec(compact)]
                    pub track_n_block_rewards: ::core::primitive::u8,
                }
            }
        }
        pub mod peaq_pallet_rbac {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    fetch_role {
                        owner: ::subxt::utils::AccountId32,
                        entity: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    fetch_roles { owner: ::subxt::utils::AccountId32 },
                    #[codec(index = 2)]
                    add_role {
                        role_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    update_role {
                        role_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    disable_role {
                        role_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 5)]
                    fetch_user_roles {
                        owner: ::subxt::utils::AccountId32,
                        user_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 6)]
                    assign_role_to_user {
                        role_id: [::core::primitive::u8; 32usize],
                        user_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 7)]
                    unassign_role_to_user {
                        role_id: [::core::primitive::u8; 32usize],
                        user_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 8)]
                    fetch_permission {
                        owner: ::subxt::utils::AccountId32,
                        permission_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 9)]
                    fetch_permissions { owner: ::subxt::utils::AccountId32 },
                    #[codec(index = 10)]
                    add_permission {
                        permission_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 11)]
                    update_permission {
                        permission_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 12)]
                    disable_permission {
                        permission_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 13)]
                    fetch_role_permissions {
                        owner: ::subxt::utils::AccountId32,
                        role_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 14)]
                    assign_permission_to_role {
                        permission_id: [::core::primitive::u8; 32usize],
                        role_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 15)]
                    unassign_permission_to_role {
                        permission_id: [::core::primitive::u8; 32usize],
                        role_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 16)]
                    fetch_group {
                        owner: ::subxt::utils::AccountId32,
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 17)]
                    fetch_groups { owner: ::subxt::utils::AccountId32 },
                    #[codec(index = 18)]
                    add_group {
                        group_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 19)]
                    update_group {
                        group_id: [::core::primitive::u8; 32usize],
                        name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 20)]
                    disable_group {
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 21)]
                    assign_role_to_group {
                        role_id: [::core::primitive::u8; 32usize],
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 22)]
                    unassign_role_to_group {
                        role_id: [::core::primitive::u8; 32usize],
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 23)]
                    fetch_group_roles {
                        owner: ::subxt::utils::AccountId32,
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 24)]
                    assign_user_to_group {
                        user_id: [::core::primitive::u8; 32usize],
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 25)]
                    unassign_user_to_group {
                        user_id: [::core::primitive::u8; 32usize],
                        group_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 26)]
                    fetch_user_groups {
                        owner: ::subxt::utils::AccountId32,
                        user_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 27)]
                    fetch_user_permissions {
                        owner: ::subxt::utils::AccountId32,
                        user_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 28)]
                    fetch_group_permissions {
                        owner: ::subxt::utils::AccountId32,
                        group_id: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    EntityNameExceedMax64,
                    #[codec(index = 1)]
                    EntityAlreadyExist,
                    #[codec(index = 2)]
                    EntityDoesNotExist,
                    #[codec(index = 3)]
                    EntityDisabled,
                    #[codec(index = 4)]
                    EntityAuthorizationFailed,
                    #[codec(index = 5)]
                    AssignmentAlreadyExist,
                    #[codec(index = 6)]
                    AssignmentDoesNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    RoleAdded(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 1)]
                    RoleUpdated(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 2)]
                    RoleRemoved(::subxt::utils::AccountId32, [::core::primitive::u8; 32usize]),
                    #[codec(index = 3)]
                    RoleFetched(
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    ),
                    #[codec(index = 4)]
                    AllRolesFetched(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Entity<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 5)]
                    RoleAssignedToUser(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 6)]
                    RoleUnassignedToUser(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 7)]
                    RoleAssignedToGroup(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 8)]
                    RoleUnassignedToGroup(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 9)]
                    FetchedGroupRoles(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Role2Group<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 10)]
                    FetchedUserRoles(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Role2User<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 11)]
                    FetchedUserGroups(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::User2Group<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 12)]
                    FetchedUserPermissions(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Entity<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 13)]
                    FetchedGroupPermissions(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Entity<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 14)]
                    PermissionAdded(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 15)]
                    PermissionUpdated(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 16)]
                    PermissionDisabled(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 17)]
                    PermissionAssigned(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 18)]
                    PermissionUnassignedToRole(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 19)]
                    FetchedRolePermissions(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Permission2Role<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 20)]
                    PermissionFetched(
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    ),
                    #[codec(index = 21)]
                    AllPermissionsFetched(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Entity<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 22)]
                    GroupFetched(
                        runtime_types::peaq_pallet_rbac::structs::Entity<
                            [::core::primitive::u8; 32usize],
                        >,
                    ),
                    #[codec(index = 23)]
                    AllGroupsFetched(
                        ::std::vec::Vec<
                            runtime_types::peaq_pallet_rbac::structs::Entity<
                                [::core::primitive::u8; 32usize],
                            >,
                        >,
                    ),
                    #[codec(index = 24)]
                    GroupAdded(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 25)]
                    GroupUpdated(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 26)]
                    GroupDisabled(::subxt::utils::AccountId32, [::core::primitive::u8; 32usize]),
                    #[codec(index = 27)]
                    UserAssignedToGroup(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                    #[codec(index = 28)]
                    UserUnAssignedToGroup(
                        ::subxt::utils::AccountId32,
                        [::core::primitive::u8; 32usize],
                        [::core::primitive::u8; 32usize],
                    ),
                }
            }
            pub mod structs {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Entity<_0> {
                    pub id: _0,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub enabled: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Permission2Role<_0> {
                    pub permission: _0,
                    pub role: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Role2Group<_0> {
                    pub role: _0,
                    pub group: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Role2User<_0> {
                    pub role: _0,
                    pub user: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct User2Group<_0> {
                    pub user: _0,
                    pub group: _0,
                }
            }
        }
        pub mod peaq_pallet_storage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    add_item {
                        item_type: ::std::vec::Vec<::core::primitive::u8>,
                        item: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    update_item {
                        item_type: ::std::vec::Vec<::core::primitive::u8>,
                        item: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    get_item {
                        item_type: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    ItemNotFound,
                    #[codec(index = 1)]
                    ItemTypeAlreadyExists,
                    #[codec(index = 2)]
                    ItemTypeExceedMax64,
                    #[codec(index = 3)]
                    ItemExceedMax128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    ItemAdded(
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    #[codec(index = 1)]
                    ItemRead(::std::vec::Vec<::core::primitive::u8>),
                    #[codec(index = 2)]
                    ItemUpdated(
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                }
            }
        }
        pub mod peaq_pallet_transaction {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    service_requested {
                        provider: ::subxt::utils::AccountId32,
                        token_deposited: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    service_delivered {
                        consumer: ::subxt::utils::AccountId32,
                        refund_info: runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                        spent_info: runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    ServiceRequested {
                        consumer: ::subxt::utils::AccountId32,
                        provider: ::subxt::utils::AccountId32,
                        token_deposited: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    ServiceDelivered {
                        provider: ::subxt::utils::AccountId32,
                        consumer: ::subxt::utils::AccountId32,
                        refund_info: runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                        spent_info: runtime_types::peaq_pallet_transaction::structs::DeliveredInfo<
                            ::core::primitive::u128,
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                    },
                }
            }
            pub mod structs {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DeliveredInfo<_0, _1, _2> {
                    pub token_num: _0,
                    pub tx_hash: _1,
                    pub time_point: runtime_types::peaq_pallet_transaction::structs::Timepoint<_2>,
                    pub call_hash: [::core::primitive::u8; 32usize],
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Timepoint<_0> {
                    pub height: _0,
                    pub index: ::core::primitive::u32,
                }
            }
        }
        pub mod peaq_primitives_xcm {
            use super::runtime_types;
            pub mod currency {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CurrencyId {
                    #[codec(index = 0)]
                    Token(runtime_types::peaq_primitives_xcm::currency::TokenSymbol),
                    #[codec(index = 1)]
                    Erc20(::subxt::utils::H160),
                    #[codec(index = 2)]
                    LPToken(
                        runtime_types::peaq_primitives_xcm::currency::TokenSymbol,
                        runtime_types::peaq_primitives_xcm::currency::TokenSymbol,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TokenSymbol {
                    #[codec(index = 0)]
                    PEAQ,
                    #[codec(index = 1)]
                    KRST,
                    #[codec(index = 2)]
                    AGNG,
                    #[codec(index = 64)]
                    DOT,
                    #[codec(index = 65)]
                    KSM,
                    #[codec(index = 66)]
                    ROC,
                    #[codec(index = 128)]
                    ACA,
                    #[codec(index = 129)]
                    BNC,
                }
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum XcmpMessageFormat {
                    #[codec(index = 0)]
                    ConcatenatedVersionedXcm,
                    #[codec(index = 1)]
                    ConcatenatedEncodedBlob,
                    #[codec(index = 2)]
                    Signals,
                }
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v4 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHostConfiguration {
                    pub max_code_size: ::core::primitive::u32,
                    pub max_head_data_size: ::core::primitive::u32,
                    pub max_upward_queue_count: ::core::primitive::u32,
                    pub max_upward_queue_size: ::core::primitive::u32,
                    pub max_upward_message_size: ::core::primitive::u32,
                    pub max_upward_message_num_per_candidate: ::core::primitive::u32,
                    pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
                    pub validation_upgrade_cooldown: ::core::primitive::u32,
                    pub validation_upgrade_delay: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PersistedValidationData<_0, _1> {
                    pub parent_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    pub relay_parent_number: _1,
                    pub relay_parent_storage_root: _0,
                    pub max_pov_size: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct U256(pub [::core::primitive::u64; 4usize]);
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Permill(pub ::core::primitive::u32);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_trie {
            use super::runtime_types;
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StorageProof {
                    pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod staking_coefficient_reward {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_coefficient { coefficient: ::core::primitive::u8 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    InvalidRateConfig,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    CoefficientSet(::core::primitive::u8),
                }
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded2 {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v2 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: runtime_types::xcm::v2::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v2::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: runtime_types::xcm::v2::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey(
                            runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v2::BodyId,
                            part: runtime_types::xcm::v2::BodyPart,
                        },
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                        #[codec(index = 6)]
                        Blob(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v2::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v2::multiasset::AssetId,
                            fun: runtime_types::xcm::v2::multiasset::WildFungibility,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v2::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v2::multilocation::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        MultiLocationFull,
                        #[codec(index = 5)]
                        MultiLocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        UnhandledXcmVersion,
                        #[codec(index = 23)]
                        WeightLimitReached(::core::primitive::u64),
                        #[codec(index = 24)]
                        Barrier,
                        #[codec(index = 25)]
                        WeightNotComputable,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyId {
                    #[codec(index = 0)]
                    Unit,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Index(#[codec(compact)] ::core::primitive::u32),
                    #[codec(index = 3)]
                    Executive,
                    #[codec(index = 4)]
                    Technical,
                    #[codec(index = 5)]
                    Legislative,
                    #[codec(index = 6)]
                    Judicial,
                    #[codec(index = 7)]
                    Defense,
                    #[codec(index = 8)]
                    Administration,
                    #[codec(index = 9)]
                    Treasury,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyPart {
                    #[codec(index = 0)]
                    Voice,
                    #[codec(index = 1)]
                    Members {
                        #[codec(compact)]
                        count: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    Fraction {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    AtLeastProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    MoreThanProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NetworkId {
                    #[codec(index = 0)]
                    Any,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Polkadot,
                    #[codec(index = 3)]
                    Kusama,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v2::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(#[codec(compact)] ::core::primitive::u64),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction2>);
            }
            pub mod v3 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Moniker([::core::primitive::u8; 4usize]),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                        #[codec(index = 7)]
                        Defense,
                        #[codec(index = 8)]
                        Administration,
                        #[codec(index = 9)]
                        Treasury,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v3::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v3::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v3::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v3::junctions::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        UnhandledXcmVersion,
                        #[codec(index = 36)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 37)]
                        Barrier,
                        #[codec(index = 38)]
                        WeightNotComputable,
                        #[codec(index = 39)]
                        ExceedsStackLimit,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 1)]
                        Incomplete(
                            runtime_types::sp_weights::weight_v2::Weight,
                            runtime_types::xcm::v3::traits::Error,
                        ),
                        #[codec(index = 2)]
                        Error(runtime_types::xcm::v3::traits::Error),
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MaybeErrorCode {
                    #[codec(index = 0)]
                    Success,
                    #[codec(index = 1)]
                    Error(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    TruncatedError(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::xcm::v3::multilocation::MultiLocation,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::xcm::v3::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(runtime_types::sp_weights::weight_v2::Weight),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction2>);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiAsset {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAsset),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAsset),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiAssets {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAssets),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAssets),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiLocation {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multilocation::MultiLocation),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multilocation::MultiLocation),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm2 {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm2),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm2),
            }
        }
        pub mod zenlink_protocol {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Call {
                    #[codec(index = 0)]
                    set_fee_receiver {
                        send_to: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 1)]
                    set_fee_point { fee_point: ::core::primitive::u8 },
                    #[codec(index = 2)]
                    transfer {
                        asset_id: runtime_types::zenlink_protocol::primitives::AssetId,
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    create_pair {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                    },
                    #[codec(index = 4)]
                    add_liquidity {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        amount_0_desired: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_1_desired: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_0_min: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_1_min: ::core::primitive::u128,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    remove_liquidity {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        liquidity: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_0_min: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_1_min: ::core::primitive::u128,
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    swap_exact_assets_for_assets {
                        #[codec(compact)]
                        amount_in: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_out_min: ::core::primitive::u128,
                        path: ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    swap_assets_for_exact_assets {
                        #[codec(compact)]
                        amount_out: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_in_max: ::core::primitive::u128,
                        path: ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    bootstrap_create {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        target_supply_0: ::core::primitive::u128,
                        #[codec(compact)]
                        target_supply_1: ::core::primitive::u128,
                        #[codec(compact)]
                        capacity_supply_0: ::core::primitive::u128,
                        #[codec(compact)]
                        capacity_supply_1: ::core::primitive::u128,
                        #[codec(compact)]
                        end: ::core::primitive::u32,
                        rewards:
                            ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
                        limits: ::std::vec::Vec<(
                            runtime_types::zenlink_protocol::primitives::AssetId,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 9)]
                    bootstrap_contribute {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        amount_0_contribute: ::core::primitive::u128,
                        #[codec(compact)]
                        amount_1_contribute: ::core::primitive::u128,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    bootstrap_claim {
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    bootstrap_end {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                    },
                    #[codec(index = 12)]
                    bootstrap_update {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        #[codec(compact)]
                        target_supply_0: ::core::primitive::u128,
                        #[codec(compact)]
                        target_supply_1: ::core::primitive::u128,
                        #[codec(compact)]
                        capacity_supply_0: ::core::primitive::u128,
                        #[codec(compact)]
                        capacity_supply_1: ::core::primitive::u128,
                        #[codec(compact)]
                        end: ::core::primitive::u32,
                        rewards:
                            ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
                        limits: ::std::vec::Vec<(
                            runtime_types::zenlink_protocol::primitives::AssetId,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 13)]
                    bootstrap_refund {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                    },
                    #[codec(index = 14)]
                    bootstrap_charge_reward {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        charge_rewards: ::std::vec::Vec<(
                            runtime_types::zenlink_protocol::primitives::AssetId,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 15)]
                    bootstrap_withdraw_reward {
                        asset_0: runtime_types::zenlink_protocol::primitives::AssetId,
                        asset_1: runtime_types::zenlink_protocol::primitives::AssetId,
                        recipient: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    RequireProtocolAdmin,
                    #[codec(index = 1)]
                    RequireProtocolAdminCandidate,
                    #[codec(index = 2)]
                    InvalidFeePoint,
                    #[codec(index = 3)]
                    UnsupportedAssetType,
                    #[codec(index = 4)]
                    InsufficientAssetBalance,
                    #[codec(index = 5)]
                    NativeBalanceTooLow,
                    #[codec(index = 6)]
                    DeniedCreatePair,
                    #[codec(index = 7)]
                    PairAlreadyExists,
                    #[codec(index = 8)]
                    PairNotExists,
                    #[codec(index = 9)]
                    AssetNotExists,
                    #[codec(index = 10)]
                    InsufficientLiquidity,
                    #[codec(index = 11)]
                    InsufficientPairReserve,
                    #[codec(index = 12)]
                    InsufficientTargetAmount,
                    #[codec(index = 13)]
                    ExcessiveSoldAmount,
                    #[codec(index = 14)]
                    InvalidPath,
                    #[codec(index = 15)]
                    IncorrectAssetAmountRange,
                    #[codec(index = 16)]
                    Overflow,
                    #[codec(index = 17)]
                    Deadline,
                    #[codec(index = 18)]
                    AccountIdBadLocation,
                    #[codec(index = 19)]
                    ExecutionFailed,
                    #[codec(index = 20)]
                    DeniedTransferToSelf,
                    #[codec(index = 21)]
                    TargetChainNotRegistered,
                    #[codec(index = 22)]
                    InvariantCheckFailed,
                    #[codec(index = 23)]
                    PairCreateForbidden,
                    #[codec(index = 24)]
                    NotInBootstrap,
                    #[codec(index = 25)]
                    InvalidContributionAmount,
                    #[codec(index = 26)]
                    UnqualifiedBootstrap,
                    #[codec(index = 27)]
                    ZeroContribute,
                    #[codec(index = 28)]
                    DenyRefund,
                    #[codec(index = 29)]
                    DisableBootstrap,
                    #[codec(index = 30)]
                    NotQualifiedAccount,
                    #[codec(index = 31)]
                    NoRewardTokens,
                    #[codec(index = 32)]
                    ChargeRewardParamsError,
                    #[codec(index = 33)]
                    ExistRewardsInBootstrap,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Event {
                    #[codec(index = 0)]
                    Transferred(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    Burned(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    Minted(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    PairCreated(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                    ),
                    #[codec(index = 4)]
                    LiquidityAdded(
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    LiquidityRemoved(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    AssetSwap(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<runtime_types::zenlink_protocol::primitives::AssetId>,
                        ::std::vec::Vec<::core::primitive::u128>,
                    ),
                    #[codec(index = 7)]
                    TransferredToParachain(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 8)]
                    BootstrapContribute(
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 9)]
                    BootstrapEnd(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 10)]
                    BootstrapCreated(
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 11)]
                    BootstrapClaim(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 12)]
                    BootstrapUpdate(
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 13)]
                    BootstrapRefund(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 14)]
                    DistributeReward(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<(
                            runtime_types::zenlink_protocol::primitives::AssetId,
                            ::core::primitive::u128,
                        )>,
                    ),
                    #[codec(index = 15)]
                    ChargeReward(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                        ::std::vec::Vec<(
                            runtime_types::zenlink_protocol::primitives::AssetId,
                            ::core::primitive::u128,
                        )>,
                    ),
                    #[codec(index = 16)]
                    WithdrawReward(
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        runtime_types::zenlink_protocol::primitives::AssetId,
                        ::subxt::utils::AccountId32,
                    ),
                }
            }
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetId {
                    pub chain_id: ::core::primitive::u32,
                    pub asset_type: ::core::primitive::u8,
                    pub asset_index: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BootstrapParameter<_0, _1, _2> {
                    pub target_supply: (_0, _0),
                    pub capacity_supply: (_0, _0),
                    pub accumulated_supply: (_0, _0),
                    pub end_block_number: _1,
                    pub pair_account: _2,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PairMetadata<_0, _1> {
                    pub pair_account: _1,
                    pub total_supply: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PairStatus<_0, _1, _2> {
                    #[codec(index = 0)]
                    Trading(runtime_types::zenlink_protocol::primitives::PairMetadata<_0, _2>),
                    #[codec(index = 1)]
                    Bootstrap(
                        runtime_types::zenlink_protocol::primitives::BootstrapParameter<_0, _1, _2>,
                    ),
                    #[codec(index = 2)]
                    Disable,
                }
            }
        }
    }
}
